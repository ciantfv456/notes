{"ast":null,"code":"import { __extends } from 'tslib';\nimport { ApolloLink, Observable } from 'apollo-link';\nfunction onError(errorHandler) {\n  return new ApolloLink(function (operation, forward) {\n    return new Observable(function (observer) {\n      var sub;\n      var retriedSub;\n      var retriedResult;\n      try {\n        sub = forward(operation).subscribe({\n          next: function (result) {\n            if (result.errors) {\n              retriedResult = errorHandler({\n                graphQLErrors: result.errors,\n                response: result,\n                operation: operation,\n                forward: forward\n              });\n              if (retriedResult) {\n                retriedSub = retriedResult.subscribe({\n                  next: observer.next.bind(observer),\n                  error: observer.error.bind(observer),\n                  complete: observer.complete.bind(observer)\n                });\n                return;\n              }\n            }\n            observer.next(result);\n          },\n          error: function (networkError) {\n            retriedResult = errorHandler({\n              operation: operation,\n              networkError: networkError,\n              graphQLErrors: networkError && networkError.result && networkError.result.errors,\n              forward: forward\n            });\n            if (retriedResult) {\n              retriedSub = retriedResult.subscribe({\n                next: observer.next.bind(observer),\n                error: observer.error.bind(observer),\n                complete: observer.complete.bind(observer)\n              });\n              return;\n            }\n            observer.error(networkError);\n          },\n          complete: function () {\n            if (!retriedResult) {\n              observer.complete.bind(observer)();\n            }\n          }\n        });\n      } catch (e) {\n        errorHandler({\n          networkError: e,\n          operation: operation,\n          forward: forward\n        });\n        observer.error(e);\n      }\n      return function () {\n        if (sub) sub.unsubscribe();\n        if (retriedSub) sub.unsubscribe();\n      };\n    });\n  });\n}\nvar ErrorLink = function (_super) {\n  __extends(ErrorLink, _super);\n  function ErrorLink(errorHandler) {\n    var _this = _super.call(this) || this;\n    _this.link = onError(errorHandler);\n    return _this;\n  }\n  ErrorLink.prototype.request = function (operation, forward) {\n    return this.link.request(operation, forward);\n  };\n  return ErrorLink;\n}(ApolloLink);\nexport { ErrorLink, onError };","map":{"version":3,"names":["onError","errorHandler","ApolloLink","operation","forward","Observable","observer","sub","retriedSub","retriedResult","subscribe","next","result","errors","graphQLErrors","response","bind","error","complete","networkError","e","unsubscribe","__extends","ErrorLink","_super","_this","call","link","prototype","request"],"sources":["C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\apollo-link-error\\src\\index.ts"],"sourcesContent":["/* tslint:disable */\n\nimport {\n  ApolloLink,\n  Observable,\n  Operation,\n  NextLink,\n  FetchResult,\n  ExecutionResult,\n} from 'apollo-link';\nimport { GraphQLError } from 'graphql';\nimport { ServerError, ServerParseError } from 'apollo-link-http-common';\n\nexport interface ErrorResponse {\n  graphQLErrors?: ReadonlyArray<GraphQLError>;\n  networkError?: Error | ServerError | ServerParseError;\n  response?: ExecutionResult;\n  operation: Operation;\n  forward: NextLink;\n}\n\nexport namespace ErrorLink {\n  /**\n   * Callback to be triggered when an error occurs within the link stack.\n   */\n  export interface ErrorHandler {\n    (error: ErrorResponse): Observable<FetchResult> | void;\n  }\n}\n\n// For backwards compatibility.\nexport import ErrorHandler = ErrorLink.ErrorHandler;\n\nexport function onError(errorHandler: ErrorHandler): ApolloLink {\n  return new ApolloLink((operation, forward) => {\n    return new Observable(observer => {\n      let sub;\n      let retriedSub;\n      let retriedResult;\n\n      try {\n        sub = forward(operation).subscribe({\n          next: result => {\n            if (result.errors) {\n              retriedResult = errorHandler({\n                graphQLErrors: result.errors,\n                response: result,\n                operation,\n                forward,\n              });\n\n              if (retriedResult) {\n                retriedSub = retriedResult.subscribe({\n                  next: observer.next.bind(observer),\n                  error: observer.error.bind(observer),\n                  complete: observer.complete.bind(observer),\n                });\n                return;\n              }\n            }\n            observer.next(result);\n          },\n          error: networkError => {\n            retriedResult = errorHandler({\n              operation,\n              networkError,\n              //Network errors can return GraphQL errors on for example a 403\n              graphQLErrors:\n                networkError &&\n                networkError.result &&\n                networkError.result.errors,\n              forward,\n            });\n            if (retriedResult) {\n              retriedSub = retriedResult.subscribe({\n                next: observer.next.bind(observer),\n                error: observer.error.bind(observer),\n                complete: observer.complete.bind(observer),\n              });\n              return;\n            }\n            observer.error(networkError);\n          },\n          complete: () => {\n            // disable the previous sub from calling complete on observable\n            // if retry is in flight.\n            if (!retriedResult) {\n              observer.complete.bind(observer)();\n            }\n          },\n        });\n      } catch (e) {\n        errorHandler({ networkError: e, operation, forward });\n        observer.error(e);\n      }\n\n      return () => {\n        if (sub) sub.unsubscribe();\n        if (retriedSub) sub.unsubscribe();\n      };\n    });\n  });\n}\n\nexport class ErrorLink extends ApolloLink {\n  private link: ApolloLink;\n  constructor(errorHandler: ErrorLink.ErrorHandler) {\n    super();\n    this.link = onError(errorHandler);\n  }\n\n  public request(\n    operation: Operation,\n    forward: NextLink,\n  ): Observable<FetchResult> | null {\n    return this.link.request(operation, forward);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}