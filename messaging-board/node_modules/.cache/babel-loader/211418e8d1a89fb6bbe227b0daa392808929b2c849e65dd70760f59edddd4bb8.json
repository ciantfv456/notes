{"ast":null,"code":"import { __rest, __assign, __extends } from 'tslib';\nimport { ApolloLink, fromError, Observable } from 'apollo-link';\nimport { checkFetcher, selectURI, selectHttpOptionsAndBody, fallbackHttpConfig, createSignalIfSupported, serializeFetchParameter, parseAndCheckHttpResponse } from 'apollo-link-http-common';\nvar createHttpLink = function (linkOptions) {\n  if (linkOptions === void 0) {\n    linkOptions = {};\n  }\n  var _a = linkOptions.uri,\n    uri = _a === void 0 ? '/graphql' : _a,\n    fetcher = linkOptions.fetch,\n    includeExtensions = linkOptions.includeExtensions,\n    useGETForQueries = linkOptions.useGETForQueries,\n    requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"includeExtensions\", \"useGETForQueries\"]);\n  checkFetcher(fetcher);\n  if (!fetcher) {\n    fetcher = fetch;\n  }\n  var linkConfig = {\n    http: {\n      includeExtensions: includeExtensions\n    },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers\n  };\n  return new ApolloLink(function (operation) {\n    var chosenURI = selectURI(operation, uri);\n    var context = operation.getContext();\n    var clientAwarenessHeaders = {};\n    if (context.clientAwareness) {\n      var _a = context.clientAwareness,\n        name_1 = _a.name,\n        version = _a.version;\n      if (name_1) {\n        clientAwarenessHeaders['apollographql-client-name'] = name_1;\n      }\n      if (version) {\n        clientAwarenessHeaders['apollographql-client-version'] = version;\n      }\n    }\n    var contextHeaders = __assign({}, clientAwarenessHeaders, context.headers);\n    var contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders\n    };\n    var _b = selectHttpOptionsAndBody(operation, fallbackHttpConfig, linkConfig, contextConfig),\n      options = _b.options,\n      body = _b.body;\n    var controller;\n    if (!options.signal) {\n      var _c = createSignalIfSupported(),\n        _controller = _c.controller,\n        signal = _c.signal;\n      controller = _controller;\n      if (controller) options.signal = signal;\n    }\n    var definitionIsMutation = function (d) {\n      return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n    };\n    if (useGETForQueries && !operation.query.definitions.some(definitionIsMutation)) {\n      options.method = 'GET';\n    }\n    if (options.method === 'GET') {\n      var _d = rewriteURIForGET(chosenURI, body),\n        newURI = _d.newURI,\n        parseError = _d.parseError;\n      if (parseError) {\n        return fromError(parseError);\n      }\n      chosenURI = newURI;\n    } else {\n      try {\n        options.body = serializeFetchParameter(body, 'Payload');\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n    return new Observable(function (observer) {\n      fetcher(chosenURI, options).then(function (response) {\n        operation.setContext({\n          response: response\n        });\n        return response;\n      }).then(parseAndCheckHttpResponse(operation)).then(function (result) {\n        observer.next(result);\n        observer.complete();\n        return result;\n      }).catch(function (err) {\n        if (err.name === 'AbortError') return;\n        if (err.result && err.result.errors && err.result.data) {\n          observer.next(err.result);\n        }\n        observer.error(err);\n      });\n      return function () {\n        if (controller) controller.abort();\n      };\n    });\n  });\n};\nfunction rewriteURIForGET(chosenURI, body) {\n  var queryParams = [];\n  var addQueryParam = function (key, value) {\n    queryParams.push(key + \"=\" + encodeURIComponent(value));\n  };\n  if ('query' in body) {\n    addQueryParam('query', body.query);\n  }\n  if (body.operationName) {\n    addQueryParam('operationName', body.operationName);\n  }\n  if (body.variables) {\n    var serializedVariables = void 0;\n    try {\n      serializedVariables = serializeFetchParameter(body.variables, 'Variables map');\n    } catch (parseError) {\n      return {\n        parseError: parseError\n      };\n    }\n    addQueryParam('variables', serializedVariables);\n  }\n  if (body.extensions) {\n    var serializedExtensions = void 0;\n    try {\n      serializedExtensions = serializeFetchParameter(body.extensions, 'Extensions map');\n    } catch (parseError) {\n      return {\n        parseError: parseError\n      };\n    }\n    addQueryParam('extensions', serializedExtensions);\n  }\n  var fragment = '',\n    preFragment = chosenURI;\n  var fragmentStart = chosenURI.indexOf('#');\n  if (fragmentStart !== -1) {\n    fragment = chosenURI.substr(fragmentStart);\n    preFragment = chosenURI.substr(0, fragmentStart);\n  }\n  var queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';\n  var newURI = preFragment + queryParamsPrefix + queryParams.join('&') + fragment;\n  return {\n    newURI: newURI\n  };\n}\nvar HttpLink = function (_super) {\n  __extends(HttpLink, _super);\n  function HttpLink(opts) {\n    return _super.call(this, createHttpLink(opts).request) || this;\n  }\n  return HttpLink;\n}(ApolloLink);\nexport { HttpLink, createHttpLink };","map":{"version":3,"names":["createHttpLink","linkOptions","_a","uri","fetcher","fetch","includeExtensions","useGETForQueries","requestOptions","__rest","checkFetcher","linkConfig","http","options","fetchOptions","credentials","headers","ApolloLink","operation","chosenURI","selectURI","context","getContext","clientAwarenessHeaders","clientAwareness","name_1","name","version","contextHeaders","__assign","contextConfig","_b","selectHttpOptionsAndBody","fallbackHttpConfig","body","controller","signal","_c","createSignalIfSupported","_controller","definitionIsMutation","d","kind","query","definitions","some","method","_d","rewriteURIForGET","newURI","parseError","fromError","serializeFetchParameter","Observable","observer","then","response","setContext","parseAndCheckHttpResponse","result","next","complete","catch","err","errors","data","error","abort","queryParams","addQueryParam","key","value","push","encodeURIComponent","operationName","variables","serializedVariables","extensions","serializedExtensions","fragment","preFragment","fragmentStart","indexOf","substr","queryParamsPrefix","join","__extends","HttpLink","_super","opts","call","request"],"sources":["C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\apollo-link-http\\src\\httpLink.ts"],"sourcesContent":["/* tslint:disable */\n\nimport { ApolloLink, Observable, RequestHandler, fromError } from 'apollo-link';\nimport {\n  serializeFetchParameter,\n  selectURI,\n  parseAndCheckHttpResponse,\n  checkFetcher,\n  selectHttpOptionsAndBody,\n  createSignalIfSupported,\n  fallbackHttpConfig,\n  Body,\n  HttpOptions,\n  UriFunction as _UriFunction,\n} from 'apollo-link-http-common';\nimport { DefinitionNode } from 'graphql';\n\nexport namespace HttpLink {\n  //TODO Would much rather be able to export directly\n  export interface UriFunction extends _UriFunction {}\n  export interface Options extends HttpOptions {\n    /**\n     * If set to true, use the HTTP GET method for query operations. Mutations\n     * will still use the method specified in fetchOptions.method (which defaults\n     * to POST).\n     */\n    useGETForQueries?: boolean;\n  }\n}\n\n// For backwards compatibility.\nexport import FetchOptions = HttpLink.Options;\nexport import UriFunction = HttpLink.UriFunction;\n\nexport const createHttpLink = (linkOptions: HttpLink.Options = {}) => {\n  let {\n    uri = '/graphql',\n    // use default global fetch if nothing passed in\n    fetch: fetcher,\n    includeExtensions,\n    useGETForQueries,\n    ...requestOptions\n  } = linkOptions;\n\n  // dev warnings to ensure fetch is present\n  checkFetcher(fetcher);\n\n  //fetcher is set here rather than the destructuring to ensure fetch is\n  //declared before referencing it. Reference in the destructuring would cause\n  //a ReferenceError\n  if (!fetcher) {\n    fetcher = fetch;\n  }\n\n  const linkConfig = {\n    http: { includeExtensions },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers,\n  };\n\n  return new ApolloLink(operation => {\n    let chosenURI = selectURI(operation, uri);\n\n    const context = operation.getContext();\n\n    // `apollographql-client-*` headers are automatically set if a\n    // `clientAwareness` object is found in the context. These headers are\n    // set first, followed by the rest of the headers pulled from\n    // `context.headers`. If desired, `apollographql-client-*` headers set by\n    // the `clientAwareness` object can be overridden by\n    // `apollographql-client-*` headers set in `context.headers`.\n    const clientAwarenessHeaders = {};\n    if (context.clientAwareness) {\n      const { name, version } = context.clientAwareness;\n      if (name) {\n        clientAwarenessHeaders['apollographql-client-name'] = name;\n      }\n      if (version) {\n        clientAwarenessHeaders['apollographql-client-version'] = version;\n      }\n    }\n\n    const contextHeaders = { ...clientAwarenessHeaders, ...context.headers };\n\n    const contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders,\n    };\n\n    //uses fallback, link, and then context to build options\n    const { options, body } = selectHttpOptionsAndBody(\n      operation,\n      fallbackHttpConfig,\n      linkConfig,\n      contextConfig,\n    );\n\n    let controller;\n    if (!(options as any).signal) {\n      const { controller: _controller, signal } = createSignalIfSupported();\n      controller = _controller;\n      if (controller) (options as any).signal = signal;\n    }\n\n    // If requested, set method to GET if there are no mutations.\n    const definitionIsMutation = (d: DefinitionNode) => {\n      return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n    };\n    if (\n      useGETForQueries &&\n      !operation.query.definitions.some(definitionIsMutation)\n    ) {\n      options.method = 'GET';\n    }\n\n    if (options.method === 'GET') {\n      const { newURI, parseError } = rewriteURIForGET(chosenURI, body);\n      if (parseError) {\n        return fromError(parseError);\n      }\n      chosenURI = newURI;\n    } else {\n      try {\n        (options as any).body = serializeFetchParameter(body, 'Payload');\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n\n    return new Observable(observer => {\n      fetcher(chosenURI, options)\n        .then(response => {\n          operation.setContext({ response });\n          return response;\n        })\n        .then(parseAndCheckHttpResponse(operation))\n        .then(result => {\n          // we have data and can send it to back up the link chain\n          observer.next(result);\n          observer.complete();\n          return result;\n        })\n        .catch(err => {\n          // fetch was cancelled so it's already been cleaned up in the unsubscribe\n          if (err.name === 'AbortError') return;\n          // if it is a network error, BUT there is graphql result info\n          // fire the next observer before calling error\n          // this gives apollo-client (and react-apollo) the `graphqlErrors` and `networErrors`\n          // to pass to UI\n          // this should only happen if we *also* have data as part of the response key per\n          // the spec\n          if (err.result && err.result.errors && err.result.data) {\n            // if we don't call next, the UI can only show networkError because AC didn't\n            // get any graphqlErrors\n            // this is graphql execution result info (i.e errors and possibly data)\n            // this is because there is no formal spec how errors should translate to\n            // http status codes. So an auth error (401) could have both data\n            // from a public field, errors from a private field, and a status of 401\n            // {\n            //  user { // this will have errors\n            //    firstName\n            //  }\n            //  products { // this is public so will have data\n            //    cost\n            //  }\n            // }\n            //\n            // the result of above *could* look like this:\n            // {\n            //   data: { products: [{ cost: \"$10\" }] },\n            //   errors: [{\n            //      message: 'your session has timed out',\n            //      path: []\n            //   }]\n            // }\n            // status code of above would be a 401\n            // in the UI you want to show data where you can, errors as data where you can\n            // and use correct http status codes\n            observer.next(err.result);\n          }\n          observer.error(err);\n        });\n\n      return () => {\n        // XXX support canceling this request\n        // https://developers.google.com/web/updates/2017/09/abortable-fetch\n        if (controller) controller.abort();\n      };\n    });\n  });\n};\n\n// For GET operations, returns the given URI rewritten with parameters, or a\n// parse error.\nfunction rewriteURIForGET(chosenURI: string, body: Body) {\n  // Implement the standard HTTP GET serialization, plus 'extensions'. Note\n  // the extra level of JSON serialization!\n  const queryParams = [];\n  const addQueryParam = (key: string, value: string) => {\n    queryParams.push(`${key}=${encodeURIComponent(value)}`);\n  };\n\n  if ('query' in body) {\n    addQueryParam('query', body.query);\n  }\n  if (body.operationName) {\n    addQueryParam('operationName', body.operationName);\n  }\n  if (body.variables) {\n    let serializedVariables;\n    try {\n      serializedVariables = serializeFetchParameter(\n        body.variables,\n        'Variables map',\n      );\n    } catch (parseError) {\n      return { parseError };\n    }\n    addQueryParam('variables', serializedVariables);\n  }\n  if (body.extensions) {\n    let serializedExtensions;\n    try {\n      serializedExtensions = serializeFetchParameter(\n        body.extensions,\n        'Extensions map',\n      );\n    } catch (parseError) {\n      return { parseError };\n    }\n    addQueryParam('extensions', serializedExtensions);\n  }\n\n  // Reconstruct the URI with added query params.\n  // XXX This assumes that the URI is well-formed and that it doesn't\n  //     already contain any of these query params. We could instead use the\n  //     URL API and take a polyfill (whatwg-url@6) for older browsers that\n  //     don't support URLSearchParams. Note that some browsers (and\n  //     versions of whatwg-url) support URL but not URLSearchParams!\n  let fragment = '',\n    preFragment = chosenURI;\n  const fragmentStart = chosenURI.indexOf('#');\n  if (fragmentStart !== -1) {\n    fragment = chosenURI.substr(fragmentStart);\n    preFragment = chosenURI.substr(0, fragmentStart);\n  }\n  const queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';\n  const newURI =\n    preFragment + queryParamsPrefix + queryParams.join('&') + fragment;\n  return { newURI };\n}\n\nexport class HttpLink extends ApolloLink {\n  public requester: RequestHandler;\n  constructor(opts?: HttpLink.Options) {\n    super(createHttpLink(opts).request);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}