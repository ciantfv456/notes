{"ast":null,"code":"import { __extends } from 'tslib';\nimport ApolloClient__default from 'apollo-client';\nexport * from 'apollo-client';\nimport { ApolloLink, Observable } from 'apollo-link';\nexport * from 'apollo-link';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nexport * from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nexport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nexport { default as gql } from 'graphql-tag';\nimport { invariant } from 'ts-invariant';\nvar PRESET_CONFIG_KEYS = ['request', 'uri', 'credentials', 'headers', 'fetch', 'fetchOptions', 'clientState', 'onError', 'cacheRedirects', 'cache', 'name', 'version', 'resolvers', 'typeDefs', 'fragmentMatcher'];\nvar DefaultClient = function (_super) {\n  __extends(DefaultClient, _super);\n  function DefaultClient(config) {\n    if (config === void 0) {\n      config = {};\n    }\n    var _this = this;\n    if (config) {\n      var diff = Object.keys(config).filter(function (key) {\n        return PRESET_CONFIG_KEYS.indexOf(key) === -1;\n      });\n      if (diff.length > 0) {\n        process.env.NODE_ENV === \"production\" || invariant.warn('ApolloBoost was initialized with unsupported options: ' + (\"\" + diff.join(' ')));\n      }\n    }\n    var request = config.request,\n      uri = config.uri,\n      credentials = config.credentials,\n      headers = config.headers,\n      fetch = config.fetch,\n      fetchOptions = config.fetchOptions,\n      clientState = config.clientState,\n      cacheRedirects = config.cacheRedirects,\n      errorCallback = config.onError,\n      name = config.name,\n      version = config.version,\n      resolvers = config.resolvers,\n      typeDefs = config.typeDefs,\n      fragmentMatcher = config.fragmentMatcher;\n    var cache = config.cache;\n    process.env.NODE_ENV === \"production\" ? invariant(!cache || !cacheRedirects, 1) : invariant(!cache || !cacheRedirects, 'Incompatible cache configuration. When not providing `cache`, ' + 'configure the provided instance with `cacheRedirects` instead.');\n    if (!cache) {\n      cache = cacheRedirects ? new InMemoryCache({\n        cacheRedirects: cacheRedirects\n      }) : new InMemoryCache();\n    }\n    var errorLink = errorCallback ? onError(errorCallback) : onError(function (_a) {\n      var graphQLErrors = _a.graphQLErrors,\n        networkError = _a.networkError;\n      if (graphQLErrors) {\n        graphQLErrors.forEach(function (_a) {\n          var message = _a.message,\n            locations = _a.locations,\n            path = _a.path;\n          return process.env.NODE_ENV === \"production\" || invariant.warn(\"[GraphQL error]: Message: \" + message + \", Location: \" + (locations + \", Path: \" + path));\n        });\n      }\n      if (networkError) {\n        process.env.NODE_ENV === \"production\" || invariant.warn(\"[Network error]: \" + networkError);\n      }\n    });\n    var requestHandler = request ? new ApolloLink(function (operation, forward) {\n      return new Observable(function (observer) {\n        var handle;\n        Promise.resolve(operation).then(function (oper) {\n          return request(oper);\n        }).then(function () {\n          handle = forward(operation).subscribe({\n            next: observer.next.bind(observer),\n            error: observer.error.bind(observer),\n            complete: observer.complete.bind(observer)\n          });\n        }).catch(observer.error.bind(observer));\n        return function () {\n          if (handle) {\n            handle.unsubscribe();\n          }\n        };\n      });\n    }) : false;\n    var httpLink = new HttpLink({\n      uri: uri || '/graphql',\n      fetch: fetch,\n      fetchOptions: fetchOptions || {},\n      credentials: credentials || 'same-origin',\n      headers: headers || {}\n    });\n    var link = ApolloLink.from([errorLink, requestHandler, httpLink].filter(function (x) {\n      return !!x;\n    }));\n    var activeResolvers = resolvers;\n    var activeTypeDefs = typeDefs;\n    var activeFragmentMatcher = fragmentMatcher;\n    if (clientState) {\n      if (clientState.defaults) {\n        cache.writeData({\n          data: clientState.defaults\n        });\n      }\n      activeResolvers = clientState.resolvers;\n      activeTypeDefs = clientState.typeDefs;\n      activeFragmentMatcher = clientState.fragmentMatcher;\n    }\n    _this = _super.call(this, {\n      cache: cache,\n      link: link,\n      name: name,\n      version: version,\n      resolvers: activeResolvers,\n      typeDefs: activeTypeDefs,\n      fragmentMatcher: activeFragmentMatcher\n    }) || this;\n    return _this;\n  }\n  return DefaultClient;\n}(ApolloClient__default);\nexport default DefaultClient;","map":{"version":3,"names":["PRESET_CONFIG_KEYS","DefaultClient","_super","__extends","config","_this","diff","Object","keys","filter","key","indexOf","length","process","env","NODE_ENV","invariant","warn","join","request","uri","credentials","headers","fetch","fetchOptions","clientState","cacheRedirects","errorCallback","onError","name","version","resolvers","typeDefs","fragmentMatcher","cache","InMemoryCache","errorLink","_a","graphQLErrors","networkError","forEach","message","locations","path","requestHandler","ApolloLink","operation","forward","Observable","observer","handle","Promise","resolve","then","oper","subscribe","next","bind","error","complete","catch","unsubscribe","httpLink","HttpLink","link","from","x","activeResolvers","activeTypeDefs","activeFragmentMatcher","defaults","writeData","data","call","ApolloClient__default"],"sources":["C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\apollo-boost\\src\\index.ts"],"sourcesContent":["/* necessary for backward compat */\nexport * from 'apollo-client';\nexport * from 'apollo-link';\nexport * from 'apollo-cache-inmemory';\n\nimport { Operation, ApolloLink, Observable } from 'apollo-link';\nimport { HttpLink, UriFunction } from 'apollo-link-http';\nimport { onError, ErrorLink } from 'apollo-link-error';\nimport { ApolloCache } from 'apollo-cache';\nimport { InMemoryCache, CacheResolverMap } from 'apollo-cache-inmemory';\nimport gql from 'graphql-tag';\nimport ApolloClient, {\n  Resolvers,\n  LocalStateFragmentMatcher,\n} from 'apollo-client';\nimport { DocumentNode } from 'graphql';\nimport { invariant } from 'ts-invariant';\n\nexport { gql, HttpLink };\n\ntype ClientStateConfig = {\n  cache?: ApolloCache<any>;\n  defaults?: Record<string, any>;\n  resolvers?: Resolvers | Resolvers[];\n  typeDefs?: string | string[] | DocumentNode | DocumentNode[];\n  fragmentMatcher?: LocalStateFragmentMatcher;\n};\n\nexport interface PresetConfig {\n  request?: (operation: Operation) => Promise<void> | void;\n  uri?: string | UriFunction;\n  credentials?: string;\n  headers?: any;\n  fetch?: WindowOrWorkerGlobalScope['fetch'];\n  fetchOptions?: HttpLink.Options;\n  clientState?: ClientStateConfig;\n  onError?: ErrorLink.ErrorHandler;\n  cacheRedirects?: CacheResolverMap;\n  cache?: ApolloCache<any>;\n  name?: string;\n  version?: string;\n  resolvers?: Resolvers | Resolvers[];\n  typeDefs?: string | string[] | DocumentNode | DocumentNode[];\n  fragmentMatcher?: LocalStateFragmentMatcher;\n  assumeImmutableResults?: boolean;\n}\n\n// Yes, these are the exact same as the `PresetConfig` interface. We're\n// defining these again so they can be used to verify that valid config\n// options are being used in the `DefaultClient` constructor, for clients\n// that aren't using Typescript. This duplication is unfortunate, and at\n// some point can likely be adjusted so these items are inferred from\n// the `PresetConfig` interface using a Typescript transform at compilation\n// time. Unfortunately, TS transforms with rollup don't appear to be quite\n// working properly, so this will have to be re-visited at some point.\n// For now, when updating the properties of the `PresetConfig` interface,\n// please also update this constant.\nconst PRESET_CONFIG_KEYS = [\n  'request',\n  'uri',\n  'credentials',\n  'headers',\n  'fetch',\n  'fetchOptions',\n  'clientState',\n  'onError',\n  'cacheRedirects',\n  'cache',\n  'name',\n  'version',\n  'resolvers',\n  'typeDefs',\n  'fragmentMatcher',\n];\n\nexport default class DefaultClient<TCache> extends ApolloClient<TCache> {\n  constructor(config: PresetConfig = {}) {\n    if (config) {\n      const diff = Object.keys(config).filter(\n        key => PRESET_CONFIG_KEYS.indexOf(key) === -1,\n      );\n\n      if (diff.length > 0) {\n        invariant.warn(\n          'ApolloBoost was initialized with unsupported options: ' +\n            `${diff.join(' ')}`,\n        );\n      }\n    }\n\n    const {\n      request,\n      uri,\n      credentials,\n      headers,\n      fetch,\n      fetchOptions,\n      clientState,\n      cacheRedirects,\n      onError: errorCallback,\n      name,\n      version,\n      resolvers,\n      typeDefs,\n      fragmentMatcher,\n    } = config;\n\n    let { cache } = config;\n\n    invariant(\n      !cache || !cacheRedirects,\n      'Incompatible cache configuration. When not providing `cache`, ' +\n        'configure the provided instance with `cacheRedirects` instead.',\n    );\n\n    if (!cache) {\n      cache = cacheRedirects\n        ? new InMemoryCache({ cacheRedirects })\n        : new InMemoryCache();\n    }\n\n    const errorLink = errorCallback\n      ? onError(errorCallback)\n      : onError(({ graphQLErrors, networkError }) => {\n          if (graphQLErrors) {\n            graphQLErrors.forEach(({ message, locations, path }) =>\n              // tslint:disable-next-line\n              invariant.warn(\n                `[GraphQL error]: Message: ${message}, Location: ` +\n                  `${locations}, Path: ${path}`,\n              ),\n            );\n          }\n          if (networkError) {\n            // tslint:disable-next-line\n            invariant.warn(`[Network error]: ${networkError}`);\n          }\n        });\n\n    const requestHandler = request\n      ? new ApolloLink(\n          (operation, forward) =>\n            new Observable(observer => {\n              let handle: any;\n              Promise.resolve(operation)\n                .then(oper => request(oper))\n                .then(() => {\n                  handle = forward(operation).subscribe({\n                    next: observer.next.bind(observer),\n                    error: observer.error.bind(observer),\n                    complete: observer.complete.bind(observer),\n                  });\n                })\n                .catch(observer.error.bind(observer));\n\n              return () => {\n                if (handle) {\n                  handle.unsubscribe();\n                }\n              };\n            }),\n        )\n      : false;\n\n    const httpLink = new HttpLink({\n      uri: uri || '/graphql',\n      fetch,\n      fetchOptions: fetchOptions || {},\n      credentials: credentials || 'same-origin',\n      headers: headers || {},\n    });\n\n    const link = ApolloLink.from([errorLink, requestHandler, httpLink].filter(\n      x => !!x,\n    ) as ApolloLink[]);\n\n    let activeResolvers = resolvers;\n    let activeTypeDefs = typeDefs;\n    let activeFragmentMatcher = fragmentMatcher;\n    if (clientState) {\n      if (clientState.defaults) {\n        cache.writeData({\n          data: clientState.defaults,\n        });\n      }\n      activeResolvers = clientState.resolvers;\n      activeTypeDefs = clientState.typeDefs;\n      activeFragmentMatcher = clientState.fragmentMatcher;\n    }\n\n    // super hacky, we will fix the types eventually\n    super({\n      cache,\n      link,\n      name,\n      version,\n      resolvers: activeResolvers,\n      typeDefs: activeTypeDefs,\n      fragmentMatcher: activeFragmentMatcher,\n    } as any);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}