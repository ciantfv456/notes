{"ast":null,"code":"import { parser, operationName, DocumentType, getApolloContext } from '@apollo/react-common';\nexport { ApolloConsumer, ApolloProvider, getApolloContext, resetApolloContext } from '@apollo/react-common';\nimport { __extends, __assign } from 'tslib';\nimport React, { useRef, useContext, useReducer, useEffect, useState } from 'react';\nimport { NetworkStatus, ApolloError } from 'apollo-client';\nimport { equal } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\nvar OperationData = function () {\n  function OperationData(options, context) {\n    this.isMounted = false;\n    this.previousOptions = {};\n    this.context = {};\n    this.options = {};\n    this.options = options || {};\n    this.context = context || {};\n  }\n  OperationData.prototype.getOptions = function () {\n    return this.options;\n  };\n  OperationData.prototype.setOptions = function (newOptions, storePrevious) {\n    if (storePrevious === void 0) {\n      storePrevious = false;\n    }\n    if (storePrevious && !equal(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n    this.options = newOptions;\n  };\n  OperationData.prototype.unmount = function () {\n    this.isMounted = false;\n  };\n  OperationData.prototype.refreshClient = function () {\n    var client = this.options && this.options.client || this.context && this.context.client;\n    process.env.NODE_ENV === \"production\" ? invariant(!!client, 2) : invariant(!!client, 'Could not find \"client\" in the context or passed in as an option. ' + 'Wrap the root component in an <ApolloProvider>, or pass an ' + 'ApolloClient instance in via options.');\n    var isNew = false;\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n    return {\n      client: this.client,\n      isNew: isNew\n    };\n  };\n  OperationData.prototype.verifyDocumentType = function (document, type) {\n    var operation = parser(document);\n    var requiredOperationName = operationName(type);\n    var usedOperationName = operationName(operation.type);\n    process.env.NODE_ENV === \"production\" ? invariant(operation.type === type, 3) : invariant(operation.type === type, \"Running a \" + requiredOperationName + \" requires a graphql \" + (requiredOperationName + \", but a \" + usedOperationName + \" was used instead.\"));\n  };\n  return OperationData;\n}();\nvar QueryData = function (_super) {\n  __extends(QueryData, _super);\n  function QueryData(_a) {\n    var options = _a.options,\n      context = _a.context,\n      onNewData = _a.onNewData;\n    var _this = _super.call(this, options, context) || this;\n    _this.previousData = {};\n    _this.currentObservable = {};\n    _this.runLazy = false;\n    _this.runLazyQuery = function (options) {\n      _this.cleanup();\n      _this.runLazy = true;\n      _this.lazyOptions = options;\n      _this.onNewData();\n    };\n    _this.getExecuteResult = function () {\n      var result = _this.getQueryResult();\n      _this.startQuerySubscription();\n      return result;\n    };\n    _this.obsRefetch = function (variables) {\n      return _this.currentObservable.query.refetch(variables);\n    };\n    _this.obsFetchMore = function (fetchMoreOptions) {\n      return _this.currentObservable.query.fetchMore(fetchMoreOptions);\n    };\n    _this.obsUpdateQuery = function (mapFn) {\n      return _this.currentObservable.query.updateQuery(mapFn);\n    };\n    _this.obsStartPolling = function (pollInterval) {\n      _this.currentObservable && _this.currentObservable.query && _this.currentObservable.query.startPolling(pollInterval);\n    };\n    _this.obsStopPolling = function () {\n      _this.currentObservable && _this.currentObservable.query && _this.currentObservable.query.stopPolling();\n    };\n    _this.obsSubscribeToMore = function (options) {\n      return _this.currentObservable.query.subscribeToMore(options);\n    };\n    _this.onNewData = onNewData;\n    return _this;\n  }\n  QueryData.prototype.execute = function () {\n    this.refreshClient();\n    var _a = this.getOptions(),\n      skip = _a.skip,\n      query = _a.query;\n    if (skip || query !== this.previousData.query) {\n      this.removeQuerySubscription();\n      this.previousData.query = query;\n    }\n    this.updateObservableQuery();\n    if (this.isMounted) this.startQuerySubscription();\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  };\n  QueryData.prototype.executeLazy = function () {\n    return !this.runLazy ? [this.runLazyQuery, {\n      loading: false,\n      networkStatus: NetworkStatus.ready,\n      called: false,\n      data: undefined\n    }] : [this.runLazyQuery, this.execute()];\n  };\n  QueryData.prototype.fetchData = function () {\n    var options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n    var obs = this.currentObservable.query;\n    var currentResult = obs.getCurrentResult();\n    return currentResult.loading ? obs.result() : false;\n  };\n  QueryData.prototype.afterExecute = function (_a) {\n    var _b = (_a === void 0 ? {} : _a).lazy,\n      lazy = _b === void 0 ? false : _b;\n    this.isMounted = true;\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n    this.previousOptions = this.getOptions();\n    return this.unmount.bind(this);\n  };\n  QueryData.prototype.cleanup = function () {\n    this.removeQuerySubscription();\n    delete this.currentObservable.query;\n    delete this.previousData.result;\n  };\n  QueryData.prototype.getOptions = function () {\n    var options = _super.prototype.getOptions.call(this);\n    if (this.lazyOptions) {\n      options.variables = __assign(__assign({}, options.variables), this.lazyOptions.variables);\n      options.context = __assign(__assign({}, options.context), this.lazyOptions.context);\n    }\n    if (this.runLazy) {\n      delete options.skip;\n    }\n    return options;\n  };\n  QueryData.prototype.ssrInitiated = function () {\n    return this.context && this.context.renderPromises;\n  };\n  QueryData.prototype.getExecuteSsrResult = function () {\n    var ssrDisabled = this.getOptions().ssr === false;\n    var fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n    var ssrLoading = __assign({\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client\n    }, this.observableQueryFields());\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previousData.result = ssrLoading;\n      return ssrLoading;\n    }\n    var result;\n    if (this.ssrInitiated()) {\n      result = this.context.renderPromises.addQueryPromise(this, this.getExecuteResult) || ssrLoading;\n    }\n    return result;\n  };\n  QueryData.prototype.prepareObservableQueryOptions = function () {\n    var options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    var displayName = options.displayName || 'Query';\n    if (this.ssrInitiated() && (options.fetchPolicy === 'network-only' || options.fetchPolicy === 'cache-and-network')) {\n      options.fetchPolicy = 'cache-first';\n    }\n    return __assign(__assign({}, options), {\n      displayName: displayName,\n      context: options.context,\n      metadata: {\n        reactComponent: {\n          displayName: displayName\n        }\n      }\n    });\n  };\n  QueryData.prototype.initializeObservableQuery = function () {\n    var _a, _b;\n    if (this.ssrInitiated()) {\n      this.currentObservable.query = this.context.renderPromises.getSSRObservable(this.getOptions());\n    }\n    if (!this.currentObservable.query) {\n      var observableQueryOptions = this.prepareObservableQueryOptions();\n      this.previousData.observableQueryOptions = __assign(__assign({}, observableQueryOptions), {\n        children: null\n      });\n      this.currentObservable.query = this.refreshClient().client.watchQuery(__assign({}, observableQueryOptions));\n      if (this.ssrInitiated()) {\n        (_b = (_a = this.context) === null || _a === void 0 ? void 0 : _a.renderPromises) === null || _b === void 0 ? void 0 : _b.registerSSRObservable(this.currentObservable.query, observableQueryOptions);\n      }\n    }\n  };\n  QueryData.prototype.updateObservableQuery = function () {\n    if (!this.currentObservable.query) {\n      this.initializeObservableQuery();\n      return;\n    }\n    var newObservableQueryOptions = __assign(__assign({}, this.prepareObservableQueryOptions()), {\n      children: null\n    });\n    if (!equal(newObservableQueryOptions, this.previousData.observableQueryOptions)) {\n      this.previousData.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable.query.setOptions(newObservableQueryOptions).catch(function () {});\n    }\n  };\n  QueryData.prototype.startQuerySubscription = function () {\n    var _this = this;\n    if (this.currentObservable.subscription || this.getOptions().skip) return;\n    var obsQuery = this.currentObservable.query;\n    this.currentObservable.subscription = obsQuery.subscribe({\n      next: function (_a) {\n        var loading = _a.loading,\n          networkStatus = _a.networkStatus,\n          data = _a.data;\n        var previousResult = _this.previousData.result;\n        if (previousResult && previousResult.loading === loading && previousResult.networkStatus === networkStatus && equal(previousResult.data, data)) {\n          return;\n        }\n        _this.onNewData();\n      },\n      error: function (error) {\n        _this.resubscribeToQuery();\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n        var previousResult = _this.previousData.result;\n        if (previousResult && previousResult.loading || !equal(error, _this.previousData.error)) {\n          _this.previousData.error = error;\n          _this.onNewData();\n        }\n      }\n    });\n  };\n  QueryData.prototype.resubscribeToQuery = function () {\n    this.removeQuerySubscription();\n    var lastError = this.currentObservable.query.getLastError();\n    var lastResult = this.currentObservable.query.getLastResult();\n    this.currentObservable.query.resetLastResults();\n    this.startQuerySubscription();\n    Object.assign(this.currentObservable.query, {\n      lastError: lastError,\n      lastResult: lastResult\n    });\n  };\n  QueryData.prototype.getQueryResult = function () {\n    var result = this.observableQueryFields();\n    var options = this.getOptions();\n    if (options.skip) {\n      result = __assign(__assign({}, result), {\n        data: undefined,\n        error: undefined,\n        loading: false,\n        called: true\n      });\n    } else {\n      var currentResult = this.currentObservable.query.getCurrentResult();\n      var loading = currentResult.loading,\n        partial = currentResult.partial,\n        networkStatus = currentResult.networkStatus,\n        errors = currentResult.errors;\n      var error = currentResult.error,\n        data = currentResult.data;\n      if (errors && errors.length > 0) {\n        error = new ApolloError({\n          graphQLErrors: errors\n        });\n      }\n      result = __assign(__assign({}, result), {\n        loading: loading,\n        networkStatus: networkStatus,\n        error: error,\n        called: true\n      });\n      if (loading) {\n        var previousData = this.previousData.result && this.previousData.result.data;\n        result.data = previousData && data ? __assign(__assign({}, previousData), data) : previousData || data;\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.query.getLastResult() || {}).data\n        });\n      } else {\n        var fetchPolicy = this.currentObservable.query.options.fetchPolicy;\n        var partialRefetch = options.partialRefetch;\n        if (partialRefetch && !data && partial && fetchPolicy !== 'cache-only') {\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading\n          });\n          result.refetch();\n          return result;\n        }\n        result.data = data;\n      }\n    }\n    result.client = this.client;\n    this.previousData.loading = this.previousData.result && this.previousData.result.loading || false;\n    this.previousData.result = result;\n    this.currentObservable.query && this.currentObservable.query.resetQueryStoreErrors();\n    return result;\n  };\n  QueryData.prototype.handleErrorOrCompleted = function () {\n    var obsQuery = this.currentObservable.query;\n    if (!obsQuery || !this.previousData.result) return;\n    var _a = this.previousData.result,\n      data = _a.data,\n      loading = _a.loading,\n      error = _a.error;\n    if (!loading) {\n      var _b = this.getOptions(),\n        query = _b.query,\n        variables = _b.variables,\n        onCompleted = _b.onCompleted,\n        onError = _b.onError;\n      if (this.previousOptions && !this.previousData.loading && equal(this.previousOptions.query, query) && equal(this.previousOptions.variables, variables)) {\n        return;\n      }\n      if (onCompleted && !error) {\n        onCompleted(data);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  };\n  QueryData.prototype.removeQuerySubscription = function () {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  };\n  QueryData.prototype.observableQueryFields = function () {\n    var observable = this.currentObservable.query;\n    return {\n      variables: observable.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore\n    };\n  };\n  return QueryData;\n}(OperationData);\nfunction useDeepMemo(memoFn, key) {\n  var ref = useRef();\n  if (!ref.current || !equal(key, ref.current.key)) {\n    ref.current = {\n      key: key,\n      value: memoFn()\n    };\n  }\n  return ref.current.value;\n}\nfunction useBaseQuery(query, options, lazy) {\n  if (lazy === void 0) {\n    lazy = false;\n  }\n  var context = useContext(getApolloContext());\n  var _a = useReducer(function (x) {\n      return x + 1;\n    }, 0),\n    tick = _a[0],\n    forceUpdate = _a[1];\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    query: query\n  }) : {\n    query: query\n  };\n  var queryDataRef = useRef();\n  var queryData = queryDataRef.current || new QueryData({\n    options: updatedOptions,\n    context: context,\n    onNewData: function () {\n      if (!queryData.ssrInitiated()) {\n        Promise.resolve().then(forceUpdate);\n      } else {\n        forceUpdate();\n      }\n    }\n  });\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n  if (queryData.ssrInitiated() && !queryDataRef.current) {\n    queryDataRef.current = queryData;\n  }\n  var memo = {\n    options: __assign(__assign({}, updatedOptions), {\n      onError: undefined,\n      onCompleted: undefined\n    }),\n    context: context,\n    tick: tick\n  };\n  var result = useDeepMemo(function () {\n    return lazy ? queryData.executeLazy() : queryData.execute();\n  }, memo);\n  var queryResult = lazy ? result[1] : result;\n  useEffect(function () {\n    if (!queryDataRef.current) {\n      queryDataRef.current = queryData;\n    }\n    return function () {\n      return queryData.cleanup();\n    };\n  }, []);\n  useEffect(function () {\n    return queryData.afterExecute({\n      lazy: lazy\n    });\n  }, [queryResult.loading, queryResult.networkStatus, queryResult.error, queryResult.data]);\n  return result;\n}\nfunction useQuery(query, options) {\n  return useBaseQuery(query, options, false);\n}\nfunction useLazyQuery(query, options) {\n  return useBaseQuery(query, options, true);\n}\nvar MutationData = function (_super) {\n  __extends(MutationData, _super);\n  function MutationData(_a) {\n    var options = _a.options,\n      context = _a.context,\n      result = _a.result,\n      setResult = _a.setResult;\n    var _this = _super.call(this, options, context) || this;\n    _this.runMutation = function (mutationFunctionOptions) {\n      if (mutationFunctionOptions === void 0) {\n        mutationFunctionOptions = {};\n      }\n      _this.onMutationStart();\n      var mutationId = _this.generateNewMutationId();\n      return _this.mutate(mutationFunctionOptions).then(function (response) {\n        _this.onMutationCompleted(response, mutationId);\n        return response;\n      }).catch(function (error) {\n        _this.onMutationError(error, mutationId);\n        if (!_this.getOptions().onError) throw error;\n      });\n    };\n    _this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n    _this.result = result;\n    _this.setResult = setResult;\n    _this.mostRecentMutationId = 0;\n    return _this;\n  }\n  MutationData.prototype.execute = function (result) {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    result.client = this.refreshClient().client;\n    return [this.runMutation, result];\n  };\n  MutationData.prototype.afterExecute = function () {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  };\n  MutationData.prototype.cleanup = function () {};\n  MutationData.prototype.mutate = function (mutationFunctionOptions) {\n    var _a = this.getOptions(),\n      mutation = _a.mutation,\n      variables = _a.variables,\n      optimisticResponse = _a.optimisticResponse,\n      update = _a.update,\n      _b = _a.context,\n      mutationContext = _b === void 0 ? {} : _b,\n      _c = _a.awaitRefetchQueries,\n      awaitRefetchQueries = _c === void 0 ? false : _c,\n      fetchPolicy = _a.fetchPolicy;\n    var mutateOptions = __assign({}, mutationFunctionOptions);\n    var mutateVariables = Object.assign({}, variables, mutateOptions.variables);\n    delete mutateOptions.variables;\n    return this.refreshClient().client.mutate(__assign({\n      mutation: mutation,\n      optimisticResponse: optimisticResponse,\n      refetchQueries: mutateOptions.refetchQueries || this.getOptions().refetchQueries,\n      awaitRefetchQueries: awaitRefetchQueries,\n      update: update,\n      context: mutationContext,\n      fetchPolicy: fetchPolicy,\n      variables: mutateVariables\n    }, mutateOptions));\n  };\n  MutationData.prototype.onMutationStart = function () {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  };\n  MutationData.prototype.onMutationCompleted = function (response, mutationId) {\n    var _a = this.getOptions(),\n      onCompleted = _a.onCompleted,\n      ignoreResults = _a.ignoreResults;\n    var data = response.data,\n      errors = response.errors;\n    var error = errors && errors.length > 0 ? new ApolloError({\n      graphQLErrors: errors\n    }) : undefined;\n    var callOncomplete = function () {\n      return onCompleted ? onCompleted(data) : null;\n    };\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data: data,\n        error: error\n      });\n    }\n    callOncomplete();\n  };\n  MutationData.prototype.onMutationError = function (error, mutationId) {\n    var onError = this.getOptions().onError;\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error: error,\n        data: undefined,\n        called: true\n      });\n    }\n    if (onError) {\n      onError(error);\n    }\n  };\n  MutationData.prototype.generateNewMutationId = function () {\n    return ++this.mostRecentMutationId;\n  };\n  MutationData.prototype.isMostRecentMutation = function (mutationId) {\n    return this.mostRecentMutationId === mutationId;\n  };\n  MutationData.prototype.updateResult = function (result) {\n    if (this.isMounted && (!this.previousResult || !equal(this.previousResult, result))) {\n      this.setResult(result);\n      this.previousResult = result;\n    }\n  };\n  return MutationData;\n}(OperationData);\nfunction useMutation(mutation, options) {\n  var context = useContext(getApolloContext());\n  var _a = useState({\n      called: false,\n      loading: false\n    }),\n    result = _a[0],\n    setResult = _a[1];\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    mutation: mutation\n  }) : {\n    mutation: mutation\n  };\n  var mutationDataRef = useRef();\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData({\n        options: updatedOptions,\n        context: context,\n        result: result,\n        setResult: setResult\n      });\n    }\n    return mutationDataRef.current;\n  }\n  var mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n  useEffect(function () {\n    return mutationData.afterExecute();\n  });\n  return mutationData.execute(result);\n}\nvar SubscriptionData = function (_super) {\n  __extends(SubscriptionData, _super);\n  function SubscriptionData(_a) {\n    var options = _a.options,\n      context = _a.context,\n      setResult = _a.setResult;\n    var _this = _super.call(this, options, context) || this;\n    _this.currentObservable = {};\n    _this.setResult = setResult;\n    _this.initialize(options);\n    return _this;\n  }\n  SubscriptionData.prototype.execute = function (result) {\n    if (this.getOptions().skip === true) {\n      this.cleanup();\n      return {\n        loading: false,\n        error: undefined,\n        data: undefined,\n        variables: this.getOptions().variables\n      };\n    }\n    var currentResult = result;\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n    var shouldResubscribe = this.getOptions().shouldResubscribe;\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n    if (shouldResubscribe !== false && this.previousOptions && Object.keys(this.previousOptions).length > 0 && (this.previousOptions.subscription !== this.getOptions().subscription || !equal(this.previousOptions.variables, this.getOptions().variables) || this.previousOptions.skip !== this.getOptions().skip)) {\n      this.cleanup();\n      currentResult = this.getLoadingResult();\n    }\n    this.initialize(this.getOptions());\n    this.startSubscription();\n    this.previousOptions = this.getOptions();\n    return __assign(__assign({}, currentResult), {\n      variables: this.getOptions().variables\n    });\n  };\n  SubscriptionData.prototype.afterExecute = function () {\n    this.isMounted = true;\n  };\n  SubscriptionData.prototype.cleanup = function () {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  };\n  SubscriptionData.prototype.initialize = function (options) {\n    if (this.currentObservable.query || this.getOptions().skip === true) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy\n    });\n  };\n  SubscriptionData.prototype.startSubscription = function () {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query.subscribe({\n      next: this.updateCurrentData.bind(this),\n      error: this.updateError.bind(this),\n      complete: this.completeSubscription.bind(this)\n    });\n  };\n  SubscriptionData.prototype.getLoadingResult = function () {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    };\n  };\n  SubscriptionData.prototype.updateResult = function (result) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  };\n  SubscriptionData.prototype.updateCurrentData = function (result) {\n    var onSubscriptionData = this.getOptions().onSubscriptionData;\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  };\n  SubscriptionData.prototype.updateError = function (error) {\n    this.updateResult({\n      error: error,\n      loading: false\n    });\n  };\n  SubscriptionData.prototype.completeSubscription = function () {\n    var onSubscriptionComplete = this.getOptions().onSubscriptionComplete;\n    if (onSubscriptionComplete) onSubscriptionComplete();\n    this.endSubscription();\n  };\n  SubscriptionData.prototype.endSubscription = function () {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  };\n  return SubscriptionData;\n}(OperationData);\nfunction useSubscription(subscription, options) {\n  var context = useContext(getApolloContext());\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    subscription: subscription\n  }) : {\n    subscription: subscription\n  };\n  var _a = useState({\n      loading: !updatedOptions.skip,\n      error: undefined,\n      data: undefined\n    }),\n    result = _a[0],\n    setResult = _a[1];\n  var subscriptionDataRef = useRef();\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData({\n        options: updatedOptions,\n        context: context,\n        setResult: setResult\n      });\n    }\n    return subscriptionDataRef.current;\n  }\n  var subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions, true);\n  subscriptionData.context = context;\n  useEffect(function () {\n    return subscriptionData.afterExecute();\n  });\n  useEffect(function () {\n    return subscriptionData.cleanup.bind(subscriptionData);\n  }, []);\n  return subscriptionData.execute(result);\n}\nfunction useApolloClient() {\n  var client = React.useContext(getApolloContext()).client;\n  process.env.NODE_ENV === \"production\" ? invariant(client, 1) : invariant(client, 'No Apollo Client instance can be found. Please ensure that you ' + 'have called `ApolloProvider` higher up in your tree.');\n  return client;\n}\nfunction makeDefaultQueryInfo() {\n  return {\n    seen: false,\n    observable: null\n  };\n}\nvar RenderPromises = function () {\n  function RenderPromises() {\n    this.queryPromises = new Map();\n    this.queryInfoTrie = new Map();\n  }\n  RenderPromises.prototype.registerSSRObservable = function (observable, props) {\n    this.lookupQueryInfo(props).observable = observable;\n  };\n  RenderPromises.prototype.getSSRObservable = function (props) {\n    return this.lookupQueryInfo(props).observable;\n  };\n  RenderPromises.prototype.addQueryPromise = function (queryInstance, finish) {\n    var info = this.lookupQueryInfo(queryInstance.getOptions());\n    if (!info.seen) {\n      this.queryPromises.set(queryInstance.getOptions(), new Promise(function (resolve) {\n        resolve(queryInstance.fetchData());\n      }));\n      return null;\n    }\n    return finish();\n  };\n  RenderPromises.prototype.hasPromises = function () {\n    return this.queryPromises.size > 0;\n  };\n  RenderPromises.prototype.consumeAndAwaitPromises = function () {\n    var _this = this;\n    var promises = [];\n    this.queryPromises.forEach(function (promise, queryInstance) {\n      _this.lookupQueryInfo(queryInstance).seen = true;\n      promises.push(promise);\n    });\n    this.queryPromises.clear();\n    return Promise.all(promises);\n  };\n  RenderPromises.prototype.lookupQueryInfo = function (props) {\n    var queryInfoTrie = this.queryInfoTrie;\n    var query = props.query,\n      variables = props.variables;\n    var varMap = queryInfoTrie.get(query) || new Map();\n    if (!queryInfoTrie.has(query)) queryInfoTrie.set(query, varMap);\n    var variablesString = JSON.stringify(variables);\n    var info = varMap.get(variablesString) || makeDefaultQueryInfo();\n    if (!varMap.has(variablesString)) varMap.set(variablesString, info);\n    return info;\n  };\n  return RenderPromises;\n}();\nexport { RenderPromises, useApolloClient, useLazyQuery, useMutation, useQuery, useSubscription };","map":{"version":3,"names":["OperationData","options","context","isMounted","previousOptions","prototype","getOptions","setOptions","newOptions","storePrevious","equal","unmount","refreshClient","client","process","env","NODE_ENV","invariant","isNew","cleanup","verifyDocumentType","document","type","operation","parser","requiredOperationName","operationName","usedOperationName","QueryData","_super","__extends","_a","onNewData","_this","call","previousData","currentObservable","runLazy","runLazyQuery","lazyOptions","getExecuteResult","result","getQueryResult","startQuerySubscription","obsRefetch","variables","query","refetch","obsFetchMore","fetchMoreOptions","fetchMore","obsUpdateQuery","mapFn","updateQuery","obsStartPolling","pollInterval","startPolling","obsStopPolling","stopPolling","obsSubscribeToMore","subscribeToMore","execute","skip","removeQuerySubscription","updateObservableQuery","getExecuteSsrResult","executeLazy","loading","networkStatus","NetworkStatus","ready","called","data","undefined","fetchData","ssr","obs","currentResult","getCurrentResult","afterExecute","_b","lazy","handleErrorOrCompleted","bind","__assign","ssrInitiated","renderPromises","ssrDisabled","fetchDisabled","disableNetworkFetches","ssrLoading","stale","observableQueryFields","addQueryPromise","prepareObservableQueryOptions","DocumentType","Query","displayName","fetchPolicy","metadata","reactComponent","initializeObservableQuery","getSSRObservable","observableQueryOptions","children","watchQuery","registerSSRObservable","newObservableQueryOptions","catch","subscription","obsQuery","subscribe","next","previousResult","error","resubscribeToQuery","hasOwnProperty","lastError","getLastError","lastResult","getLastResult","resetLastResults","Object","assign","partial","errors","length","ApolloError","graphQLErrors","partialRefetch","resetQueryStoreErrors","onCompleted","onError","unsubscribe","observable","useDeepMemo","memoFn","key","ref","useRef","current","value","useBaseQuery","useContext","getApolloContext","useReducer","x","tick","forceUpdate","updatedOptions","queryDataRef","queryData","Promise","resolve","then","memo","queryResult","useEffect","useQuery","useLazyQuery","MutationData","setResult","runMutation","mutationFunctionOptions","onMutationStart","mutationId","generateNewMutationId","mutate","response","onMutationCompleted","onMutationError","mutation","Mutation","mostRecentMutationId","optimisticResponse","update","mutationContext","_c","awaitRefetchQueries","mutateOptions","mutateVariables","refetchQueries","ignoreResults","updateResult","callOncomplete","isMostRecentMutation","useMutation","useState","mutationDataRef","getMutationDataRef","mutationData","SubscriptionData","initialize","getLoadingResult","shouldResubscribe","keys","startSubscription","endSubscription","updateCurrentData","updateError","complete","completeSubscription","onSubscriptionData","subscriptionData","onSubscriptionComplete","useSubscription","subscriptionDataRef","getSubscriptionDataRef","useApolloClient","React","makeDefaultQueryInfo","seen","RenderPromises","queryPromises","Map","queryInfoTrie","props","lookupQueryInfo","queryInstance","finish","info","set","hasPromises","size","consumeAndAwaitPromises","promises","forEach","promise","push","clear","all","varMap","get","has","variablesString","JSON","stringify"],"sources":["C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\@apollo\\react-hooks\\src\\data\\OperationData.ts","C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\@apollo\\react-hooks\\src\\data\\QueryData.ts","C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\@apollo\\react-hooks\\src\\utils\\useDeepMemo.ts","C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\@apollo\\react-hooks\\src\\utils\\useBaseQuery.ts","C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\@apollo\\react-hooks\\src\\useQuery.ts","C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\@apollo\\react-hooks\\src\\useLazyQuery.ts","C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\@apollo\\react-hooks\\src\\data\\MutationData.ts","C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\@apollo\\react-hooks\\src\\useMutation.ts","C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\@apollo\\react-hooks\\src\\data\\SubscriptionData.ts","C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\@apollo\\react-hooks\\src\\useSubscription.ts","C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\@apollo\\react-hooks\\src\\useApolloClient.ts","C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\@apollo\\react-hooks\\src\\ssr\\RenderPromises.ts"],"sourcesContent":["import { ApolloClient } from 'apollo-client';\nimport { equal as isEqual } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\nimport {\n  ApolloContextValue,\n  parser,\n  DocumentType,\n  operationName\n} from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { CommonOptions } from '../types';\n\nexport abstract class OperationData<TOptions = any> {\n  public isMounted: boolean = false;\n  public previousOptions: CommonOptions<TOptions> = {} as CommonOptions<\n    TOptions\n  >;\n  public context: ApolloContextValue = {};\n  public client: ApolloClient<object> | undefined;\n\n  private options: CommonOptions<TOptions> = {} as CommonOptions<TOptions>;\n\n  constructor(options?: CommonOptions<TOptions>, context?: ApolloContextValue) {\n    this.options = options || ({} as CommonOptions<TOptions>);\n    this.context = context || {};\n  }\n\n  public getOptions(): CommonOptions<TOptions> {\n    return this.options;\n  }\n\n  public setOptions(\n    newOptions: CommonOptions<TOptions>,\n    storePrevious: boolean = false\n  ) {\n    if (storePrevious && !isEqual(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n    this.options = newOptions;\n  }\n\n  public abstract execute(...args: any): any;\n  public abstract afterExecute(...args: any): void | (() => void);\n  public abstract cleanup(): void;\n\n  protected unmount() {\n    this.isMounted = false;\n  }\n\n  protected refreshClient() {\n    const client =\n      (this.options && this.options.client) ||\n      (this.context && this.context.client);\n\n    invariant(\n      !!client,\n      'Could not find \"client\" in the context or passed in as an option. ' +\n        'Wrap the root component in an <ApolloProvider>, or pass an ' +\n        'ApolloClient instance in via options.'\n    );\n\n    let isNew = false;\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n    return {\n      client: this.client as ApolloClient<object>,\n      isNew\n    };\n  }\n\n  protected verifyDocumentType(document: DocumentNode, type: DocumentType) {\n    const operation = parser(document);\n    const requiredOperationName = operationName(type);\n    const usedOperationName = operationName(operation.type);\n    invariant(\n      operation.type === type,\n      `Running a ${requiredOperationName} requires a graphql ` +\n        `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n    );\n  }\n}\n","import {\n  ApolloQueryResult,\n  ApolloError,\n  NetworkStatus,\n  FetchMoreOptions,\n  FetchMoreQueryOptions,\n  UpdateQueryOptions,\n  SubscribeToMoreOptions,\n} from 'apollo-client';\nimport { equal as isEqual } from '@wry/equality';\nimport {\n  ApolloContextValue,\n  DocumentType,\n  QueryResult,\n  ObservableQueryFields,\n} from '@apollo/react-common';\n\nimport {\n  QueryPreviousData,\n  QueryOptions,\n  QueryCurrentObservable,\n  QueryTuple,\n  QueryLazyOptions,\n} from '../types';\nimport { OperationData } from './OperationData';\n\nexport class QueryData<TData, TVariables> extends OperationData {\n  public onNewData: () => void;\n\n  private previousData: QueryPreviousData<TData, TVariables> = {};\n  private currentObservable: QueryCurrentObservable<TData, TVariables> = {};\n  private runLazy: boolean = false;\n  private lazyOptions?: QueryLazyOptions<TVariables>;\n\n  constructor({\n    options,\n    context,\n    onNewData,\n  }: {\n    options: QueryOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    onNewData: () => void;\n  }) {\n    super(options, context);\n    this.onNewData = onNewData;\n  }\n\n  public execute(): QueryResult<TData, TVariables> {\n    this.refreshClient();\n\n    const { skip, query } = this.getOptions();\n    if (skip || query !== this.previousData.query) {\n      this.removeQuerySubscription();\n      this.previousData.query = query;\n    }\n\n    this.updateObservableQuery();\n\n    if (this.isMounted) this.startQuerySubscription();\n\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  }\n\n  public executeLazy(): QueryTuple<TData, TVariables> {\n    return !this.runLazy\n      ? [\n          this.runLazyQuery,\n          {\n            loading: false,\n            networkStatus: NetworkStatus.ready,\n            called: false,\n            data: undefined,\n          } as QueryResult<TData, TVariables>,\n        ]\n      : [this.runLazyQuery, this.execute()];\n  }\n\n  // For server-side rendering\n  public fetchData(): Promise<ApolloQueryResult<any>> | boolean {\n    const options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n\n    // currentObservable.query is already assigned the registered SSR observable in initializeObservableQuery.\n    const obs = this.currentObservable.query!;\n    const currentResult = obs.getCurrentResult();\n    return currentResult.loading ? obs.result() : false;\n  }\n\n  public afterExecute({ lazy = false }: { lazy?: boolean } = {}) {\n    this.isMounted = true;\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n\n    this.previousOptions = this.getOptions();\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    this.removeQuerySubscription();\n    delete this.currentObservable.query;\n    delete this.previousData.result;\n  }\n\n  public getOptions() {\n    const options = super.getOptions();\n\n    if (this.lazyOptions) {\n      options.variables = {\n        ...options.variables,\n        ...this.lazyOptions.variables,\n      };\n      options.context = {\n        ...options.context,\n        ...this.lazyOptions.context,\n      };\n    }\n\n    // skip is not supported when using lazy query execution.\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  }\n\n  public ssrInitiated() {\n    return this.context && this.context.renderPromises;\n  }\n\n  private runLazyQuery = (options?: QueryLazyOptions<TVariables>) => {\n    this.cleanup();\n    this.runLazy = true;\n    this.lazyOptions = options;\n    this.onNewData();\n  };\n\n  private getExecuteResult = (): QueryResult<TData, TVariables> => {\n    const result = this.getQueryResult();\n    this.startQuerySubscription();\n    return result;\n  };\n\n  private getExecuteSsrResult() {\n    const ssrDisabled = this.getOptions().ssr === false;\n    const fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n\n    const ssrLoading = {\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client,\n      ...this.observableQueryFields(),\n    } as QueryResult<TData, TVariables>;\n\n    // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previousData.result = ssrLoading;\n      return ssrLoading;\n    }\n\n    let result;\n    if (this.ssrInitiated()) {\n      result =\n        this.context.renderPromises!.addQueryPromise(\n          this,\n          this.getExecuteResult\n        ) || ssrLoading;\n    }\n\n    return result;\n  }\n\n  private prepareObservableQueryOptions() {\n    const options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    const displayName = options.displayName || 'Query';\n\n    // Set the fetchPolicy to cache-first for network-only and cache-and-network\n    // fetches for server side renders.\n    if (\n      this.ssrInitiated() &&\n      (options.fetchPolicy === 'network-only' ||\n        options.fetchPolicy === 'cache-and-network')\n    ) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return {\n      ...options,\n      displayName,\n      context: options.context,\n      metadata: { reactComponent: { displayName } },\n    };\n  }\n\n  private initializeObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    if (this.ssrInitiated()) {\n      this.currentObservable.query = this.context!.renderPromises!.getSSRObservable(\n        this.getOptions()\n      );\n    }\n\n    if (!this.currentObservable.query) {\n      const observableQueryOptions = this.prepareObservableQueryOptions();\n\n      this.previousData.observableQueryOptions = {\n        ...observableQueryOptions,\n        children: null,\n      };\n      this.currentObservable.query = this.refreshClient().client.watchQuery({\n        ...observableQueryOptions,\n      });\n\n      if (this.ssrInitiated()) {\n        this.context?.renderPromises?.registerSSRObservable(\n          this.currentObservable.query,\n          observableQueryOptions\n        );\n      }\n    }\n  }\n\n  private updateObservableQuery() {\n    // If we skipped initially, we may not have yet created the observable\n    if (!this.currentObservable.query) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    const newObservableQueryOptions = {\n      ...this.prepareObservableQueryOptions(),\n      children: null,\n    };\n\n    if (\n      !isEqual(\n        newObservableQueryOptions,\n        this.previousData.observableQueryOptions\n      )\n    ) {\n      this.previousData.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable\n        .query!.setOptions(newObservableQueryOptions)\n        // The error will be passed to the child container, so we don't\n        // need to log it here. We could conceivably log something if\n        // an option was set. OTOH we don't log errors w/ the original\n        // query. See https://github.com/apollostack/react-apollo/issues/404\n        .catch(() => {});\n    }\n  }\n\n  private startQuerySubscription() {\n    if (this.currentObservable.subscription || this.getOptions().skip) return;\n\n    const obsQuery = this.currentObservable.query!;\n    this.currentObservable.subscription = obsQuery.subscribe({\n      next: ({ loading, networkStatus, data }) => {\n        const previousResult = this.previousData.result;\n\n        // Make sure we're not attempting to re-render similar results\n        if (\n          previousResult &&\n          previousResult.loading === loading &&\n          previousResult.networkStatus === networkStatus &&\n          isEqual(previousResult.data, data)\n        ) {\n          return;\n        }\n\n        this.onNewData();\n      },\n      error: (error) => {\n        this.resubscribeToQuery();\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n\n        const previousResult = this.previousData.result;\n        if (\n          (previousResult && previousResult.loading) ||\n          !isEqual(error, this.previousData.error)\n        ) {\n          this.previousData.error = error;\n          this.onNewData();\n        }\n      },\n    });\n  }\n\n  private resubscribeToQuery() {\n    this.removeQuerySubscription();\n\n    // Unfortunately, if `lastError` is set in the current\n    // `observableQuery` when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore it afterwards (so the subscription\n    // has a chance to stay open).\n    const lastError = this.currentObservable.query!.getLastError();\n    const lastResult = this.currentObservable.query!.getLastResult();\n    this.currentObservable.query!.resetLastResults();\n    this.startQuerySubscription();\n    Object.assign(this.currentObservable.query!, {\n      lastError,\n      lastResult,\n    });\n  }\n\n  private getQueryResult(): QueryResult<TData, TVariables> {\n    let result: any = this.observableQueryFields();\n    const options = this.getOptions();\n\n    // When skipping a query (ie. we're not querying for data but still want\n    // to render children), make sure the `data` is cleared out and\n    // `loading` is set to `false` (since we aren't loading anything).\n    if (options.skip) {\n      result = {\n        ...result,\n        data: undefined,\n        error: undefined,\n        loading: false,\n        called: true,\n      };\n    } else {\n      // Fetch the current result (if any) from the store.\n      const currentResult = this.currentObservable.query!.getCurrentResult();\n      const { loading, partial, networkStatus, errors } = currentResult;\n      let { error, data } = currentResult;\n\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      if (errors && errors.length > 0) {\n        error = new ApolloError({ graphQLErrors: errors });\n      }\n\n      result = {\n        ...result,\n        loading,\n        networkStatus,\n        error,\n        called: true,\n      };\n\n      if (loading) {\n        const previousData =\n          this.previousData.result && this.previousData.result.data;\n        result.data =\n          previousData && data\n            ? {\n                ...previousData,\n                ...data,\n              }\n            : previousData || data;\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.query!.getLastResult() || ({} as any))\n            .data,\n        });\n      } else {\n        const { fetchPolicy } = this.currentObservable.query!.options;\n        const { partialRefetch } = options;\n        if (\n          partialRefetch &&\n          !data &&\n          partial &&\n          fetchPolicy !== 'cache-only'\n        ) {\n          // When a `Query` component is mounted, and a mutation is executed\n          // that returns the same ID as the mounted `Query`, but has less\n          // fields in its result, Apollo Client's `QueryManager` returns the\n          // data as `undefined` since a hit can't be found in the cache.\n          // This can lead to application errors when the UI elements rendered by\n          // the original `Query` component are expecting certain data values to\n          // exist, and they're all of a sudden stripped away. To help avoid\n          // this we'll attempt to refetch the `Query` data.\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading,\n          });\n          result.refetch();\n          return result;\n        }\n\n        result.data = data;\n      }\n    }\n\n    result.client = this.client;\n    this.previousData.loading =\n      (this.previousData.result && this.previousData.result.loading) || false;\n    this.previousData.result = result;\n\n    // Any query errors that exist are now available in `result`, so we'll\n    // remove the original errors from the `ObservableQuery` query store to\n    // make sure they aren't re-displayed on subsequent (potentially error\n    // free) requests/responses.\n    this.currentObservable.query &&\n      this.currentObservable.query.resetQueryStoreErrors();\n\n    return result;\n  }\n\n  private handleErrorOrCompleted() {\n    const obsQuery = this.currentObservable.query;\n    if (!obsQuery || !this.previousData.result) return;\n\n    const { data, loading, error } = this.previousData.result;\n\n    if (!loading) {\n      const { query, variables, onCompleted, onError } = this.getOptions();\n\n      // No changes, so we won't call onError/onCompleted.\n      if (\n        this.previousOptions &&\n        !this.previousData.loading &&\n        isEqual(this.previousOptions.query, query) &&\n        isEqual(this.previousOptions.variables, variables)\n      ) {\n        return;\n      }\n\n      if (onCompleted && !error) {\n        onCompleted(data);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  }\n\n  private removeQuerySubscription() {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  }\n\n  private obsRefetch = (variables?: TVariables) =>\n    this.currentObservable.query!.refetch(variables);\n\n  private obsFetchMore = <K extends keyof TVariables>(\n    fetchMoreOptions: FetchMoreQueryOptions<TVariables, K> &\n      FetchMoreOptions<TData, TVariables>\n  ) => this.currentObservable.query!.fetchMore(fetchMoreOptions);\n\n  private obsUpdateQuery = <TVars = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: UpdateQueryOptions<TVars>\n    ) => TData\n  ) => this.currentObservable.query!.updateQuery(mapFn);\n\n  private obsStartPolling = (pollInterval: number) => {\n    this.currentObservable &&\n      this.currentObservable.query! &&\n      this.currentObservable.query!.startPolling(pollInterval);\n  };\n\n  private obsStopPolling = () => {\n    this.currentObservable &&\n      this.currentObservable.query! &&\n      this.currentObservable.query!.stopPolling();\n  };\n\n  private obsSubscribeToMore = <\n    TSubscriptionData = TData,\n    TSubscriptionVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >\n  ) => this.currentObservable.query!.subscribeToMore(options);\n\n  private observableQueryFields() {\n    const observable = this.currentObservable.query!;\n    return {\n      variables: observable.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore,\n    } as ObservableQueryFields<TData, TVariables>;\n  }\n}\n","import { useRef } from 'react';\nimport { equal as isEqual } from '@wry/equality';\n\n/**\n * Memoize a result using deep equality. This hook has two advantages over\n * React.useMemo: it uses deep equality to compare memo keys, and it guarantees\n * that the memo function will only be called if the keys are unequal.\n * React.useMemo cannot be relied on to do this, since it is only a performance\n * optimization (see https://reactjs.org/docs/hooks-reference.html#usememo).\n */\nexport function useDeepMemo<TKey, TValue>(\n  memoFn: () => TValue,\n  key: TKey\n): TValue {\n  const ref = useRef<{ key: TKey; value: TValue }>();\n\n  if (!ref.current || !isEqual(key, ref.current.key)) {\n    ref.current = { key, value: memoFn() };\n  }\n\n  return ref.current.value;\n}\n","import { useContext, useEffect, useReducer, useRef } from 'react';\nimport {\n  getApolloContext,\n  OperationVariables,\n  QueryResult,\n} from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { QueryHookOptions, QueryOptions, QueryTuple } from '../types';\nimport { QueryData } from '../data/QueryData';\nimport { useDeepMemo } from './useDeepMemo';\n\nexport function useBaseQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode,\n  options?: QueryHookOptions<TData, TVariables>,\n  lazy = false\n) {\n  const context = useContext(getApolloContext());\n  const [tick, forceUpdate] = useReducer((x) => x + 1, 0);\n  const updatedOptions = options ? { ...options, query } : { query };\n\n  const queryDataRef = useRef<QueryData<TData, TVariables>>();\n  const queryData =\n    queryDataRef.current ||\n    new QueryData<TData, TVariables>({\n      options: updatedOptions as QueryOptions<TData, TVariables>,\n      context,\n      onNewData() {\n        if (!queryData.ssrInitiated()) {\n          // When new data is received from the `QueryData` object, we want to\n          // force a re-render to make sure the new data is displayed. We can't\n          // force that re-render if we're already rendering however so to be\n          // safe we'll trigger the re-render in a microtask.\n          Promise.resolve().then(forceUpdate);\n        } else {\n          // If we're rendering on the server side we can force an update at\n          // any point.\n          forceUpdate();\n        }\n      },\n    });\n\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n\n  // SSR won't trigger the effect hook below that stores the current\n  // `QueryData` instance for future renders, so we'll handle that here if\n  // the current render is happening server side.\n  if (queryData.ssrInitiated() && !queryDataRef.current) {\n    queryDataRef.current = queryData;\n  }\n\n  // `onError` and `onCompleted` callback functions will not always have a\n  // stable identity, so we'll exclude them from the memoization key to\n  // prevent `afterExecute` from being triggered un-necessarily.\n  const memo = {\n    options: { ...updatedOptions, onError: undefined, onCompleted: undefined },\n    context,\n    tick,\n  };\n\n  const result = useDeepMemo(\n    () => (lazy ? queryData.executeLazy() : queryData.execute()),\n    memo\n  );\n\n  const queryResult = lazy\n    ? (result as QueryTuple<TData, TVariables>)[1]\n    : (result as QueryResult<TData, TVariables>);\n\n  useEffect(() => {\n    // We only need one instance of the `QueryData` class, so we'll store it\n    // as a ref to make it available on subsequent renders.\n    if (!queryDataRef.current) {\n      queryDataRef.current = queryData;\n    }\n\n    return () => queryData.cleanup();\n  }, []);\n\n  useEffect(() => queryData.afterExecute({ lazy }), [\n    queryResult.loading,\n    queryResult.networkStatus,\n    queryResult.error,\n    queryResult.data,\n  ]);\n\n  return result;\n}\n","import { OperationVariables, QueryResult } from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { QueryHookOptions } from './types';\nimport { useBaseQuery } from './utils/useBaseQuery';\n\nexport function useQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode,\n  options?: QueryHookOptions<TData, TVariables>\n) {\n  return useBaseQuery<TData, TVariables>(query, options, false) as QueryResult<\n    TData,\n    TVariables\n  >;\n}\n","import { OperationVariables } from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { LazyQueryHookOptions, QueryTuple } from './types';\nimport { useBaseQuery } from './utils/useBaseQuery';\n\nexport function useLazyQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode,\n  options?: LazyQueryHookOptions<TData, TVariables>\n) {\n  return useBaseQuery<TData, TVariables>(query, options, true) as QueryTuple<\n    TData,\n    TVariables\n  >;\n}\n","import { ApolloError } from 'apollo-client';\nimport { equal as isEqual } from '@wry/equality';\nimport {\n  ApolloContextValue,\n  DocumentType,\n  OperationVariables,\n  ExecutionResult,\n  MutationFunctionOptions,\n  MutationResult\n} from '@apollo/react-common';\n\nimport { MutationOptions, MutationTuple } from '../types';\nimport { OperationData } from './OperationData';\n\nexport class MutationData<\n  TData = any,\n  TVariables = OperationVariables\n> extends OperationData {\n  private mostRecentMutationId: number;\n  private result: MutationResult<TData>;\n  private previousResult?: MutationResult<TData>;\n  private setResult: (result: MutationResult<TData>) => any;\n\n  constructor({\n    options,\n    context,\n    result,\n    setResult\n  }: {\n    options: MutationOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    result: MutationResult<TData>;\n    setResult: (result: MutationResult<TData>) => any;\n  }) {\n    super(options, context);\n    this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n    this.result = result;\n    this.setResult = setResult;\n    this.mostRecentMutationId = 0;\n  }\n\n  public execute(result: MutationResult<TData>) {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    result.client = this.refreshClient().client;\n    return [this.runMutation, result] as MutationTuple<TData, TVariables>;\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    // No cleanup required.\n  }\n\n  private runMutation = (\n    mutationFunctionOptions: MutationFunctionOptions<\n      TData,\n      TVariables\n    > = {} as MutationFunctionOptions<TData, TVariables>\n  ) => {\n    this.onMutationStart();\n    const mutationId = this.generateNewMutationId();\n\n    return this.mutate(mutationFunctionOptions)\n      .then((response: ExecutionResult<TData>) => {\n        this.onMutationCompleted(response, mutationId);\n        return response;\n      })\n      .catch((error: ApolloError) => {\n        this.onMutationError(error, mutationId);\n        if (!this.getOptions().onError) throw error;\n      });\n  };\n\n  private mutate(\n    mutationFunctionOptions: MutationFunctionOptions<TData, TVariables>\n  ) {\n    const {\n      mutation,\n      variables,\n      optimisticResponse,\n      update,\n      context: mutationContext = {},\n      awaitRefetchQueries = false,\n      fetchPolicy\n    } = this.getOptions();\n    const mutateOptions = { ...mutationFunctionOptions };\n\n    const mutateVariables = Object.assign(\n      {},\n      variables,\n      mutateOptions.variables\n    );\n    delete mutateOptions.variables;\n\n    return this.refreshClient().client.mutate({\n      mutation,\n      optimisticResponse,\n      refetchQueries:\n        mutateOptions.refetchQueries || this.getOptions().refetchQueries,\n      awaitRefetchQueries,\n      update,\n      context: mutationContext,\n      fetchPolicy,\n      variables: mutateVariables,\n      ...mutateOptions\n    });\n  }\n\n  private onMutationStart() {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  }\n\n  private onMutationCompleted(\n    response: ExecutionResult<TData>,\n    mutationId: number\n  ) {\n    const { onCompleted, ignoreResults } = this.getOptions();\n\n    const { data, errors } = response;\n    const error =\n      errors && errors.length > 0\n        ? new ApolloError({ graphQLErrors: errors })\n        : undefined;\n\n    const callOncomplete = () =>\n      onCompleted ? onCompleted(data as TData) : null;\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data,\n        error\n      });\n    }\n    callOncomplete();\n  }\n\n  private onMutationError(error: ApolloError, mutationId: number) {\n    const { onError } = this.getOptions();\n\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error,\n        data: undefined,\n        called: true\n      });\n    }\n\n    if (onError) {\n      onError(error);\n    }\n  }\n\n  private generateNewMutationId(): number {\n    return ++this.mostRecentMutationId;\n  }\n\n  private isMostRecentMutation(mutationId: number) {\n    return this.mostRecentMutationId === mutationId;\n  }\n\n  private updateResult(result: MutationResult<TData>) {\n    if (\n      this.isMounted &&\n      (!this.previousResult || !isEqual(this.previousResult, result))\n    ) {\n      this.setResult(result);\n      this.previousResult = result;\n    }\n  }\n}\n","import { useContext, useState, useRef, useEffect } from 'react';\nimport { getApolloContext, OperationVariables } from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { MutationHookOptions, MutationTuple } from './types';\nimport { MutationData } from './data/MutationData';\n\nexport function useMutation<TData = any, TVariables = OperationVariables>(\n  mutation: DocumentNode,\n  options?: MutationHookOptions<TData, TVariables>\n): MutationTuple<TData, TVariables> {\n  const context = useContext(getApolloContext());\n  const [result, setResult] = useState({ called: false, loading: false });\n  const updatedOptions = options ? { ...options, mutation } : { mutation };\n\n  const mutationDataRef = useRef<MutationData<TData, TVariables>>();\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData<TData, TVariables>({\n        options: updatedOptions,\n        context,\n        result,\n        setResult\n      });\n    }\n    return mutationDataRef.current;\n  }\n\n  const mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n\n  useEffect(() => mutationData.afterExecute());\n\n  return mutationData.execute(result);\n}\n","import { equal as isEqual } from '@wry/equality';\nimport { ApolloContextValue, SubscriptionResult } from '@apollo/react-common';\n\nimport { OperationData } from './OperationData';\nimport { SubscriptionCurrentObservable, SubscriptionOptions } from '../types';\n\nexport class SubscriptionData<\n  TData = any,\n  TVariables = any\n> extends OperationData<SubscriptionOptions<TData, TVariables>> {\n  private setResult: any;\n  private currentObservable: SubscriptionCurrentObservable = {};\n\n  constructor({\n    options,\n    context,\n    setResult\n  }: {\n    options: SubscriptionOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    setResult: any;\n  }) {\n    super(options, context);\n    this.setResult = setResult;\n    this.initialize(options);\n  }\n\n  public execute(result: SubscriptionResult<TData>) {\n    if (this.getOptions().skip === true) {\n      this.cleanup();\n      return {\n        loading: false,\n        error: undefined,\n        data: undefined,\n        variables: this.getOptions().variables\n      };\n    }\n\n    let currentResult = result;\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n\n    let { shouldResubscribe } = this.getOptions();\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n\n    if (\n      shouldResubscribe !== false &&\n      this.previousOptions &&\n      Object.keys(this.previousOptions).length > 0 &&\n      (this.previousOptions.subscription !== this.getOptions().subscription ||\n        !isEqual(this.previousOptions.variables, this.getOptions().variables) ||\n        this.previousOptions.skip !== this.getOptions().skip)\n    ) {\n      this.cleanup();\n      currentResult = this.getLoadingResult();\n    }\n\n    this.initialize(this.getOptions());\n    this.startSubscription();\n\n    this.previousOptions = this.getOptions();\n    return { ...currentResult, variables: this.getOptions().variables };\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n  }\n\n  public cleanup() {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  }\n\n  private initialize(options: SubscriptionOptions<TData, TVariables>) {\n    if (this.currentObservable.query || this.getOptions().skip === true) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy\n    });\n  }\n\n  private startSubscription() {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query!.subscribe(\n      {\n        next: this.updateCurrentData.bind(this),\n        error: this.updateError.bind(this),\n        complete: this.completeSubscription.bind(this)\n      }\n    );\n  }\n\n  private getLoadingResult() {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    };\n  }\n\n  private updateResult(result: SubscriptionResult) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  }\n\n  private updateCurrentData(result: SubscriptionResult<TData>) {\n    const { onSubscriptionData } = this.getOptions();\n\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  }\n\n  private updateError(error: any) {\n    this.updateResult({\n      error,\n      loading: false\n    });\n  }\n\n  private completeSubscription() {\n    const { onSubscriptionComplete } = this.getOptions();\n    if (onSubscriptionComplete) onSubscriptionComplete();\n    this.endSubscription();\n  }\n\n  private endSubscription() {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  }\n}\n","import { useContext, useState, useRef, useEffect } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { getApolloContext, OperationVariables } from '@apollo/react-common';\n\nimport { SubscriptionHookOptions } from './types';\nimport { SubscriptionData } from './data/SubscriptionData';\n\nexport function useSubscription<TData = any, TVariables = OperationVariables>(\n  subscription: DocumentNode,\n  options?: SubscriptionHookOptions<TData, TVariables>\n) {\n  const context = useContext(getApolloContext());\n  const updatedOptions = options\n    ? { ...options, subscription }\n    : { subscription };\n  const [result, setResult] = useState({\n    loading: !updatedOptions.skip,\n    error: undefined,\n    data: undefined\n  });\n\n  const subscriptionDataRef = useRef<SubscriptionData<TData, TVariables>>();\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData<TData, TVariables>({\n        options: updatedOptions,\n        context,\n        setResult\n      });\n    }\n    return subscriptionDataRef.current;\n  }\n\n  const subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions, true);\n  subscriptionData.context = context;\n\n  useEffect(() => subscriptionData.afterExecute());\n  useEffect(() => subscriptionData.cleanup.bind(subscriptionData), []);\n\n  return subscriptionData.execute(result);\n}\n","import React from 'react';\nimport { invariant } from 'ts-invariant';\nimport { getApolloContext } from '@apollo/react-common';\nimport ApolloClient from 'apollo-client';\n\nexport function useApolloClient(): ApolloClient<object> {\n  const { client } = React.useContext(getApolloContext());\n  invariant(\n    client,\n    'No Apollo Client instance can be found. Please ensure that you ' +\n      'have called `ApolloProvider` higher up in your tree.'\n  );\n  return client!;\n}\n","import { ObservableQuery } from 'apollo-client';\nimport { QueryOptions } from '../types';\nimport { DocumentNode } from 'graphql';\nimport { QueryData } from '../data/QueryData';\n\ntype QueryInfo = {\n  seen: boolean;\n  observable: ObservableQuery<any, any> | null;\n};\n\nfunction makeDefaultQueryInfo(): QueryInfo {\n  return {\n    seen: false,\n    observable: null\n  };\n}\n\nexport class RenderPromises {\n  // Map from Query component instances to pending fetchData promises.\n  private queryPromises = new Map<QueryOptions<any, any>, Promise<any>>();\n\n  // Two-layered map from (query document, stringified variables) to QueryInfo\n  // objects. These QueryInfo objects are intended to survive through the whole\n  // getMarkupFromTree process, whereas specific Query instances do not survive\n  // beyond a single call to renderToStaticMarkup.\n  private queryInfoTrie = new Map<DocumentNode, Map<string, QueryInfo>>();\n\n  // Registers the server side rendered observable.\n  public registerSSRObservable<TData, TVariables>(\n    observable: ObservableQuery<any, TVariables>,\n    props: QueryOptions<TData, TVariables>\n  ) {\n    this.lookupQueryInfo(props).observable = observable;\n  }\n\n  // Get's the cached observable that matches the SSR Query instances query and variables.\n  public getSSRObservable<TData, TVariables>(\n    props: QueryOptions<TData, TVariables>\n  ) {\n    return this.lookupQueryInfo(props).observable;\n  }\n\n  public addQueryPromise<TData, TVariables>(\n    queryInstance: QueryData<TData, TVariables>,\n    finish: () => React.ReactNode\n  ): React.ReactNode {\n    const info = this.lookupQueryInfo(queryInstance.getOptions());\n    if (!info.seen) {\n      this.queryPromises.set(\n        queryInstance.getOptions(),\n        new Promise(resolve => {\n          resolve(queryInstance.fetchData());\n        })\n      );\n      // Render null to abandon this subtree for this rendering, so that we\n      // can wait for the data to arrive.\n      return null;\n    }\n    return finish();\n  }\n\n  public hasPromises() {\n    return this.queryPromises.size > 0;\n  }\n\n  public consumeAndAwaitPromises() {\n    const promises: Promise<any>[] = [];\n    this.queryPromises.forEach((promise, queryInstance) => {\n      // Make sure we never try to call fetchData for this query document and\n      // these variables again. Since the queryInstance objects change with\n      // every rendering, deduplicating them by query and variables is the\n      // best we can do. If a different Query component happens to have the\n      // same query document and variables, it will be immediately rendered\n      // by calling finish() in addQueryPromise, which could result in the\n      // rendering of an unwanted loading state, but that's not nearly as bad\n      // as getting stuck in an infinite rendering loop because we kept calling\n      // queryInstance.fetchData for the same Query component indefinitely.\n      this.lookupQueryInfo(queryInstance).seen = true;\n      promises.push(promise);\n    });\n    this.queryPromises.clear();\n    return Promise.all(promises);\n  }\n\n  private lookupQueryInfo<TData, TVariables>(\n    props: QueryOptions<TData, TVariables>\n  ): QueryInfo {\n    const { queryInfoTrie } = this;\n    const { query, variables } = props;\n    const varMap = queryInfoTrie.get(query) || new Map<string, QueryInfo>();\n    if (!queryInfoTrie.has(query)) queryInfoTrie.set(query, varMap);\n    const variablesString = JSON.stringify(variables);\n    const info = varMap.get(variablesString) || makeDefaultQueryInfo();\n    if (!varMap.has(variablesString)) varMap.set(variablesString, info);\n    return info;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}