{"ast":null,"code":"import { __extends } from 'tslib';\nvar genericMessage = \"Invariant Violation\";\nvar _a = Object.setPrototypeOf,\n  setPrototypeOf = _a === void 0 ? function (obj, proto) {\n    obj.__proto__ = proto;\n    return obj;\n  } : _a;\nvar InvariantError = /** @class */function (_super) {\n  __extends(InvariantError, _super);\n  function InvariantError(message) {\n    if (message === void 0) {\n      message = genericMessage;\n    }\n    var _this = _super.call(this, typeof message === \"number\" ? genericMessage + \": \" + message + \" (see https://github.com/apollographql/invariant-packages)\" : message) || this;\n    _this.framesToPop = 1;\n    _this.name = genericMessage;\n    setPrototypeOf(_this, InvariantError.prototype);\n    return _this;\n  }\n  return InvariantError;\n}(Error);\nfunction invariant(condition, message) {\n  if (!condition) {\n    throw new InvariantError(message);\n  }\n}\nfunction wrapConsoleMethod(method) {\n  return function () {\n    return console[method].apply(console, arguments);\n  };\n}\n(function (invariant) {\n  invariant.warn = wrapConsoleMethod(\"warn\");\n  invariant.error = wrapConsoleMethod(\"error\");\n})(invariant || (invariant = {}));\n// Code that uses ts-invariant with rollup-plugin-invariant may want to\n// import this process stub to avoid errors evaluating process.env.NODE_ENV.\n// However, because most ESM-to-CJS compilers will rewrite the process import\n// as tsInvariant.process, which prevents proper replacement by minifiers, we\n// also attempt to define the stub globally when it is not already defined.\nvar processStub = {\n  env: {}\n};\nif (typeof process === \"object\") {\n  processStub = process;\n} else try {\n  // Using Function to evaluate this assignment in global scope also escapes\n  // the strict mode of the current module, thereby allowing the assignment.\n  // Inspired by https://github.com/facebook/regenerator/pull/369.\n  Function(\"stub\", \"process = stub\")(processStub);\n} catch (atLeastWeTried) {\n  // The assignment can fail if a Content Security Policy heavy-handedly\n  // forbids Function usage. In those environments, developers should take\n  // extra care to replace process.env.NODE_ENV in their production builds,\n  // or define an appropriate global.process polyfill.\n}\nvar invariant$1 = invariant;\nexport default invariant$1;\nexport { InvariantError, invariant, processStub as process };","map":{"version":3,"names":["genericMessage","_a","Object","setPrototypeOf","obj","proto","InvariantError","_super","__extends","message","_this","call","framesToPop","name","prototype","Error","invariant","condition","wrapConsoleMethod","method","console","apply","arguments","warn","error","processStub","env","process","Function","atLeastWeTried","invariant$1"],"sources":["C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\ts-invariant\\src\\invariant.ts"],"sourcesContent":["const genericMessage = \"Invariant Violation\";\nconst {\n  setPrototypeOf = function (obj: any, proto: any) {\n    obj.__proto__ = proto;\n    return obj;\n  },\n} = Object as any;\n\nexport class InvariantError extends Error {\n  framesToPop = 1;\n  name = genericMessage;\n  constructor(message: string | number = genericMessage) {\n    super(\n      typeof message === \"number\"\n        ? `${genericMessage}: ${message} (see https://github.com/apollographql/invariant-packages)`\n        : message\n    );\n    setPrototypeOf(this, InvariantError.prototype);\n  }\n}\n\nexport function invariant(condition: any, message?: string | number) {\n  if (!condition) {\n    throw new InvariantError(message);\n  }\n}\n\nfunction wrapConsoleMethod(method: \"warn\" | \"error\") {\n  return function () {\n    return console[method].apply(console, arguments as any);\n  } as (...args: any[]) => void;\n}\n\nexport namespace invariant {\n  export const warn = wrapConsoleMethod(\"warn\");\n  export const error = wrapConsoleMethod(\"error\");\n}\n\n// Code that uses ts-invariant with rollup-plugin-invariant may want to\n// import this process stub to avoid errors evaluating process.env.NODE_ENV.\n// However, because most ESM-to-CJS compilers will rewrite the process import\n// as tsInvariant.process, which prevents proper replacement by minifiers, we\n// also attempt to define the stub globally when it is not already defined.\nlet processStub: NodeJS.Process = { env: {} } as any;\nexport { processStub as process };\nif (typeof process === \"object\") {\n  processStub = process;\n} else try {\n  // Using Function to evaluate this assignment in global scope also escapes\n  // the strict mode of the current module, thereby allowing the assignment.\n  // Inspired by https://github.com/facebook/regenerator/pull/369.\n  Function(\"stub\", \"process = stub\")(processStub);\n} catch (atLeastWeTried) {\n  // The assignment can fail if a Content Security Policy heavy-handedly\n  // forbids Function usage. In those environments, developers should take\n  // extra care to replace process.env.NODE_ENV in their production builds,\n  // or define an appropriate global.process polyfill.\n}\n\nexport default invariant;\n"],"mappings":";AAAA,IAAMA,cAAc,GAAG,qBAAqB;AAE1C,IAAAC,EAAA,GAAAC,MAAA,CAAAC,cAGC;EAHDA,cAAA,GAAAF,EAAA,wBAAAG,GAAA,EAAAC,KAAA;;;QAGC;AAGH,IAAAC,cAAA,0BAAAC,MAAA;EAAoCC,SAAA,CAAAF,cAAA,EAAAC,MAAA;EAGlC,SAAAD,eAAYG,OAAyC;IAAzC,IAAAA,OAAA;MAAAA,OAAA,GAAAT,cAAyC;IAAA;IAArD,IAAAU,KAAA,GACEH,MAAA,CAAAI,IAAA,OACE,OAAOF,OAAO,KAAK,QAAQ,GACpBT,cAAc,UAAKS,OAAO,+DAA4D,GACzFA,OAAO,CACZ;IAPHC,KAAA,CAAAE,WAAW,GAAG,CAAC;IACfF,KAAA,CAAAG,IAAI,GAAGb,cAAc;IAOnBG,cAAc,CAACO,KAAI,EAAEJ,cAAc,CAACQ,SAAS,CAAC;;;EAElD,OAAAR,cAAC;CAXD,CAAoCS,KAAK;SAazBC,SAASA,CAACC,SAAc,EAAER,OAAyB;EACjE,IAAI,CAACQ,SAAS,EAAE;IACd,MAAM,IAAIX,cAAc,CAACG,OAAO,CAAC;;;AAIrC,SAASS,iBAAiBA,CAACC,MAAwB;EACjD,OAAO;IACL,OAAOC,OAAO,CAACD,MAAM,CAAC,CAACE,KAAK,CAACD,OAAO,EAAEE,SAAgB,CAAC;GAC5B;;AAG/B,WAAiBN,SAAS;EACXA,SAAA,CAAAO,IAAI,GAAGL,iBAAiB,CAAC,MAAM,CAAC;EAChCF,SAAA,CAAAQ,KAAK,GAAGN,iBAAiB,CAAC,OAAO,CAAC;CAChD,EAHgBF,SAAS,KAATA,SAAS;;;;;;AAU1B,IAAIS,WAAW,GAAmB;EAAEC,GAAG,EAAE;AAAE,CAAS;AACpD,IACI,OAAOC,OAAO,KAAK,QAAQ,EAAE;EAC/BF,WAAW,GAAGE,OAAO;CACtB,MAAM,IAAI;;;;EAITC,QAAQ,CAAC,MAAM,EAAE,gBAAgB,CAAC,CAACH,WAAW,CAAC;CAChD,CAAC,OAAOI,cAAc,EAAE;;;;;;AAOzB,IAAAC,WAAA,GAAed,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}