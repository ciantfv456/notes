{"ast":null,"code":"// This currentContext variable will only be used if the makeSlotClass\n// function is called, which happens only if this is the first copy of the\n// @wry/context package to be imported.\nvar currentContext = null;\n// This unique internal object is used to denote the absence of a value\n// for a given Slot, and is never exposed to outside code.\nvar MISSING_VALUE = {};\nvar idCounter = 1;\n// Although we can't do anything about the cost of duplicated code from\n// accidentally bundling multiple copies of the @wry/context package, we can\n// avoid creating the Slot class more than once using makeSlotClass.\nvar makeSlotClass = function () {\n  return (/** @class */function () {\n      function Slot() {\n        // If you have a Slot object, you can find out its slot.id, but you cannot\n        // guess the slot.id of a Slot you don't have access to, thanks to the\n        // randomized suffix.\n        this.id = [\"slot\", idCounter++, Date.now(), Math.random().toString(36).slice(2)].join(\":\");\n      }\n      Slot.prototype.hasValue = function () {\n        for (var context_1 = currentContext; context_1; context_1 = context_1.parent) {\n          // We use the Slot object iself as a key to its value, which means the\n          // value cannot be obtained without a reference to the Slot object.\n          if (this.id in context_1.slots) {\n            var value = context_1.slots[this.id];\n            if (value === MISSING_VALUE) break;\n            if (context_1 !== currentContext) {\n              // Cache the value in currentContext.slots so the next lookup will\n              // be faster. This caching is safe because the tree of contexts and\n              // the values of the slots are logically immutable.\n              currentContext.slots[this.id] = value;\n            }\n            return true;\n          }\n        }\n        if (currentContext) {\n          // If a value was not found for this Slot, it's never going to be found\n          // no matter how many times we look it up, so we might as well cache\n          // the absence of the value, too.\n          currentContext.slots[this.id] = MISSING_VALUE;\n        }\n        return false;\n      };\n      Slot.prototype.getValue = function () {\n        if (this.hasValue()) {\n          return currentContext.slots[this.id];\n        }\n      };\n      Slot.prototype.withValue = function (value, callback,\n      // Given the prevalence of arrow functions, specifying arguments is likely\n      // to be much more common than specifying `this`, hence this ordering:\n      args, thisArg) {\n        var _a;\n        var slots = (_a = {\n          __proto__: null\n        }, _a[this.id] = value, _a);\n        var parent = currentContext;\n        currentContext = {\n          parent: parent,\n          slots: slots\n        };\n        try {\n          // Function.prototype.apply allows the arguments array argument to be\n          // omitted or undefined, so args! is fine here.\n          return callback.apply(thisArg, args);\n        } finally {\n          currentContext = parent;\n        }\n      };\n      // Capture the current context and wrap a callback function so that it\n      // reestablishes the captured context when called.\n      Slot.bind = function (callback) {\n        var context = currentContext;\n        return function () {\n          var saved = currentContext;\n          try {\n            currentContext = context;\n            return callback.apply(this, arguments);\n          } finally {\n            currentContext = saved;\n          }\n        };\n      };\n      // Immediately run a callback function without any captured context.\n      Slot.noContext = function (callback,\n      // Given the prevalence of arrow functions, specifying arguments is likely\n      // to be much more common than specifying `this`, hence this ordering:\n      args, thisArg) {\n        if (currentContext) {\n          var saved = currentContext;\n          try {\n            currentContext = null;\n            // Function.prototype.apply allows the arguments array argument to be\n            // omitted or undefined, so args! is fine here.\n            return callback.apply(thisArg, args);\n          } finally {\n            currentContext = saved;\n          }\n        } else {\n          return callback.apply(thisArg, args);\n        }\n      };\n      return Slot;\n    }()\n  );\n};\n// We store a single global implementation of the Slot class as a permanent\n// non-enumerable symbol property of the Array constructor. This obfuscation\n// does nothing to prevent access to the Slot class, but at least it ensures\n// the implementation (i.e. currentContext) cannot be tampered with, and all\n// copies of the @wry/context package (hopefully just one) will share the\n// same Slot implementation. Since the first copy of the @wry/context package\n// to be imported wins, this technique imposes a very high cost for any\n// future breaking changes to the Slot class.\nvar globalKey = \"@wry/context:Slot\";\nvar host = Array;\nvar Slot = host[globalKey] || function () {\n  var Slot = makeSlotClass();\n  try {\n    Object.defineProperty(host, globalKey, {\n      value: host[globalKey] = Slot,\n      enumerable: false,\n      writable: false,\n      configurable: false\n    });\n  } finally {\n    return Slot;\n  }\n}();\nvar bind = Slot.bind,\n  noContext = Slot.noContext;\nfunction setTimeoutWithContext(callback, delay) {\n  return setTimeout(bind(callback), delay);\n}\n// Turn any generator function into an async function (using yield instead\n// of await), with context automatically preserved across yields.\nfunction asyncFromGen(genFn) {\n  return function () {\n    var gen = genFn.apply(this, arguments);\n    var boundNext = bind(gen.next);\n    var boundThrow = bind(gen.throw);\n    return new Promise(function (resolve, reject) {\n      function invoke(method, argument) {\n        try {\n          var result = method.call(gen, argument);\n        } catch (error) {\n          return reject(error);\n        }\n        var next = result.done ? resolve : invokeNext;\n        if (isPromiseLike(result.value)) {\n          result.value.then(next, result.done ? reject : invokeThrow);\n        } else {\n          next(result.value);\n        }\n      }\n      var invokeNext = function (value) {\n        return invoke(boundNext, value);\n      };\n      var invokeThrow = function (error) {\n        return invoke(boundThrow, error);\n      };\n      invokeNext();\n    });\n  };\n}\nfunction isPromiseLike(value) {\n  return value && typeof value.then === \"function\";\n}\n// If you use the fibers npm package to implement coroutines in Node.js,\n// you should call this function at least once to ensure context management\n// remains coherent across any yields.\nvar wrappedFibers = [];\nfunction wrapYieldingFiberMethods(Fiber) {\n  // There can be only one implementation of Fiber per process, so this array\n  // should never grow longer than one element.\n  if (wrappedFibers.indexOf(Fiber) < 0) {\n    var wrap = function (obj, method) {\n      var fn = obj[method];\n      obj[method] = function () {\n        return noContext(fn, arguments, this);\n      };\n    };\n    // These methods can yield, according to\n    // https://github.com/laverdet/node-fibers/blob/ddebed9b8ae3883e57f822e2108e6943e5c8d2a8/fibers.js#L97-L100\n    wrap(Fiber, \"yield\");\n    wrap(Fiber.prototype, \"run\");\n    wrap(Fiber.prototype, \"throwInto\");\n    wrappedFibers.push(Fiber);\n  }\n  return Fiber;\n}\nexport { Slot, asyncFromGen, bind, noContext, setTimeoutWithContext as setTimeout, wrapYieldingFiberMethods };","map":{"version":3,"names":["currentContext","MISSING_VALUE","idCounter","makeSlotClass","Slot","id","Date","now","Math","random","toString","slice","join","prototype","hasValue","context_1","parent","slots","value","getValue","withValue","callback","args","thisArg","_a","__proto__","apply","bind","context","saved","arguments","noContext","globalKey","host","Array","Object","defineProperty","enumerable","writable","configurable","setTimeoutWithContext","delay","setTimeout","asyncFromGen","genFn","gen","boundNext","next","boundThrow","throw","Promise","resolve","reject","invoke","method","argument","result","call","error","done","invokeNext","isPromiseLike","then","invokeThrow","wrappedFibers","wrapYieldingFiberMethods","Fiber","indexOf","wrap","obj","fn","push"],"sources":["C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\@wry\\context\\src\\slot.ts","C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\@wry\\context\\src\\context.ts"],"sourcesContent":["type Context = {\n  parent: Context | null;\n  slots: { [slotId: string]: any };\n}\n\n// This currentContext variable will only be used if the makeSlotClass\n// function is called, which happens only if this is the first copy of the\n// @wry/context package to be imported.\nlet currentContext: Context | null = null;\n\n// This unique internal object is used to denote the absence of a value\n// for a given Slot, and is never exposed to outside code.\nconst MISSING_VALUE: any = {};\n\nlet idCounter = 1;\n\n// Although we can't do anything about the cost of duplicated code from\n// accidentally bundling multiple copies of the @wry/context package, we can\n// avoid creating the Slot class more than once using makeSlotClass.\nconst makeSlotClass = () => class Slot<TValue> {\n  // If you have a Slot object, you can find out its slot.id, but you cannot\n  // guess the slot.id of a Slot you don't have access to, thanks to the\n  // randomized suffix.\n  public readonly id = [\n    \"slot\",\n    idCounter++,\n    Date.now(),\n    Math.random().toString(36).slice(2),\n  ].join(\":\");\n\n  public hasValue() {\n    for (let context = currentContext; context; context = context.parent) {\n      // We use the Slot object iself as a key to its value, which means the\n      // value cannot be obtained without a reference to the Slot object.\n      if (this.id in context.slots) {\n        const value = context.slots[this.id];\n        if (value === MISSING_VALUE) break;\n        if (context !== currentContext) {\n          // Cache the value in currentContext.slots so the next lookup will\n          // be faster. This caching is safe because the tree of contexts and\n          // the values of the slots are logically immutable.\n          currentContext!.slots[this.id] = value;\n        }\n        return true;\n      }\n    }\n    if (currentContext) {\n      // If a value was not found for this Slot, it's never going to be found\n      // no matter how many times we look it up, so we might as well cache\n      // the absence of the value, too.\n      currentContext.slots[this.id] = MISSING_VALUE;\n    }\n    return false;\n  }\n\n  public getValue(): TValue | undefined {\n    if (this.hasValue()) {\n      return currentContext!.slots[this.id] as TValue;\n    }\n  }\n\n  public withValue<TResult, TArgs extends any[], TThis = any>(\n    value: TValue,\n    callback: (this: TThis, ...args: TArgs) => TResult,\n    // Given the prevalence of arrow functions, specifying arguments is likely\n    // to be much more common than specifying `this`, hence this ordering:\n    args?: TArgs,\n    thisArg?: TThis,\n  ): TResult {\n    const slots = {\n      __proto__: null,\n      [this.id]: value,\n    };\n    const parent = currentContext;\n    currentContext = { parent, slots };\n    try {\n      // Function.prototype.apply allows the arguments array argument to be\n      // omitted or undefined, so args! is fine here.\n      return callback.apply(thisArg!, args!);\n    } finally {\n      currentContext = parent;\n    }\n  }\n\n  // Capture the current context and wrap a callback function so that it\n  // reestablishes the captured context when called.\n  static bind<TArgs extends any[], TResult>(\n    callback: (...args: TArgs) => TResult,\n  ) {\n    const context = currentContext;\n    return function (this: any) {\n      const saved = currentContext;\n      try {\n        currentContext = context;\n        return callback.apply(this, arguments as any);\n      } finally {\n        currentContext = saved;\n      }\n    } as typeof callback;\n  }\n\n  // Immediately run a callback function without any captured context.\n  static noContext<TResult, TArgs extends any[], TThis = any>(\n    callback: (this: TThis, ...args: TArgs) => TResult,\n    // Given the prevalence of arrow functions, specifying arguments is likely\n    // to be much more common than specifying `this`, hence this ordering:\n    args?: TArgs,\n    thisArg?: TThis,\n  ) {\n    if (currentContext) {\n      const saved = currentContext;\n      try {\n        currentContext = null;\n        // Function.prototype.apply allows the arguments array argument to be\n        // omitted or undefined, so args! is fine here.\n        return callback.apply(thisArg!, args!);\n      } finally {\n        currentContext = saved;\n      }\n    } else {\n      return callback.apply(thisArg!, args!);\n    }\n  }\n};\n\n// We store a single global implementation of the Slot class as a permanent\n// non-enumerable symbol property of the Array constructor. This obfuscation\n// does nothing to prevent access to the Slot class, but at least it ensures\n// the implementation (i.e. currentContext) cannot be tampered with, and all\n// copies of the @wry/context package (hopefully just one) will share the\n// same Slot implementation. Since the first copy of the @wry/context package\n// to be imported wins, this technique imposes a very high cost for any\n// future breaking changes to the Slot class.\nconst globalKey = \"@wry/context:Slot\";\nconst host = Array as any;\n\nexport const Slot: ReturnType<typeof makeSlotClass> = host[globalKey] || function () {\n  const Slot = makeSlotClass();\n  try {\n    Object.defineProperty(host, globalKey, {\n      value: host[globalKey] = Slot,\n      enumerable: false,\n      writable: false,\n      configurable: false,\n    });\n  } finally {\n    return Slot;\n  }\n}();\n","import { Slot } from \"./slot\";\nexport { Slot }\nexport const { bind, noContext } = Slot;\n\n// Like global.setTimeout, except the callback runs with captured context.\nexport { setTimeoutWithContext as setTimeout };\nfunction setTimeoutWithContext(callback: () => any, delay: number) {\n  return setTimeout(bind(callback), delay);\n}\n\n// Turn any generator function into an async function (using yield instead\n// of await), with context automatically preserved across yields.\nexport function asyncFromGen<TArgs extends any[], TResult>(\n  genFn: (...args: TArgs) => IterableIterator<TResult>,\n) {\n  return function (this: any) {\n    const gen = genFn.apply(this, arguments as any);\n    const boundNext = bind(gen.next);\n    const boundThrow = bind(gen.throw!);\n    type Method = typeof boundNext | typeof boundThrow;\n\n    return new Promise<TResult>((resolve, reject) => {\n      function invoke(method: Method, argument: any) {\n        try {\n          var result = method.call(gen, argument);\n        } catch (error) {\n          return reject(error);\n        }\n        const next = result.done ? resolve : invokeNext;\n        if (isPromiseLike(result.value)) {\n          result.value.then(next, result.done ? reject : invokeThrow);\n        } else {\n          next(result.value);\n        }\n      }\n      const invokeNext = (value?: any) => invoke(boundNext, value);\n      const invokeThrow = (error: any) => invoke(boundThrow, error);\n      invokeNext();\n    });\n  } as (...args: TArgs) => Promise<TResult>;\n}\n\nfunction isPromiseLike(value: any): value is PromiseLike<any> {\n  return value && typeof value.then === \"function\";\n}\n\n// If you use the fibers npm package to implement coroutines in Node.js,\n// you should call this function at least once to ensure context management\n// remains coherent across any yields.\nconst wrappedFibers: Function[] = [];\nexport function wrapYieldingFiberMethods<F extends Function>(Fiber: F): F {\n  // There can be only one implementation of Fiber per process, so this array\n  // should never grow longer than one element.\n  if (wrappedFibers.indexOf(Fiber) < 0) {\n    const wrap = (obj: any, method: string) => {\n      const fn = obj[method];\n      obj[method] = function () {\n        return noContext(fn, arguments as any, this);\n      };\n    }\n    // These methods can yield, according to\n    // https://github.com/laverdet/node-fibers/blob/ddebed9b8ae3883e57f822e2108e6943e5c8d2a8/fibers.js#L97-L100\n    wrap(Fiber, \"yield\");\n    wrap(Fiber.prototype, \"run\");\n    wrap(Fiber.prototype, \"throwInto\");\n    wrappedFibers.push(Fiber);\n  }\n  return Fiber;\n}\n"],"mappings":"AAKA;;;AAGA,IAAIA,cAAc,GAAmB,IAAI;;;AAIzC,IAAMC,aAAa,GAAQ,EAAE;AAE7B,IAAIC,SAAS,GAAG,CAAC;;;;AAKjB,IAAMC,aAAa,GAAG,SAAAA,CAAA;EAAM;MAAA,SAAAC,KAAA;;;;QAIV,KAAAC,EAAE,GAAG,CACnB,MAAM,EACNH,SAAS,EAAE,EACXI,IAAI,CAACC,GAAG,EAAE,EACVC,IAAI,CAACC,MAAM,EAAE,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC,CACpC,CAACC,IAAI,CAAC,GAAG,CAAC;;MAEJR,IAAA,CAAAS,SAAA,CAAAC,QAAQ,GAAf;QACE,KAAK,IAAIC,SAAO,GAAGf,cAAc,EAAEe,SAAO,EAAEA,SAAO,GAAGA,SAAO,CAACC,MAAM,EAAE;;;UAGpE,IAAI,IAAI,CAACX,EAAE,IAAIU,SAAO,CAACE,KAAK,EAAE;YAC5B,IAAMC,KAAK,GAAGH,SAAO,CAACE,KAAK,CAAC,IAAI,CAACZ,EAAE,CAAC;YACpC,IAAIa,KAAK,KAAKjB,aAAa,EAAE;YAC7B,IAAIc,SAAO,KAAKf,cAAc,EAAE;;;;cAI9BA,cAAe,CAACiB,KAAK,CAAC,IAAI,CAACZ,EAAE,CAAC,GAAGa,KAAK;;YAExC,OAAO,IAAI;;;QAGf,IAAIlB,cAAc,EAAE;;;;UAIlBA,cAAc,CAACiB,KAAK,CAAC,IAAI,CAACZ,EAAE,CAAC,GAAGJ,aAAa;;QAE/C,OAAO,KAAK;OACb;MAEMG,IAAA,CAAAS,SAAA,CAAAM,QAAQ,GAAf;QACE,IAAI,IAAI,CAACL,QAAQ,EAAE,EAAE;UACnB,OAAOd,cAAe,CAACiB,KAAK,CAAC,IAAI,CAACZ,EAAE,CAAW;;OAElD;MAEMD,IAAA,CAAAS,SAAA,CAAAO,SAAS,GAAhB,UACEF,KAAa,EACbG,QAAkD;;;MAGlDC,IAAY,EACZC,OAAe;;QAEf,IAAMN,KAAK,IAAAO,EAAA;UACTC,SAAS,EAAE;WACXD,EAAA,CAAC,IAAI,CAACnB,EAAE,IAAGa,KAAK,E,GACjB;QACD,IAAMF,MAAM,GAAGhB,cAAc;QAC7BA,cAAc,GAAG;UAAEgB,MAAM,EAAAA,MAAA;UAAEC,KAAK,EAAAA;QAAA,CAAE;QAClC,IAAI;;;UAGF,OAAOI,QAAQ,CAACK,KAAK,CAACH,OAAQ,EAAED,IAAK,CAAC;SACvC,SAAS;UACRtB,cAAc,GAAGgB,MAAM;;OAE1B;;;MAIMZ,IAAA,CAAAuB,IAAI,GAAX,UACEN,QAAqC;QAErC,IAAMO,OAAO,GAAG5B,cAAc;QAC9B,OAAO;UACL,IAAM6B,KAAK,GAAG7B,cAAc;UAC5B,IAAI;YACFA,cAAc,GAAG4B,OAAO;YACxB,OAAOP,QAAQ,CAACK,KAAK,CAAC,IAAI,EAAEI,SAAgB,CAAC;WAC9C,SAAS;YACR9B,cAAc,GAAG6B,KAAK;;SAEN;OACrB;;MAGMzB,IAAA,CAAA2B,SAAS,GAAhB,UACEV,QAAkD;;;MAGlDC,IAAY,EACZC,OAAe;QAEf,IAAIvB,cAAc,EAAE;UAClB,IAAM6B,KAAK,GAAG7B,cAAc;UAC5B,IAAI;YACFA,cAAc,GAAG,IAAI;;;YAGrB,OAAOqB,QAAQ,CAACK,KAAK,CAACH,OAAQ,EAAED,IAAK,CAAC;WACvC,SAAS;YACRtB,cAAc,GAAG6B,KAAK;;SAEzB,MAAM;UACL,OAAOR,QAAQ,CAACK,KAAK,CAACH,OAAQ,EAAED,IAAK,CAAC;;OAEzC;MACH,OAAAlB,IAAC;KAxG2B;EAAA;AAAA,CAwG3B;;;;;;;;;AAUD,IAAM4B,SAAS,GAAG,mBAAmB;AACrC,IAAMC,IAAI,GAAGC,KAAY;AAEzB,IAAa9B,IAAI,GAAqC6B,IAAI,CAACD,SAAS,CAAC,IAAI;EACvE,IAAM5B,IAAI,GAAGD,aAAa,EAAE;EAC5B,IAAI;IACFgC,MAAM,CAACC,cAAc,CAACH,IAAI,EAAED,SAAS,EAAE;MACrCd,KAAK,EAAEe,IAAI,CAACD,SAAS,CAAC,GAAG5B,IAAI;MAC7BiC,UAAU,EAAE,KAAK;MACjBC,QAAQ,EAAE,KAAK;MACfC,YAAY,EAAE;KACf,CAAC;GACH,SAAS;IACR,OAAOnC,IAAI;;CAEd,EAAE;IClJYuB,IAAA,GAAAvB,IAAA,CAAAuB,IAAI;EAAEI,SAAA,GAAA3B,IAAA,CAAA2B,SAAS;AAE9B,SAESS,qBAAqBA,CAACnB,QAAmB,EAAEoB,KAAa;EAC/D,OAAOC,UAAU,CAACf,IAAI,CAACN,QAAQ,CAAC,EAAEoB,KAAK,CAAC;;;;AAK1C,SAAgBE,YAAYA,CAC1BC,KAAoD;EAEpD,OAAO;IACL,IAAMC,GAAG,GAAGD,KAAK,CAAClB,KAAK,CAAC,IAAI,EAAEI,SAAgB,CAAC;IAC/C,IAAMgB,SAAS,GAAGnB,IAAI,CAACkB,GAAG,CAACE,IAAI,CAAC;IAChC,IAAMC,UAAU,GAAGrB,IAAI,CAACkB,GAAG,CAACI,KAAM,CAAC;IAGnC,OAAO,IAAIC,OAAO,CAAU,UAACC,OAAO,EAAEC,MAAM;MAC1C,SAASC,MAAMA,CAACC,MAAc,EAAEC,QAAa;QAC3C,IAAI;UACF,IAAIC,MAAM,GAAGF,MAAM,CAACG,IAAI,CAACZ,GAAG,EAAEU,QAAQ,CAAC;SACxC,CAAC,OAAOG,KAAK,EAAE;UACd,OAAON,MAAM,CAACM,KAAK,CAAC;;QAEtB,IAAMX,IAAI,GAAGS,MAAM,CAACG,IAAI,GAAGR,OAAO,GAAGS,UAAU;QAC/C,IAAIC,aAAa,CAACL,MAAM,CAACtC,KAAK,CAAC,EAAE;UAC/BsC,MAAM,CAACtC,KAAK,CAAC4C,IAAI,CAACf,IAAI,EAAES,MAAM,CAACG,IAAI,GAAGP,MAAM,GAAGW,WAAW,CAAC;SAC5D,MAAM;UACLhB,IAAI,CAACS,MAAM,CAACtC,KAAK,CAAC;;;MAGtB,IAAM0C,UAAU,GAAG,SAAAA,CAAC1C,KAAW;QAAK,OAAAmC,MAAM,CAACP,SAAS,EAAE5B,KAAK,CAAC;MAAA;MAC5D,IAAM6C,WAAW,GAAG,SAAAA,CAACL,KAAU;QAAK,OAAAL,MAAM,CAACL,UAAU,EAAEU,KAAK,CAAC;MAAA;MAC7DE,UAAU,EAAE;KACb,CAAC;GACqC;;AAG3C,SAASC,aAAaA,CAAC3C,KAAU;EAC/B,OAAOA,KAAK,IAAI,OAAOA,KAAK,CAAC4C,IAAI,KAAK,UAAU;;;;;AAMlD,IAAME,aAAa,GAAe,EAAE;AACpC,SAAgBC,wBAAwBA,CAAqBC,KAAQ;;;EAGnE,IAAIF,aAAa,CAACG,OAAO,CAACD,KAAK,CAAC,GAAG,CAAC,EAAE;IACpC,IAAME,IAAI,GAAG,SAAAA,CAACC,GAAQ,EAAEf,MAAc;MACpC,IAAMgB,EAAE,GAAGD,GAAG,CAACf,MAAM,CAAC;MACtBe,GAAG,CAACf,MAAM,CAAC,GAAG;QACZ,OAAOvB,SAAS,CAACuC,EAAE,EAAExC,SAAgB,EAAE,IAAI,CAAC;OAC7C;KACF;;;IAGDsC,IAAI,CAACF,KAAK,EAAE,OAAO,CAAC;IACpBE,IAAI,CAACF,KAAK,CAACrD,SAAS,EAAE,KAAK,CAAC;IAC5BuD,IAAI,CAACF,KAAK,CAACrD,SAAS,EAAE,WAAW,CAAC;IAClCmD,aAAa,CAACO,IAAI,CAACL,KAAK,CAAC;;EAE3B,OAAOA,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}