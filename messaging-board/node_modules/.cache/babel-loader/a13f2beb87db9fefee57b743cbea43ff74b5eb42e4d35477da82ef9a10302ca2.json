{"ast":null,"code":"import { visit } from 'graphql/language/visitor';\nimport { InvariantError, invariant } from 'ts-invariant';\nimport { __assign, __spreadArrays } from 'tslib';\nimport stringify from 'fast-json-stable-stringify';\nexport { equal as isEqual } from '@wry/equality';\nfunction isScalarValue(value) {\n  return ['StringValue', 'BooleanValue', 'EnumValue'].indexOf(value.kind) > -1;\n}\nfunction isNumberValue(value) {\n  return ['IntValue', 'FloatValue'].indexOf(value.kind) > -1;\n}\nfunction isStringValue(value) {\n  return value.kind === 'StringValue';\n}\nfunction isBooleanValue(value) {\n  return value.kind === 'BooleanValue';\n}\nfunction isIntValue(value) {\n  return value.kind === 'IntValue';\n}\nfunction isFloatValue(value) {\n  return value.kind === 'FloatValue';\n}\nfunction isVariable(value) {\n  return value.kind === 'Variable';\n}\nfunction isObjectValue(value) {\n  return value.kind === 'ObjectValue';\n}\nfunction isListValue(value) {\n  return value.kind === 'ListValue';\n}\nfunction isEnumValue(value) {\n  return value.kind === 'EnumValue';\n}\nfunction isNullValue(value) {\n  return value.kind === 'NullValue';\n}\nfunction valueToObjectRepresentation(argObj, name, value, variables) {\n  if (isIntValue(value) || isFloatValue(value)) {\n    argObj[name.value] = Number(value.value);\n  } else if (isBooleanValue(value) || isStringValue(value)) {\n    argObj[name.value] = value.value;\n  } else if (isObjectValue(value)) {\n    var nestedArgObj_1 = {};\n    value.fields.map(function (obj) {\n      return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);\n    });\n    argObj[name.value] = nestedArgObj_1;\n  } else if (isVariable(value)) {\n    var variableValue = (variables || {})[value.name.value];\n    argObj[name.value] = variableValue;\n  } else if (isListValue(value)) {\n    argObj[name.value] = value.values.map(function (listValue) {\n      var nestedArgArrayObj = {};\n      valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);\n      return nestedArgArrayObj[name.value];\n    });\n  } else if (isEnumValue(value)) {\n    argObj[name.value] = value.value;\n  } else if (isNullValue(value)) {\n    argObj[name.value] = null;\n  } else {\n    throw process.env.NODE_ENV === \"production\" ? new InvariantError(17) : new InvariantError(\"The inline argument \\\"\" + name.value + \"\\\" of kind \\\"\" + value.kind + \"\\\"\" + 'is not supported. Use variables instead of inline arguments to ' + 'overcome this limitation.');\n  }\n}\nfunction storeKeyNameFromField(field, variables) {\n  var directivesObj = null;\n  if (field.directives) {\n    directivesObj = {};\n    field.directives.forEach(function (directive) {\n      directivesObj[directive.name.value] = {};\n      if (directive.arguments) {\n        directive.arguments.forEach(function (_a) {\n          var name = _a.name,\n            value = _a.value;\n          return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);\n        });\n      }\n    });\n  }\n  var argObj = null;\n  if (field.arguments && field.arguments.length) {\n    argObj = {};\n    field.arguments.forEach(function (_a) {\n      var name = _a.name,\n        value = _a.value;\n      return valueToObjectRepresentation(argObj, name, value, variables);\n    });\n  }\n  return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\nvar KNOWN_DIRECTIVES = ['connection', 'include', 'skip', 'client', 'rest', 'export'];\nfunction getStoreKeyName(fieldName, args, directives) {\n  if (directives && directives['connection'] && directives['connection']['key']) {\n    if (directives['connection']['filter'] && directives['connection']['filter'].length > 0) {\n      var filterKeys = directives['connection']['filter'] ? directives['connection']['filter'] : [];\n      filterKeys.sort();\n      var queryArgs_1 = args;\n      var filteredArgs_1 = {};\n      filterKeys.forEach(function (key) {\n        filteredArgs_1[key] = queryArgs_1[key];\n      });\n      return directives['connection']['key'] + \"(\" + JSON.stringify(filteredArgs_1) + \")\";\n    } else {\n      return directives['connection']['key'];\n    }\n  }\n  var completeFieldName = fieldName;\n  if (args) {\n    var stringifiedArgs = stringify(args);\n    completeFieldName += \"(\" + stringifiedArgs + \")\";\n  }\n  if (directives) {\n    Object.keys(directives).forEach(function (key) {\n      if (KNOWN_DIRECTIVES.indexOf(key) !== -1) return;\n      if (directives[key] && Object.keys(directives[key]).length) {\n        completeFieldName += \"@\" + key + \"(\" + JSON.stringify(directives[key]) + \")\";\n      } else {\n        completeFieldName += \"@\" + key;\n      }\n    });\n  }\n  return completeFieldName;\n}\nfunction argumentsObjectFromField(field, variables) {\n  if (field.arguments && field.arguments.length) {\n    var argObj_1 = {};\n    field.arguments.forEach(function (_a) {\n      var name = _a.name,\n        value = _a.value;\n      return valueToObjectRepresentation(argObj_1, name, value, variables);\n    });\n    return argObj_1;\n  }\n  return null;\n}\nfunction resultKeyNameFromField(field) {\n  return field.alias ? field.alias.value : field.name.value;\n}\nfunction isField(selection) {\n  return selection.kind === 'Field';\n}\nfunction isInlineFragment(selection) {\n  return selection.kind === 'InlineFragment';\n}\nfunction isIdValue(idObject) {\n  return idObject && idObject.type === 'id' && typeof idObject.generated === 'boolean';\n}\nfunction toIdValue(idConfig, generated) {\n  if (generated === void 0) {\n    generated = false;\n  }\n  return __assign({\n    type: 'id',\n    generated: generated\n  }, typeof idConfig === 'string' ? {\n    id: idConfig,\n    typename: undefined\n  } : idConfig);\n}\nfunction isJsonValue(jsonObject) {\n  return jsonObject != null && typeof jsonObject === 'object' && jsonObject.type === 'json';\n}\nfunction defaultValueFromVariable(node) {\n  throw process.env.NODE_ENV === \"production\" ? new InvariantError(18) : new InvariantError(\"Variable nodes are not supported by valueFromNode\");\n}\nfunction valueFromNode(node, onVariable) {\n  if (onVariable === void 0) {\n    onVariable = defaultValueFromVariable;\n  }\n  switch (node.kind) {\n    case 'Variable':\n      return onVariable(node);\n    case 'NullValue':\n      return null;\n    case 'IntValue':\n      return parseInt(node.value, 10);\n    case 'FloatValue':\n      return parseFloat(node.value);\n    case 'ListValue':\n      return node.values.map(function (v) {\n        return valueFromNode(v, onVariable);\n      });\n    case 'ObjectValue':\n      {\n        var value = {};\n        for (var _i = 0, _a = node.fields; _i < _a.length; _i++) {\n          var field = _a[_i];\n          value[field.name.value] = valueFromNode(field.value, onVariable);\n        }\n        return value;\n      }\n    default:\n      return node.value;\n  }\n}\nfunction getDirectiveInfoFromField(field, variables) {\n  if (field.directives && field.directives.length) {\n    var directiveObj_1 = {};\n    field.directives.forEach(function (directive) {\n      directiveObj_1[directive.name.value] = argumentsObjectFromField(directive, variables);\n    });\n    return directiveObj_1;\n  }\n  return null;\n}\nfunction shouldInclude(selection, variables) {\n  if (variables === void 0) {\n    variables = {};\n  }\n  return getInclusionDirectives(selection.directives).every(function (_a) {\n    var directive = _a.directive,\n      ifArgument = _a.ifArgument;\n    var evaledValue = false;\n    if (ifArgument.value.kind === 'Variable') {\n      evaledValue = variables[ifArgument.value.name.value];\n      process.env.NODE_ENV === \"production\" ? invariant(evaledValue !== void 0, 13) : invariant(evaledValue !== void 0, \"Invalid variable referenced in @\" + directive.name.value + \" directive.\");\n    } else {\n      evaledValue = ifArgument.value.value;\n    }\n    return directive.name.value === 'skip' ? !evaledValue : evaledValue;\n  });\n}\nfunction getDirectiveNames(doc) {\n  var names = [];\n  visit(doc, {\n    Directive: function (node) {\n      names.push(node.name.value);\n    }\n  });\n  return names;\n}\nfunction hasDirectives(names, doc) {\n  return getDirectiveNames(doc).some(function (name) {\n    return names.indexOf(name) > -1;\n  });\n}\nfunction hasClientExports(document) {\n  return document && hasDirectives(['client'], document) && hasDirectives(['export'], document);\n}\nfunction isInclusionDirective(_a) {\n  var value = _a.name.value;\n  return value === 'skip' || value === 'include';\n}\nfunction getInclusionDirectives(directives) {\n  return directives ? directives.filter(isInclusionDirective).map(function (directive) {\n    var directiveArguments = directive.arguments;\n    var directiveName = directive.name.value;\n    process.env.NODE_ENV === \"production\" ? invariant(directiveArguments && directiveArguments.length === 1, 14) : invariant(directiveArguments && directiveArguments.length === 1, \"Incorrect number of arguments for the @\" + directiveName + \" directive.\");\n    var ifArgument = directiveArguments[0];\n    process.env.NODE_ENV === \"production\" ? invariant(ifArgument.name && ifArgument.name.value === 'if', 15) : invariant(ifArgument.name && ifArgument.name.value === 'if', \"Invalid argument for the @\" + directiveName + \" directive.\");\n    var ifValue = ifArgument.value;\n    process.env.NODE_ENV === \"production\" ? invariant(ifValue && (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), 16) : invariant(ifValue && (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), \"Argument for the @\" + directiveName + \" directive must be a variable or a boolean value.\");\n    return {\n      directive: directive,\n      ifArgument: ifArgument\n    };\n  }) : [];\n}\nfunction getFragmentQueryDocument(document, fragmentName) {\n  var actualFragmentName = fragmentName;\n  var fragments = [];\n  document.definitions.forEach(function (definition) {\n    if (definition.kind === 'OperationDefinition') {\n      throw process.env.NODE_ENV === \"production\" ? new InvariantError(11) : new InvariantError(\"Found a \" + definition.operation + \" operation\" + (definition.name ? \" named '\" + definition.name.value + \"'\" : '') + \". \" + 'No operations are allowed when using a fragment as a query. Only fragments are allowed.');\n    }\n    if (definition.kind === 'FragmentDefinition') {\n      fragments.push(definition);\n    }\n  });\n  if (typeof actualFragmentName === 'undefined') {\n    process.env.NODE_ENV === \"production\" ? invariant(fragments.length === 1, 12) : invariant(fragments.length === 1, \"Found \" + fragments.length + \" fragments. `fragmentName` must be provided when there is not exactly 1 fragment.\");\n    actualFragmentName = fragments[0].name.value;\n  }\n  var query = __assign(__assign({}, document), {\n    definitions: __spreadArrays([{\n      kind: 'OperationDefinition',\n      operation: 'query',\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [{\n          kind: 'FragmentSpread',\n          name: {\n            kind: 'Name',\n            value: actualFragmentName\n          }\n        }]\n      }\n    }], document.definitions)\n  });\n  return query;\n}\nfunction assign(target) {\n  var sources = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    sources[_i - 1] = arguments[_i];\n  }\n  sources.forEach(function (source) {\n    if (typeof source === 'undefined' || source === null) {\n      return;\n    }\n    Object.keys(source).forEach(function (key) {\n      target[key] = source[key];\n    });\n  });\n  return target;\n}\nfunction getMutationDefinition(doc) {\n  checkDocument(doc);\n  var mutationDef = doc.definitions.filter(function (definition) {\n    return definition.kind === 'OperationDefinition' && definition.operation === 'mutation';\n  })[0];\n  process.env.NODE_ENV === \"production\" ? invariant(mutationDef, 1) : invariant(mutationDef, 'Must contain a mutation definition.');\n  return mutationDef;\n}\nfunction checkDocument(doc) {\n  process.env.NODE_ENV === \"production\" ? invariant(doc && doc.kind === 'Document', 2) : invariant(doc && doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n  var operations = doc.definitions.filter(function (d) {\n    return d.kind !== 'FragmentDefinition';\n  }).map(function (definition) {\n    if (definition.kind !== 'OperationDefinition') {\n      throw process.env.NODE_ENV === \"production\" ? new InvariantError(3) : new InvariantError(\"Schema type definitions not allowed in queries. Found: \\\"\" + definition.kind + \"\\\"\");\n    }\n    return definition;\n  });\n  process.env.NODE_ENV === \"production\" ? invariant(operations.length <= 1, 4) : invariant(operations.length <= 1, \"Ambiguous GraphQL document: contains \" + operations.length + \" operations\");\n  return doc;\n}\nfunction getOperationDefinition(doc) {\n  checkDocument(doc);\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === 'OperationDefinition';\n  })[0];\n}\nfunction getOperationDefinitionOrDie(document) {\n  var def = getOperationDefinition(document);\n  process.env.NODE_ENV === \"production\" ? invariant(def, 5) : invariant(def, \"GraphQL document is missing an operation\");\n  return def;\n}\nfunction getOperationName(doc) {\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === 'OperationDefinition' && definition.name;\n  }).map(function (x) {\n    return x.name.value;\n  })[0] || null;\n}\nfunction getFragmentDefinitions(doc) {\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === 'FragmentDefinition';\n  });\n}\nfunction getQueryDefinition(doc) {\n  var queryDef = getOperationDefinition(doc);\n  process.env.NODE_ENV === \"production\" ? invariant(queryDef && queryDef.operation === 'query', 6) : invariant(queryDef && queryDef.operation === 'query', 'Must contain a query definition.');\n  return queryDef;\n}\nfunction getFragmentDefinition(doc) {\n  process.env.NODE_ENV === \"production\" ? invariant(doc.kind === 'Document', 7) : invariant(doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n  process.env.NODE_ENV === \"production\" ? invariant(doc.definitions.length <= 1, 8) : invariant(doc.definitions.length <= 1, 'Fragment must have exactly one definition.');\n  var fragmentDef = doc.definitions[0];\n  process.env.NODE_ENV === \"production\" ? invariant(fragmentDef.kind === 'FragmentDefinition', 9) : invariant(fragmentDef.kind === 'FragmentDefinition', 'Must be a fragment definition.');\n  return fragmentDef;\n}\nfunction getMainDefinition(queryDoc) {\n  checkDocument(queryDoc);\n  var fragmentDefinition;\n  for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {\n    var definition = _a[_i];\n    if (definition.kind === 'OperationDefinition') {\n      var operation = definition.operation;\n      if (operation === 'query' || operation === 'mutation' || operation === 'subscription') {\n        return definition;\n      }\n    }\n    if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n      fragmentDefinition = definition;\n    }\n  }\n  if (fragmentDefinition) {\n    return fragmentDefinition;\n  }\n  throw process.env.NODE_ENV === \"production\" ? new InvariantError(10) : new InvariantError('Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.');\n}\nfunction createFragmentMap(fragments) {\n  if (fragments === void 0) {\n    fragments = [];\n  }\n  var symTable = {};\n  fragments.forEach(function (fragment) {\n    symTable[fragment.name.value] = fragment;\n  });\n  return symTable;\n}\nfunction getDefaultValues(definition) {\n  if (definition && definition.variableDefinitions && definition.variableDefinitions.length) {\n    var defaultValues = definition.variableDefinitions.filter(function (_a) {\n      var defaultValue = _a.defaultValue;\n      return defaultValue;\n    }).map(function (_a) {\n      var variable = _a.variable,\n        defaultValue = _a.defaultValue;\n      var defaultValueObj = {};\n      valueToObjectRepresentation(defaultValueObj, variable.name, defaultValue);\n      return defaultValueObj;\n    });\n    return assign.apply(void 0, __spreadArrays([{}], defaultValues));\n  }\n  return {};\n}\nfunction variablesInOperation(operation) {\n  var names = new Set();\n  if (operation.variableDefinitions) {\n    for (var _i = 0, _a = operation.variableDefinitions; _i < _a.length; _i++) {\n      var definition = _a[_i];\n      names.add(definition.variable.name.value);\n    }\n  }\n  return names;\n}\nfunction filterInPlace(array, test, context) {\n  var target = 0;\n  array.forEach(function (elem, i) {\n    if (test.call(this, elem, i, array)) {\n      array[target++] = elem;\n    }\n  }, context);\n  array.length = target;\n  return array;\n}\nvar TYPENAME_FIELD = {\n  kind: 'Field',\n  name: {\n    kind: 'Name',\n    value: '__typename'\n  }\n};\nfunction isEmpty(op, fragments) {\n  return op.selectionSet.selections.every(function (selection) {\n    return selection.kind === 'FragmentSpread' && isEmpty(fragments[selection.name.value], fragments);\n  });\n}\nfunction nullIfDocIsEmpty(doc) {\n  return isEmpty(getOperationDefinition(doc) || getFragmentDefinition(doc), createFragmentMap(getFragmentDefinitions(doc))) ? null : doc;\n}\nfunction getDirectiveMatcher(directives) {\n  return function directiveMatcher(directive) {\n    return directives.some(function (dir) {\n      return dir.name && dir.name === directive.name.value || dir.test && dir.test(directive);\n    });\n  };\n}\nfunction removeDirectivesFromDocument(directives, doc) {\n  var variablesInUse = Object.create(null);\n  var variablesToRemove = [];\n  var fragmentSpreadsInUse = Object.create(null);\n  var fragmentSpreadsToRemove = [];\n  var modifiedDoc = nullIfDocIsEmpty(visit(doc, {\n    Variable: {\n      enter: function (node, _key, parent) {\n        if (parent.kind !== 'VariableDefinition') {\n          variablesInUse[node.name.value] = true;\n        }\n      }\n    },\n    Field: {\n      enter: function (node) {\n        if (directives && node.directives) {\n          var shouldRemoveField = directives.some(function (directive) {\n            return directive.remove;\n          });\n          if (shouldRemoveField && node.directives && node.directives.some(getDirectiveMatcher(directives))) {\n            if (node.arguments) {\n              node.arguments.forEach(function (arg) {\n                if (arg.value.kind === 'Variable') {\n                  variablesToRemove.push({\n                    name: arg.value.name.value\n                  });\n                }\n              });\n            }\n            if (node.selectionSet) {\n              getAllFragmentSpreadsFromSelectionSet(node.selectionSet).forEach(function (frag) {\n                fragmentSpreadsToRemove.push({\n                  name: frag.name.value\n                });\n              });\n            }\n            return null;\n          }\n        }\n      }\n    },\n    FragmentSpread: {\n      enter: function (node) {\n        fragmentSpreadsInUse[node.name.value] = true;\n      }\n    },\n    Directive: {\n      enter: function (node) {\n        if (getDirectiveMatcher(directives)(node)) {\n          return null;\n        }\n      }\n    }\n  }));\n  if (modifiedDoc && filterInPlace(variablesToRemove, function (v) {\n    return !variablesInUse[v.name];\n  }).length) {\n    modifiedDoc = removeArgumentsFromDocument(variablesToRemove, modifiedDoc);\n  }\n  if (modifiedDoc && filterInPlace(fragmentSpreadsToRemove, function (fs) {\n    return !fragmentSpreadsInUse[fs.name];\n  }).length) {\n    modifiedDoc = removeFragmentSpreadFromDocument(fragmentSpreadsToRemove, modifiedDoc);\n  }\n  return modifiedDoc;\n}\nfunction addTypenameToDocument(doc) {\n  return visit(checkDocument(doc), {\n    SelectionSet: {\n      enter: function (node, _key, parent) {\n        if (parent && parent.kind === 'OperationDefinition') {\n          return;\n        }\n        var selections = node.selections;\n        if (!selections) {\n          return;\n        }\n        var skip = selections.some(function (selection) {\n          return isField(selection) && (selection.name.value === '__typename' || selection.name.value.lastIndexOf('__', 0) === 0);\n        });\n        if (skip) {\n          return;\n        }\n        var field = parent;\n        if (isField(field) && field.directives && field.directives.some(function (d) {\n          return d.name.value === 'export';\n        })) {\n          return;\n        }\n        return __assign(__assign({}, node), {\n          selections: __spreadArrays(selections, [TYPENAME_FIELD])\n        });\n      }\n    }\n  });\n}\nvar connectionRemoveConfig = {\n  test: function (directive) {\n    var willRemove = directive.name.value === 'connection';\n    if (willRemove) {\n      if (!directive.arguments || !directive.arguments.some(function (arg) {\n        return arg.name.value === 'key';\n      })) {\n        process.env.NODE_ENV === \"production\" || invariant.warn('Removing an @connection directive even though it does not have a key. ' + 'You may want to use the key parameter to specify a store key.');\n      }\n    }\n    return willRemove;\n  }\n};\nfunction removeConnectionDirectiveFromDocument(doc) {\n  return removeDirectivesFromDocument([connectionRemoveConfig], checkDocument(doc));\n}\nfunction hasDirectivesInSelectionSet(directives, selectionSet, nestedCheck) {\n  if (nestedCheck === void 0) {\n    nestedCheck = true;\n  }\n  return selectionSet && selectionSet.selections && selectionSet.selections.some(function (selection) {\n    return hasDirectivesInSelection(directives, selection, nestedCheck);\n  });\n}\nfunction hasDirectivesInSelection(directives, selection, nestedCheck) {\n  if (nestedCheck === void 0) {\n    nestedCheck = true;\n  }\n  if (!isField(selection)) {\n    return true;\n  }\n  if (!selection.directives) {\n    return false;\n  }\n  return selection.directives.some(getDirectiveMatcher(directives)) || nestedCheck && hasDirectivesInSelectionSet(directives, selection.selectionSet, nestedCheck);\n}\nfunction getDirectivesFromDocument(directives, doc) {\n  checkDocument(doc);\n  var parentPath;\n  return nullIfDocIsEmpty(visit(doc, {\n    SelectionSet: {\n      enter: function (node, _key, _parent, path) {\n        var currentPath = path.join('-');\n        if (!parentPath || currentPath === parentPath || !currentPath.startsWith(parentPath)) {\n          if (node.selections) {\n            var selectionsWithDirectives = node.selections.filter(function (selection) {\n              return hasDirectivesInSelection(directives, selection);\n            });\n            if (hasDirectivesInSelectionSet(directives, node, false)) {\n              parentPath = currentPath;\n            }\n            return __assign(__assign({}, node), {\n              selections: selectionsWithDirectives\n            });\n          } else {\n            return null;\n          }\n        }\n      }\n    }\n  }));\n}\nfunction getArgumentMatcher(config) {\n  return function argumentMatcher(argument) {\n    return config.some(function (aConfig) {\n      return argument.value && argument.value.kind === 'Variable' && argument.value.name && (aConfig.name === argument.value.name.value || aConfig.test && aConfig.test(argument));\n    });\n  };\n}\nfunction removeArgumentsFromDocument(config, doc) {\n  var argMatcher = getArgumentMatcher(config);\n  return nullIfDocIsEmpty(visit(doc, {\n    OperationDefinition: {\n      enter: function (node) {\n        return __assign(__assign({}, node), {\n          variableDefinitions: node.variableDefinitions.filter(function (varDef) {\n            return !config.some(function (arg) {\n              return arg.name === varDef.variable.name.value;\n            });\n          })\n        });\n      }\n    },\n    Field: {\n      enter: function (node) {\n        var shouldRemoveField = config.some(function (argConfig) {\n          return argConfig.remove;\n        });\n        if (shouldRemoveField) {\n          var argMatchCount_1 = 0;\n          node.arguments.forEach(function (arg) {\n            if (argMatcher(arg)) {\n              argMatchCount_1 += 1;\n            }\n          });\n          if (argMatchCount_1 === 1) {\n            return null;\n          }\n        }\n      }\n    },\n    Argument: {\n      enter: function (node) {\n        if (argMatcher(node)) {\n          return null;\n        }\n      }\n    }\n  }));\n}\nfunction removeFragmentSpreadFromDocument(config, doc) {\n  function enter(node) {\n    if (config.some(function (def) {\n      return def.name === node.name.value;\n    })) {\n      return null;\n    }\n  }\n  return nullIfDocIsEmpty(visit(doc, {\n    FragmentSpread: {\n      enter: enter\n    },\n    FragmentDefinition: {\n      enter: enter\n    }\n  }));\n}\nfunction getAllFragmentSpreadsFromSelectionSet(selectionSet) {\n  var allFragments = [];\n  selectionSet.selections.forEach(function (selection) {\n    if ((isField(selection) || isInlineFragment(selection)) && selection.selectionSet) {\n      getAllFragmentSpreadsFromSelectionSet(selection.selectionSet).forEach(function (frag) {\n        return allFragments.push(frag);\n      });\n    } else if (selection.kind === 'FragmentSpread') {\n      allFragments.push(selection);\n    }\n  });\n  return allFragments;\n}\nfunction buildQueryFromSelectionSet(document) {\n  var definition = getMainDefinition(document);\n  var definitionOperation = definition.operation;\n  if (definitionOperation === 'query') {\n    return document;\n  }\n  var modifiedDoc = visit(document, {\n    OperationDefinition: {\n      enter: function (node) {\n        return __assign(__assign({}, node), {\n          operation: 'query'\n        });\n      }\n    }\n  });\n  return modifiedDoc;\n}\nfunction removeClientSetsFromDocument(document) {\n  checkDocument(document);\n  var modifiedDoc = removeDirectivesFromDocument([{\n    test: function (directive) {\n      return directive.name.value === 'client';\n    },\n    remove: true\n  }], document);\n  if (modifiedDoc) {\n    modifiedDoc = visit(modifiedDoc, {\n      FragmentDefinition: {\n        enter: function (node) {\n          if (node.selectionSet) {\n            var isTypenameOnly = node.selectionSet.selections.every(function (selection) {\n              return isField(selection) && selection.name.value === '__typename';\n            });\n            if (isTypenameOnly) {\n              return null;\n            }\n          }\n        }\n      }\n    });\n  }\n  return modifiedDoc;\n}\nvar canUseWeakMap = typeof WeakMap === 'function' && !(typeof navigator === 'object' && navigator.product === 'ReactNative');\nvar toString = Object.prototype.toString;\nfunction cloneDeep(value) {\n  return cloneDeepHelper(value, new Map());\n}\nfunction cloneDeepHelper(val, seen) {\n  switch (toString.call(val)) {\n    case \"[object Array]\":\n      {\n        if (seen.has(val)) return seen.get(val);\n        var copy_1 = val.slice(0);\n        seen.set(val, copy_1);\n        copy_1.forEach(function (child, i) {\n          copy_1[i] = cloneDeepHelper(child, seen);\n        });\n        return copy_1;\n      }\n    case \"[object Object]\":\n      {\n        if (seen.has(val)) return seen.get(val);\n        var copy_2 = Object.create(Object.getPrototypeOf(val));\n        seen.set(val, copy_2);\n        Object.keys(val).forEach(function (key) {\n          copy_2[key] = cloneDeepHelper(val[key], seen);\n        });\n        return copy_2;\n      }\n    default:\n      return val;\n  }\n}\nfunction getEnv() {\n  if (typeof process !== 'undefined' && process.env.NODE_ENV) {\n    return process.env.NODE_ENV;\n  }\n  return 'development';\n}\nfunction isEnv(env) {\n  return getEnv() === env;\n}\nfunction isProduction() {\n  return isEnv('production') === true;\n}\nfunction isDevelopment() {\n  return isEnv('development') === true;\n}\nfunction isTest() {\n  return isEnv('test') === true;\n}\nfunction tryFunctionOrLogError(f) {\n  try {\n    return f();\n  } catch (e) {\n    if (console.error) {\n      console.error(e);\n    }\n  }\n}\nfunction graphQLResultHasError(result) {\n  return result.errors && result.errors.length;\n}\nfunction deepFreeze(o) {\n  Object.freeze(o);\n  Object.getOwnPropertyNames(o).forEach(function (prop) {\n    if (o[prop] !== null && (typeof o[prop] === 'object' || typeof o[prop] === 'function') && !Object.isFrozen(o[prop])) {\n      deepFreeze(o[prop]);\n    }\n  });\n  return o;\n}\nfunction maybeDeepFreeze(obj) {\n  if (isDevelopment() || isTest()) {\n    var symbolIsPolyfilled = typeof Symbol === 'function' && typeof Symbol('') === 'string';\n    if (!symbolIsPolyfilled) {\n      return deepFreeze(obj);\n    }\n  }\n  return obj;\n}\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction mergeDeep() {\n  var sources = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    sources[_i] = arguments[_i];\n  }\n  return mergeDeepArray(sources);\n}\nfunction mergeDeepArray(sources) {\n  var target = sources[0] || {};\n  var count = sources.length;\n  if (count > 1) {\n    var pastCopies = [];\n    target = shallowCopyForMerge(target, pastCopies);\n    for (var i = 1; i < count; ++i) {\n      target = mergeHelper(target, sources[i], pastCopies);\n    }\n  }\n  return target;\n}\nfunction isObject(obj) {\n  return obj !== null && typeof obj === 'object';\n}\nfunction mergeHelper(target, source, pastCopies) {\n  if (isObject(source) && isObject(target)) {\n    if (Object.isExtensible && !Object.isExtensible(target)) {\n      target = shallowCopyForMerge(target, pastCopies);\n    }\n    Object.keys(source).forEach(function (sourceKey) {\n      var sourceValue = source[sourceKey];\n      if (hasOwnProperty.call(target, sourceKey)) {\n        var targetValue = target[sourceKey];\n        if (sourceValue !== targetValue) {\n          target[sourceKey] = mergeHelper(shallowCopyForMerge(targetValue, pastCopies), sourceValue, pastCopies);\n        }\n      } else {\n        target[sourceKey] = sourceValue;\n      }\n    });\n    return target;\n  }\n  return source;\n}\nfunction shallowCopyForMerge(value, pastCopies) {\n  if (value !== null && typeof value === 'object' && pastCopies.indexOf(value) < 0) {\n    if (Array.isArray(value)) {\n      value = value.slice(0);\n    } else {\n      value = __assign({\n        __proto__: Object.getPrototypeOf(value)\n      }, value);\n    }\n    pastCopies.push(value);\n  }\n  return value;\n}\nvar haveWarned = Object.create({});\nfunction warnOnceInDevelopment(msg, type) {\n  if (type === void 0) {\n    type = 'warn';\n  }\n  if (!isProduction() && !haveWarned[msg]) {\n    if (!isTest()) {\n      haveWarned[msg] = true;\n    }\n    if (type === 'error') {\n      console.error(msg);\n    } else {\n      console.warn(msg);\n    }\n  }\n}\nfunction stripSymbols(data) {\n  return JSON.parse(JSON.stringify(data));\n}\nexport { addTypenameToDocument, argumentsObjectFromField, assign, buildQueryFromSelectionSet, canUseWeakMap, checkDocument, cloneDeep, createFragmentMap, getDefaultValues, getDirectiveInfoFromField, getDirectiveNames, getDirectivesFromDocument, getEnv, getFragmentDefinition, getFragmentDefinitions, getFragmentQueryDocument, getInclusionDirectives, getMainDefinition, getMutationDefinition, getOperationDefinition, getOperationDefinitionOrDie, getOperationName, getQueryDefinition, getStoreKeyName, graphQLResultHasError, hasClientExports, hasDirectives, isDevelopment, isEnv, isField, isIdValue, isInlineFragment, isJsonValue, isNumberValue, isProduction, isScalarValue, isTest, maybeDeepFreeze, mergeDeep, mergeDeepArray, removeArgumentsFromDocument, removeClientSetsFromDocument, removeConnectionDirectiveFromDocument, removeDirectivesFromDocument, removeFragmentSpreadFromDocument, resultKeyNameFromField, shouldInclude, storeKeyNameFromField, stripSymbols, toIdValue, tryFunctionOrLogError, valueFromNode, valueToObjectRepresentation, variablesInOperation, warnOnceInDevelopment };","map":{"version":3,"names":["isScalarValue","value","indexOf","kind","isNumberValue","isStringValue","isBooleanValue","isIntValue","isFloatValue","isVariable","isObjectValue","isListValue","isEnumValue","isNullValue","valueToObjectRepresentation","argObj","name","variables","Number","nestedArgObj_1","fields","map","obj","variableValue","values","listValue","nestedArgArrayObj","process","env","NODE_ENV","InvariantError","storeKeyNameFromField","field","directivesObj","directives","forEach","directive","arguments","_a","length","getStoreKeyName","KNOWN_DIRECTIVES","fieldName","args","filterKeys","sort","queryArgs_1","filteredArgs_1","key","JSON","stringify","completeFieldName","stringifiedArgs","Object","keys","argumentsObjectFromField","argObj_1","resultKeyNameFromField","alias","isField","selection","isInlineFragment","isIdValue","idObject","type","generated","toIdValue","idConfig","__assign","id","typename","undefined","isJsonValue","jsonObject","defaultValueFromVariable","node","valueFromNode","onVariable","parseInt","parseFloat","v","_i","getDirectiveInfoFromField","directiveObj_1","shouldInclude","getInclusionDirectives","every","ifArgument","evaledValue","invariant","getDirectiveNames","doc","names","visit","Directive","push","hasDirectives","some","hasClientExports","document","isInclusionDirective","filter","directiveArguments","directiveName","ifValue","getFragmentQueryDocument","fragmentName","actualFragmentName","fragments","definitions","definition","operation","query","__spreadArrays","selectionSet","selections","assign","target","sources","source","getMutationDefinition","checkDocument","mutationDef","operations","d","getOperationDefinition","getOperationDefinitionOrDie","def","getOperationName","x","getFragmentDefinitions","getQueryDefinition","queryDef","getFragmentDefinition","fragmentDef","getMainDefinition","queryDoc","fragmentDefinition","createFragmentMap","symTable","fragment","getDefaultValues","variableDefinitions","defaultValues","defaultValue","variable","defaultValueObj","apply","variablesInOperation","Set","add","filterInPlace","array","test","context","elem","i","call","TYPENAME_FIELD","isEmpty","op","nullIfDocIsEmpty","getDirectiveMatcher","directiveMatcher","dir","removeDirectivesFromDocument","variablesInUse","create","variablesToRemove","fragmentSpreadsInUse","fragmentSpreadsToRemove","modifiedDoc","Variable","enter","_key","parent","Field","shouldRemoveField","remove","arg","getAllFragmentSpreadsFromSelectionSet","frag","FragmentSpread","removeArgumentsFromDocument","fs","removeFragmentSpreadFromDocument","addTypenameToDocument","SelectionSet","skip","lastIndexOf","connectionRemoveConfig","willRemove","warn","removeConnectionDirectiveFromDocument","hasDirectivesInSelectionSet","nestedCheck","hasDirectivesInSelection","getDirectivesFromDocument","parentPath","_parent","path","currentPath","join","startsWith","selectionsWithDirectives","getArgumentMatcher","config","argumentMatcher","argument","aConfig","argMatcher","OperationDefinition","varDef","argConfig","argMatchCount_1","Argument","FragmentDefinition","allFragments","buildQueryFromSelectionSet","definitionOperation","removeClientSetsFromDocument","isTypenameOnly","canUseWeakMap","WeakMap","navigator","product","toString","prototype","cloneDeep","cloneDeepHelper","Map","val","seen","has","get","copy_1","slice","set","child","copy_2","getPrototypeOf","getEnv","isEnv","isProduction","isDevelopment","isTest","tryFunctionOrLogError","f","e","console","error","graphQLResultHasError","result","errors","deepFreeze","o","freeze","getOwnPropertyNames","prop","isFrozen","maybeDeepFreeze","symbolIsPolyfilled","Symbol","hasOwnProperty","mergeDeep","mergeDeepArray","count","pastCopies","shallowCopyForMerge","mergeHelper","isObject","isExtensible","sourceKey","sourceValue","targetValue","Array","isArray","__proto__","haveWarned","warnOnceInDevelopment","msg","stripSymbols","data","parse"],"sources":["C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\apollo-utilities\\src\\storeUtils.ts","C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\apollo-utilities\\src\\directives.ts","C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\apollo-utilities\\src\\fragments.ts","C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\apollo-utilities\\src\\util\\assign.ts","C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\apollo-utilities\\src\\getFromAST.ts","C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\apollo-utilities\\src\\util\\filterInPlace.ts","C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\apollo-utilities\\src\\transform.ts","C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\apollo-utilities\\src\\util\\canUse.ts","C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\apollo-utilities\\src\\util\\cloneDeep.ts","C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\apollo-utilities\\src\\util\\environment.ts","C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\apollo-utilities\\src\\util\\errorHandling.ts","C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\apollo-utilities\\src\\util\\maybeDeepFreeze.ts","C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\apollo-utilities\\src\\util\\mergeDeep.ts","C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\apollo-utilities\\src\\util\\warnOnce.ts","C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\apollo-utilities\\src\\util\\stripSymbols.ts"],"sourcesContent":["import {\n  DirectiveNode,\n  FieldNode,\n  IntValueNode,\n  FloatValueNode,\n  StringValueNode,\n  BooleanValueNode,\n  ObjectValueNode,\n  ListValueNode,\n  EnumValueNode,\n  NullValueNode,\n  VariableNode,\n  InlineFragmentNode,\n  ValueNode,\n  SelectionNode,\n  NameNode,\n} from 'graphql';\n\nimport stringify from 'fast-json-stable-stringify';\nimport { InvariantError } from 'ts-invariant';\n\nexport interface IdValue {\n  type: 'id';\n  id: string;\n  generated: boolean;\n  typename: string | undefined;\n}\n\nexport interface JsonValue {\n  type: 'json';\n  json: any;\n}\n\nexport type ListValue = Array<null | IdValue>;\n\nexport type StoreValue =\n  | number\n  | string\n  | string[]\n  | IdValue\n  | ListValue\n  | JsonValue\n  | null\n  | undefined\n  | void\n  | Object;\n\nexport type ScalarValue = StringValueNode | BooleanValueNode | EnumValueNode;\n\nexport function isScalarValue(value: ValueNode): value is ScalarValue {\n  return ['StringValue', 'BooleanValue', 'EnumValue'].indexOf(value.kind) > -1;\n}\n\nexport type NumberValue = IntValueNode | FloatValueNode;\n\nexport function isNumberValue(value: ValueNode): value is NumberValue {\n  return ['IntValue', 'FloatValue'].indexOf(value.kind) > -1;\n}\n\nfunction isStringValue(value: ValueNode): value is StringValueNode {\n  return value.kind === 'StringValue';\n}\n\nfunction isBooleanValue(value: ValueNode): value is BooleanValueNode {\n  return value.kind === 'BooleanValue';\n}\n\nfunction isIntValue(value: ValueNode): value is IntValueNode {\n  return value.kind === 'IntValue';\n}\n\nfunction isFloatValue(value: ValueNode): value is FloatValueNode {\n  return value.kind === 'FloatValue';\n}\n\nfunction isVariable(value: ValueNode): value is VariableNode {\n  return value.kind === 'Variable';\n}\n\nfunction isObjectValue(value: ValueNode): value is ObjectValueNode {\n  return value.kind === 'ObjectValue';\n}\n\nfunction isListValue(value: ValueNode): value is ListValueNode {\n  return value.kind === 'ListValue';\n}\n\nfunction isEnumValue(value: ValueNode): value is EnumValueNode {\n  return value.kind === 'EnumValue';\n}\n\nfunction isNullValue(value: ValueNode): value is NullValueNode {\n  return value.kind === 'NullValue';\n}\n\nexport function valueToObjectRepresentation(\n  argObj: any,\n  name: NameNode,\n  value: ValueNode,\n  variables?: Object,\n) {\n  if (isIntValue(value) || isFloatValue(value)) {\n    argObj[name.value] = Number(value.value);\n  } else if (isBooleanValue(value) || isStringValue(value)) {\n    argObj[name.value] = value.value;\n  } else if (isObjectValue(value)) {\n    const nestedArgObj = {};\n    value.fields.map(obj =>\n      valueToObjectRepresentation(nestedArgObj, obj.name, obj.value, variables),\n    );\n    argObj[name.value] = nestedArgObj;\n  } else if (isVariable(value)) {\n    const variableValue = (variables || ({} as any))[value.name.value];\n    argObj[name.value] = variableValue;\n  } else if (isListValue(value)) {\n    argObj[name.value] = value.values.map(listValue => {\n      const nestedArgArrayObj = {};\n      valueToObjectRepresentation(\n        nestedArgArrayObj,\n        name,\n        listValue,\n        variables,\n      );\n      return (nestedArgArrayObj as any)[name.value];\n    });\n  } else if (isEnumValue(value)) {\n    argObj[name.value] = (value as EnumValueNode).value;\n  } else if (isNullValue(value)) {\n    argObj[name.value] = null;\n  } else {\n    throw new InvariantError(\n      `The inline argument \"${name.value}\" of kind \"${(value as any).kind}\"` +\n        'is not supported. Use variables instead of inline arguments to ' +\n        'overcome this limitation.',\n    );\n  }\n}\n\nexport function storeKeyNameFromField(\n  field: FieldNode,\n  variables?: Object,\n): string {\n  let directivesObj: any = null;\n  if (field.directives) {\n    directivesObj = {};\n    field.directives.forEach(directive => {\n      directivesObj[directive.name.value] = {};\n\n      if (directive.arguments) {\n        directive.arguments.forEach(({ name, value }) =>\n          valueToObjectRepresentation(\n            directivesObj[directive.name.value],\n            name,\n            value,\n            variables,\n          ),\n        );\n      }\n    });\n  }\n\n  let argObj: any = null;\n  if (field.arguments && field.arguments.length) {\n    argObj = {};\n    field.arguments.forEach(({ name, value }) =>\n      valueToObjectRepresentation(argObj, name, value, variables),\n    );\n  }\n\n  return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\n\nexport type Directives = {\n  [directiveName: string]: {\n    [argName: string]: any;\n  };\n};\n\nconst KNOWN_DIRECTIVES: string[] = [\n  'connection',\n  'include',\n  'skip',\n  'client',\n  'rest',\n  'export',\n];\n\nexport function getStoreKeyName(\n  fieldName: string,\n  args?: Object,\n  directives?: Directives,\n): string {\n  if (\n    directives &&\n    directives['connection'] &&\n    directives['connection']['key']\n  ) {\n    if (\n      directives['connection']['filter'] &&\n      (directives['connection']['filter'] as string[]).length > 0\n    ) {\n      const filterKeys = directives['connection']['filter']\n        ? (directives['connection']['filter'] as string[])\n        : [];\n      filterKeys.sort();\n\n      const queryArgs = args as { [key: string]: any };\n      const filteredArgs = {} as { [key: string]: any };\n      filterKeys.forEach(key => {\n        filteredArgs[key] = queryArgs[key];\n      });\n\n      return `${directives['connection']['key']}(${JSON.stringify(\n        filteredArgs,\n      )})`;\n    } else {\n      return directives['connection']['key'];\n    }\n  }\n\n  let completeFieldName: string = fieldName;\n\n  if (args) {\n    // We can't use `JSON.stringify` here since it's non-deterministic,\n    // and can lead to different store key names being created even though\n    // the `args` object used during creation has the same properties/values.\n    const stringifiedArgs: string = stringify(args);\n    completeFieldName += `(${stringifiedArgs})`;\n  }\n\n  if (directives) {\n    Object.keys(directives).forEach(key => {\n      if (KNOWN_DIRECTIVES.indexOf(key) !== -1) return;\n      if (directives[key] && Object.keys(directives[key]).length) {\n        completeFieldName += `@${key}(${JSON.stringify(directives[key])})`;\n      } else {\n        completeFieldName += `@${key}`;\n      }\n    });\n  }\n\n  return completeFieldName;\n}\n\nexport function argumentsObjectFromField(\n  field: FieldNode | DirectiveNode,\n  variables: Object,\n): Object {\n  if (field.arguments && field.arguments.length) {\n    const argObj: Object = {};\n    field.arguments.forEach(({ name, value }) =>\n      valueToObjectRepresentation(argObj, name, value, variables),\n    );\n    return argObj;\n  }\n\n  return null;\n}\n\nexport function resultKeyNameFromField(field: FieldNode): string {\n  return field.alias ? field.alias.value : field.name.value;\n}\n\nexport function isField(selection: SelectionNode): selection is FieldNode {\n  return selection.kind === 'Field';\n}\n\nexport function isInlineFragment(\n  selection: SelectionNode,\n): selection is InlineFragmentNode {\n  return selection.kind === 'InlineFragment';\n}\n\nexport function isIdValue(idObject: StoreValue): idObject is IdValue {\n  return idObject &&\n    (idObject as IdValue | JsonValue).type === 'id' &&\n    typeof (idObject as IdValue).generated === 'boolean';\n}\n\nexport type IdConfig = {\n  id: string;\n  typename: string | undefined;\n};\n\nexport function toIdValue(\n  idConfig: string | IdConfig,\n  generated = false,\n): IdValue {\n  return {\n    type: 'id',\n    generated,\n    ...(typeof idConfig === 'string'\n      ? { id: idConfig, typename: undefined }\n      : idConfig),\n  };\n}\n\nexport function isJsonValue(jsonObject: StoreValue): jsonObject is JsonValue {\n  return (\n    jsonObject != null &&\n    typeof jsonObject === 'object' &&\n    (jsonObject as IdValue | JsonValue).type === 'json'\n  );\n}\n\nfunction defaultValueFromVariable(node: VariableNode) {\n  throw new InvariantError(`Variable nodes are not supported by valueFromNode`);\n}\n\nexport type VariableValue = (node: VariableNode) => any;\n\n/**\n * Evaluate a ValueNode and yield its value in its natural JS form.\n */\nexport function valueFromNode(\n  node: ValueNode,\n  onVariable: VariableValue = defaultValueFromVariable,\n): any {\n  switch (node.kind) {\n    case 'Variable':\n      return onVariable(node);\n    case 'NullValue':\n      return null;\n    case 'IntValue':\n      return parseInt(node.value, 10);\n    case 'FloatValue':\n      return parseFloat(node.value);\n    case 'ListValue':\n      return node.values.map(v => valueFromNode(v, onVariable));\n    case 'ObjectValue': {\n      const value: { [key: string]: any } = {};\n      for (const field of node.fields) {\n        value[field.name.value] = valueFromNode(field.value, onVariable);\n      }\n      return value;\n    }\n    default:\n      return node.value;\n  }\n}\n","// Provides the methods that allow QueryManager to handle the `skip` and\n// `include` directives within GraphQL.\nimport {\n  FieldNode,\n  SelectionNode,\n  VariableNode,\n  BooleanValueNode,\n  DirectiveNode,\n  DocumentNode,\n  ArgumentNode,\n  ValueNode,\n} from 'graphql';\n\nimport { visit } from 'graphql/language/visitor';\n\nimport { invariant } from 'ts-invariant';\n\nimport { argumentsObjectFromField } from './storeUtils';\n\nexport type DirectiveInfo = {\n  [fieldName: string]: { [argName: string]: any };\n};\n\nexport function getDirectiveInfoFromField(\n  field: FieldNode,\n  variables: Object,\n): DirectiveInfo {\n  if (field.directives && field.directives.length) {\n    const directiveObj: DirectiveInfo = {};\n    field.directives.forEach((directive: DirectiveNode) => {\n      directiveObj[directive.name.value] = argumentsObjectFromField(\n        directive,\n        variables,\n      );\n    });\n    return directiveObj;\n  }\n  return null;\n}\n\nexport function shouldInclude(\n  selection: SelectionNode,\n  variables: { [name: string]: any } = {},\n): boolean {\n  return getInclusionDirectives(\n    selection.directives,\n  ).every(({ directive, ifArgument }) => {\n    let evaledValue: boolean = false;\n    if (ifArgument.value.kind === 'Variable') {\n      evaledValue = variables[(ifArgument.value as VariableNode).name.value];\n      invariant(\n        evaledValue !== void 0,\n        `Invalid variable referenced in @${directive.name.value} directive.`,\n      );\n    } else {\n      evaledValue = (ifArgument.value as BooleanValueNode).value;\n    }\n    return directive.name.value === 'skip' ? !evaledValue : evaledValue;\n  });\n}\n\nexport function getDirectiveNames(doc: DocumentNode) {\n  const names: string[] = [];\n\n  visit(doc, {\n    Directive(node) {\n      names.push(node.name.value);\n    },\n  });\n\n  return names;\n}\n\nexport function hasDirectives(names: string[], doc: DocumentNode) {\n  return getDirectiveNames(doc).some(\n    (name: string) => names.indexOf(name) > -1,\n  );\n}\n\nexport function hasClientExports(document: DocumentNode) {\n  return (\n    document &&\n    hasDirectives(['client'], document) &&\n    hasDirectives(['export'], document)\n  );\n}\n\nexport type InclusionDirectives = Array<{\n  directive: DirectiveNode;\n  ifArgument: ArgumentNode;\n}>;\n\nfunction isInclusionDirective({ name: { value } }: DirectiveNode): boolean {\n  return value === 'skip' || value === 'include';\n}\n\nexport function getInclusionDirectives(\n  directives: ReadonlyArray<DirectiveNode>,\n): InclusionDirectives {\n  return directives ? directives.filter(isInclusionDirective).map(directive => {\n    const directiveArguments = directive.arguments;\n    const directiveName = directive.name.value;\n\n    invariant(\n      directiveArguments && directiveArguments.length === 1,\n      `Incorrect number of arguments for the @${directiveName} directive.`,\n    );\n\n    const ifArgument = directiveArguments[0];\n    invariant(\n      ifArgument.name && ifArgument.name.value === 'if',\n      `Invalid argument for the @${directiveName} directive.`,\n    );\n\n    const ifValue: ValueNode = ifArgument.value;\n\n    // means it has to be a variable value if this is a valid @skip or @include directive\n    invariant(\n      ifValue &&\n        (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'),\n      `Argument for the @${directiveName} directive must be a variable or a boolean value.`,\n    );\n\n    return { directive, ifArgument };\n  }) : [];\n}\n\n","import { DocumentNode, FragmentDefinitionNode } from 'graphql';\nimport { invariant, InvariantError } from 'ts-invariant';\n\n/**\n * Returns a query document which adds a single query operation that only\n * spreads the target fragment inside of it.\n *\n * So for example a document of:\n *\n * ```graphql\n * fragment foo on Foo { a b c }\n * ```\n *\n * Turns into:\n *\n * ```graphql\n * { ...foo }\n *\n * fragment foo on Foo { a b c }\n * ```\n *\n * The target fragment will either be the only fragment in the document, or a\n * fragment specified by the provided `fragmentName`. If there is more than one\n * fragment, but a `fragmentName` was not defined then an error will be thrown.\n */\nexport function getFragmentQueryDocument(\n  document: DocumentNode,\n  fragmentName?: string,\n): DocumentNode {\n  let actualFragmentName = fragmentName;\n\n  // Build an array of all our fragment definitions that will be used for\n  // validations. We also do some validations on the other definitions in the\n  // document while building this list.\n  const fragments: Array<FragmentDefinitionNode> = [];\n  document.definitions.forEach(definition => {\n    // Throw an error if we encounter an operation definition because we will\n    // define our own operation definition later on.\n    if (definition.kind === 'OperationDefinition') {\n      throw new InvariantError(\n        `Found a ${definition.operation} operation${\n          definition.name ? ` named '${definition.name.value}'` : ''\n        }. ` +\n          'No operations are allowed when using a fragment as a query. Only fragments are allowed.',\n      );\n    }\n    // Add our definition to the fragments array if it is a fragment\n    // definition.\n    if (definition.kind === 'FragmentDefinition') {\n      fragments.push(definition);\n    }\n  });\n\n  // If the user did not give us a fragment name then let us try to get a\n  // name from a single fragment in the definition.\n  if (typeof actualFragmentName === 'undefined') {\n    invariant(\n      fragments.length === 1,\n      `Found ${\n        fragments.length\n      } fragments. \\`fragmentName\\` must be provided when there is not exactly 1 fragment.`,\n    );\n    actualFragmentName = fragments[0].name.value;\n  }\n\n  // Generate a query document with an operation that simply spreads the\n  // fragment inside of it.\n  const query: DocumentNode = {\n    ...document,\n    definitions: [\n      {\n        kind: 'OperationDefinition',\n        operation: 'query',\n        selectionSet: {\n          kind: 'SelectionSet',\n          selections: [\n            {\n              kind: 'FragmentSpread',\n              name: {\n                kind: 'Name',\n                value: actualFragmentName,\n              },\n            },\n          ],\n        },\n      },\n      ...document.definitions,\n    ],\n  };\n\n  return query;\n}\n","/**\n * Adds the properties of one or more source objects to a target object. Works exactly like\n * `Object.assign`, but as a utility to maintain support for IE 11.\n *\n * @see https://github.com/apollostack/apollo-client/pull/1009\n */\nexport function assign<A, B>(a: A, b: B): A & B;\nexport function assign<A, B, C>(a: A, b: B, c: C): A & B & C;\nexport function assign<A, B, C, D>(a: A, b: B, c: C, d: D): A & B & C & D;\nexport function assign<A, B, C, D, E>(\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n  e: E,\n): A & B & C & D & E;\nexport function assign(target: any, ...sources: Array<any>): any;\nexport function assign(\n  target: { [key: string]: any },\n  ...sources: Array<{ [key: string]: any }>\n): { [key: string]: any } {\n  sources.forEach(source => {\n    if (typeof source === 'undefined' || source === null) {\n      return;\n    }\n    Object.keys(source).forEach(key => {\n      target[key] = source[key];\n    });\n  });\n  return target;\n}\n","import {\n  DocumentNode,\n  OperationDefinitionNode,\n  FragmentDefinitionNode,\n  ValueNode,\n} from 'graphql';\n\nimport { invariant, InvariantError } from 'ts-invariant';\n\nimport { assign } from './util/assign';\n\nimport { valueToObjectRepresentation, JsonValue } from './storeUtils';\n\nexport function getMutationDefinition(\n  doc: DocumentNode,\n): OperationDefinitionNode {\n  checkDocument(doc);\n\n  let mutationDef: OperationDefinitionNode | null = doc.definitions.filter(\n    definition =>\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'mutation',\n  )[0] as OperationDefinitionNode;\n\n  invariant(mutationDef, 'Must contain a mutation definition.');\n\n  return mutationDef;\n}\n\n// Checks the document for errors and throws an exception if there is an error.\nexport function checkDocument(doc: DocumentNode) {\n  invariant(\n    doc && doc.kind === 'Document',\n    `Expecting a parsed GraphQL document. Perhaps you need to wrap the query \\\nstring in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql`,\n  );\n\n  const operations = doc.definitions\n    .filter(d => d.kind !== 'FragmentDefinition')\n    .map(definition => {\n      if (definition.kind !== 'OperationDefinition') {\n        throw new InvariantError(\n          `Schema type definitions not allowed in queries. Found: \"${\n            definition.kind\n          }\"`,\n        );\n      }\n      return definition;\n    });\n\n  invariant(\n    operations.length <= 1,\n    `Ambiguous GraphQL document: contains ${operations.length} operations`,\n  );\n\n  return doc;\n}\n\nexport function getOperationDefinition(\n  doc: DocumentNode,\n): OperationDefinitionNode | undefined {\n  checkDocument(doc);\n  return doc.definitions.filter(\n    definition => definition.kind === 'OperationDefinition',\n  )[0] as OperationDefinitionNode;\n}\n\nexport function getOperationDefinitionOrDie(\n  document: DocumentNode,\n): OperationDefinitionNode {\n  const def = getOperationDefinition(document);\n  invariant(def, `GraphQL document is missing an operation`);\n  return def;\n}\n\nexport function getOperationName(doc: DocumentNode): string | null {\n  return (\n    doc.definitions\n      .filter(\n        definition =>\n          definition.kind === 'OperationDefinition' && definition.name,\n      )\n      .map((x: OperationDefinitionNode) => x.name.value)[0] || null\n  );\n}\n\n// Returns the FragmentDefinitions from a particular document as an array\nexport function getFragmentDefinitions(\n  doc: DocumentNode,\n): FragmentDefinitionNode[] {\n  return doc.definitions.filter(\n    definition => definition.kind === 'FragmentDefinition',\n  ) as FragmentDefinitionNode[];\n}\n\nexport function getQueryDefinition(doc: DocumentNode): OperationDefinitionNode {\n  const queryDef = getOperationDefinition(doc) as OperationDefinitionNode;\n\n  invariant(\n    queryDef && queryDef.operation === 'query',\n    'Must contain a query definition.',\n  );\n\n  return queryDef;\n}\n\nexport function getFragmentDefinition(\n  doc: DocumentNode,\n): FragmentDefinitionNode {\n  invariant(\n    doc.kind === 'Document',\n    `Expecting a parsed GraphQL document. Perhaps you need to wrap the query \\\nstring in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql`,\n  );\n\n  invariant(\n    doc.definitions.length <= 1,\n    'Fragment must have exactly one definition.',\n  );\n\n  const fragmentDef = doc.definitions[0] as FragmentDefinitionNode;\n\n  invariant(\n    fragmentDef.kind === 'FragmentDefinition',\n    'Must be a fragment definition.',\n  );\n\n  return fragmentDef as FragmentDefinitionNode;\n}\n\n/**\n * Returns the first operation definition found in this document.\n * If no operation definition is found, the first fragment definition will be returned.\n * If no definitions are found, an error will be thrown.\n */\nexport function getMainDefinition(\n  queryDoc: DocumentNode,\n): OperationDefinitionNode | FragmentDefinitionNode {\n  checkDocument(queryDoc);\n\n  let fragmentDefinition;\n\n  for (let definition of queryDoc.definitions) {\n    if (definition.kind === 'OperationDefinition') {\n      const operation = (definition as OperationDefinitionNode).operation;\n      if (\n        operation === 'query' ||\n        operation === 'mutation' ||\n        operation === 'subscription'\n      ) {\n        return definition as OperationDefinitionNode;\n      }\n    }\n    if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n      // we do this because we want to allow multiple fragment definitions\n      // to precede an operation definition.\n      fragmentDefinition = definition as FragmentDefinitionNode;\n    }\n  }\n\n  if (fragmentDefinition) {\n    return fragmentDefinition;\n  }\n\n  throw new InvariantError(\n    'Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.',\n  );\n}\n\n/**\n * This is an interface that describes a map from fragment names to fragment definitions.\n */\nexport interface FragmentMap {\n  [fragmentName: string]: FragmentDefinitionNode;\n}\n\n// Utility function that takes a list of fragment definitions and makes a hash out of them\n// that maps the name of the fragment to the fragment definition.\nexport function createFragmentMap(\n  fragments: FragmentDefinitionNode[] = [],\n): FragmentMap {\n  const symTable: FragmentMap = {};\n  fragments.forEach(fragment => {\n    symTable[fragment.name.value] = fragment;\n  });\n\n  return symTable;\n}\n\nexport function getDefaultValues(\n  definition: OperationDefinitionNode | undefined,\n): { [key: string]: JsonValue } {\n  if (\n    definition &&\n    definition.variableDefinitions &&\n    definition.variableDefinitions.length\n  ) {\n    const defaultValues = definition.variableDefinitions\n      .filter(({ defaultValue }) => defaultValue)\n      .map(\n        ({ variable, defaultValue }): { [key: string]: JsonValue } => {\n          const defaultValueObj: { [key: string]: JsonValue } = {};\n          valueToObjectRepresentation(\n            defaultValueObj,\n            variable.name,\n            defaultValue as ValueNode,\n          );\n\n          return defaultValueObj;\n        },\n      );\n\n    return assign({}, ...defaultValues);\n  }\n\n  return {};\n}\n\n/**\n * Returns the names of all variables declared by the operation.\n */\nexport function variablesInOperation(\n  operation: OperationDefinitionNode,\n): Set<string> {\n  const names = new Set<string>();\n  if (operation.variableDefinitions) {\n    for (const definition of operation.variableDefinitions) {\n      names.add(definition.variable.name.value);\n    }\n  }\n\n  return names;\n}\n","export function filterInPlace<T>(\n  array: T[],\n  test: (elem: T) => boolean,\n  context?: any,\n): T[] {\n  let target = 0;\n  array.forEach(function (elem, i) {\n    if (test.call(this, elem, i, array)) {\n      array[target++] = elem;\n    }\n  }, context);\n  array.length = target;\n  return array;\n}\n","import {\n  DocumentNode,\n  SelectionNode,\n  SelectionSetNode,\n  OperationDefinitionNode,\n  FieldNode,\n  DirectiveNode,\n  FragmentDefinitionNode,\n  ArgumentNode,\n  FragmentSpreadNode,\n  VariableDefinitionNode,\n  VariableNode,\n} from 'graphql';\nimport { visit } from 'graphql/language/visitor';\n\nimport {\n  checkDocument,\n  getOperationDefinition,\n  getFragmentDefinition,\n  getFragmentDefinitions,\n  createFragmentMap,\n  FragmentMap,\n  getMainDefinition,\n} from './getFromAST';\nimport { filterInPlace } from './util/filterInPlace';\nimport { invariant } from 'ts-invariant';\nimport { isField, isInlineFragment } from './storeUtils';\n\nexport type RemoveNodeConfig<N> = {\n  name?: string;\n  test?: (node: N) => boolean;\n  remove?: boolean;\n};\n\nexport type GetNodeConfig<N> = {\n  name?: string;\n  test?: (node: N) => boolean;\n};\n\nexport type RemoveDirectiveConfig = RemoveNodeConfig<DirectiveNode>;\nexport type GetDirectiveConfig = GetNodeConfig<DirectiveNode>;\nexport type RemoveArgumentsConfig = RemoveNodeConfig<ArgumentNode>;\nexport type GetFragmentSpreadConfig = GetNodeConfig<FragmentSpreadNode>;\nexport type RemoveFragmentSpreadConfig = RemoveNodeConfig<FragmentSpreadNode>;\nexport type RemoveFragmentDefinitionConfig = RemoveNodeConfig<\n  FragmentDefinitionNode\n>;\nexport type RemoveVariableDefinitionConfig = RemoveNodeConfig<\n  VariableDefinitionNode\n>;\n\nconst TYPENAME_FIELD: FieldNode = {\n  kind: 'Field',\n  name: {\n    kind: 'Name',\n    value: '__typename',\n  },\n};\n\nfunction isEmpty(\n  op: OperationDefinitionNode | FragmentDefinitionNode,\n  fragments: FragmentMap,\n): boolean {\n  return op.selectionSet.selections.every(\n    selection =>\n      selection.kind === 'FragmentSpread' &&\n      isEmpty(fragments[selection.name.value], fragments),\n  );\n}\n\nfunction nullIfDocIsEmpty(doc: DocumentNode) {\n  return isEmpty(\n    getOperationDefinition(doc) || getFragmentDefinition(doc),\n    createFragmentMap(getFragmentDefinitions(doc)),\n  )\n    ? null\n    : doc;\n}\n\nfunction getDirectiveMatcher(\n  directives: (RemoveDirectiveConfig | GetDirectiveConfig)[],\n) {\n  return function directiveMatcher(directive: DirectiveNode) {\n    return directives.some(\n      dir =>\n        (dir.name && dir.name === directive.name.value) ||\n        (dir.test && dir.test(directive)),\n    );\n  };\n}\n\nexport function removeDirectivesFromDocument(\n  directives: RemoveDirectiveConfig[],\n  doc: DocumentNode,\n): DocumentNode | null {\n  const variablesInUse: Record<string, boolean> = Object.create(null);\n  let variablesToRemove: RemoveArgumentsConfig[] = [];\n\n  const fragmentSpreadsInUse: Record<string, boolean> = Object.create(null);\n  let fragmentSpreadsToRemove: RemoveFragmentSpreadConfig[] = [];\n\n  let modifiedDoc = nullIfDocIsEmpty(\n    visit(doc, {\n      Variable: {\n        enter(node, _key, parent) {\n          // Store each variable that's referenced as part of an argument\n          // (excluding operation definition variables), so we know which\n          // variables are being used. If we later want to remove a variable\n          // we'll fist check to see if it's being used, before continuing with\n          // the removal.\n          if (\n            (parent as VariableDefinitionNode).kind !== 'VariableDefinition'\n          ) {\n            variablesInUse[node.name.value] = true;\n          }\n        },\n      },\n\n      Field: {\n        enter(node) {\n          if (directives && node.directives) {\n            // If `remove` is set to true for a directive, and a directive match\n            // is found for a field, remove the field as well.\n            const shouldRemoveField = directives.some(\n              directive => directive.remove,\n            );\n\n            if (\n              shouldRemoveField &&\n              node.directives &&\n              node.directives.some(getDirectiveMatcher(directives))\n            ) {\n              if (node.arguments) {\n                // Store field argument variables so they can be removed\n                // from the operation definition.\n                node.arguments.forEach(arg => {\n                  if (arg.value.kind === 'Variable') {\n                    variablesToRemove.push({\n                      name: (arg.value as VariableNode).name.value,\n                    });\n                  }\n                });\n              }\n\n              if (node.selectionSet) {\n                // Store fragment spread names so they can be removed from the\n                // docuemnt.\n                getAllFragmentSpreadsFromSelectionSet(node.selectionSet).forEach(\n                  frag => {\n                    fragmentSpreadsToRemove.push({\n                      name: frag.name.value,\n                    });\n                  },\n                );\n              }\n\n              // Remove the field.\n              return null;\n            }\n          }\n        },\n      },\n\n      FragmentSpread: {\n        enter(node) {\n          // Keep track of referenced fragment spreads. This is used to\n          // determine if top level fragment definitions should be removed.\n          fragmentSpreadsInUse[node.name.value] = true;\n        },\n      },\n\n      Directive: {\n        enter(node) {\n          // If a matching directive is found, remove it.\n          if (getDirectiveMatcher(directives)(node)) {\n            return null;\n          }\n        },\n      },\n    }),\n  );\n\n  // If we've removed fields with arguments, make sure the associated\n  // variables are also removed from the rest of the document, as long as they\n  // aren't being used elsewhere.\n  if (\n    modifiedDoc &&\n    filterInPlace(variablesToRemove, v => !variablesInUse[v.name]).length\n  ) {\n    modifiedDoc = removeArgumentsFromDocument(variablesToRemove, modifiedDoc);\n  }\n\n  // If we've removed selection sets with fragment spreads, make sure the\n  // associated fragment definitions are also removed from the rest of the\n  // document, as long as they aren't being used elsewhere.\n  if (\n    modifiedDoc &&\n    filterInPlace(fragmentSpreadsToRemove, fs => !fragmentSpreadsInUse[fs.name])\n      .length\n  ) {\n    modifiedDoc = removeFragmentSpreadFromDocument(\n      fragmentSpreadsToRemove,\n      modifiedDoc,\n    );\n  }\n\n  return modifiedDoc;\n}\n\nexport function addTypenameToDocument(doc: DocumentNode): DocumentNode {\n  return visit(checkDocument(doc), {\n    SelectionSet: {\n      enter(node, _key, parent) {\n        // Don't add __typename to OperationDefinitions.\n        if (\n          parent &&\n          (parent as OperationDefinitionNode).kind === 'OperationDefinition'\n        ) {\n          return;\n        }\n\n        // No changes if no selections.\n        const { selections } = node;\n        if (!selections) {\n          return;\n        }\n\n        // If selections already have a __typename, or are part of an\n        // introspection query, do nothing.\n        const skip = selections.some(selection => {\n          return (\n            isField(selection) &&\n            (selection.name.value === '__typename' ||\n              selection.name.value.lastIndexOf('__', 0) === 0)\n          );\n        });\n        if (skip) {\n          return;\n        }\n\n        // If this SelectionSet is @export-ed as an input variable, it should\n        // not have a __typename field (see issue #4691).\n        const field = parent as FieldNode;\n        if (\n          isField(field) &&\n          field.directives &&\n          field.directives.some(d => d.name.value === 'export')\n        ) {\n          return;\n        }\n\n        // Create and return a new SelectionSet with a __typename Field.\n        return {\n          ...node,\n          selections: [...selections, TYPENAME_FIELD],\n        };\n      },\n    },\n  });\n}\n\nconst connectionRemoveConfig = {\n  test: (directive: DirectiveNode) => {\n    const willRemove = directive.name.value === 'connection';\n    if (willRemove) {\n      if (\n        !directive.arguments ||\n        !directive.arguments.some(arg => arg.name.value === 'key')\n      ) {\n        invariant.warn(\n          'Removing an @connection directive even though it does not have a key. ' +\n            'You may want to use the key parameter to specify a store key.',\n        );\n      }\n    }\n\n    return willRemove;\n  },\n};\n\nexport function removeConnectionDirectiveFromDocument(doc: DocumentNode) {\n  return removeDirectivesFromDocument(\n    [connectionRemoveConfig],\n    checkDocument(doc),\n  );\n}\n\nfunction hasDirectivesInSelectionSet(\n  directives: GetDirectiveConfig[],\n  selectionSet: SelectionSetNode,\n  nestedCheck = true,\n): boolean {\n  return (\n    selectionSet &&\n    selectionSet.selections &&\n    selectionSet.selections.some(selection =>\n      hasDirectivesInSelection(directives, selection, nestedCheck),\n    )\n  );\n}\n\nfunction hasDirectivesInSelection(\n  directives: GetDirectiveConfig[],\n  selection: SelectionNode,\n  nestedCheck = true,\n): boolean {\n  if (!isField(selection)) {\n    return true;\n  }\n\n  if (!selection.directives) {\n    return false;\n  }\n\n  return (\n    selection.directives.some(getDirectiveMatcher(directives)) ||\n    (nestedCheck &&\n      hasDirectivesInSelectionSet(\n        directives,\n        selection.selectionSet,\n        nestedCheck,\n      ))\n  );\n}\n\nexport function getDirectivesFromDocument(\n  directives: GetDirectiveConfig[],\n  doc: DocumentNode,\n): DocumentNode {\n  checkDocument(doc);\n\n  let parentPath: string;\n\n  return nullIfDocIsEmpty(\n    visit(doc, {\n      SelectionSet: {\n        enter(node, _key, _parent, path) {\n          const currentPath = path.join('-');\n\n          if (\n            !parentPath ||\n            currentPath === parentPath ||\n            !currentPath.startsWith(parentPath)\n          ) {\n            if (node.selections) {\n              const selectionsWithDirectives = node.selections.filter(\n                selection => hasDirectivesInSelection(directives, selection),\n              );\n\n              if (hasDirectivesInSelectionSet(directives, node, false)) {\n                parentPath = currentPath;\n              }\n\n              return {\n                ...node,\n                selections: selectionsWithDirectives,\n              };\n            } else {\n              return null;\n            }\n          }\n        },\n      },\n    }),\n  );\n}\n\nfunction getArgumentMatcher(config: RemoveArgumentsConfig[]) {\n  return function argumentMatcher(argument: ArgumentNode) {\n    return config.some(\n      (aConfig: RemoveArgumentsConfig) =>\n        argument.value &&\n        argument.value.kind === 'Variable' &&\n        argument.value.name &&\n        (aConfig.name === argument.value.name.value ||\n          (aConfig.test && aConfig.test(argument))),\n    );\n  };\n}\n\nexport function removeArgumentsFromDocument(\n  config: RemoveArgumentsConfig[],\n  doc: DocumentNode,\n): DocumentNode {\n  const argMatcher = getArgumentMatcher(config);\n\n  return nullIfDocIsEmpty(\n    visit(doc, {\n      OperationDefinition: {\n        enter(node) {\n          return {\n            ...node,\n            // Remove matching top level variables definitions.\n            variableDefinitions: node.variableDefinitions.filter(\n              varDef =>\n                !config.some(arg => arg.name === varDef.variable.name.value),\n            ),\n          };\n        },\n      },\n\n      Field: {\n        enter(node) {\n          // If `remove` is set to true for an argument, and an argument match\n          // is found for a field, remove the field as well.\n          const shouldRemoveField = config.some(argConfig => argConfig.remove);\n\n          if (shouldRemoveField) {\n            let argMatchCount = 0;\n            node.arguments.forEach(arg => {\n              if (argMatcher(arg)) {\n                argMatchCount += 1;\n              }\n            });\n            if (argMatchCount === 1) {\n              return null;\n            }\n          }\n        },\n      },\n\n      Argument: {\n        enter(node) {\n          // Remove all matching arguments.\n          if (argMatcher(node)) {\n            return null;\n          }\n        },\n      },\n    }),\n  );\n}\n\nexport function removeFragmentSpreadFromDocument(\n  config: RemoveFragmentSpreadConfig[],\n  doc: DocumentNode,\n): DocumentNode {\n  function enter(\n    node: FragmentSpreadNode | FragmentDefinitionNode,\n  ): null | void {\n    if (config.some(def => def.name === node.name.value)) {\n      return null;\n    }\n  }\n\n  return nullIfDocIsEmpty(\n    visit(doc, {\n      FragmentSpread: { enter },\n      FragmentDefinition: { enter },\n    }),\n  );\n}\n\nfunction getAllFragmentSpreadsFromSelectionSet(\n  selectionSet: SelectionSetNode,\n): FragmentSpreadNode[] {\n  const allFragments: FragmentSpreadNode[] = [];\n\n  selectionSet.selections.forEach(selection => {\n    if (\n      (isField(selection) || isInlineFragment(selection)) &&\n      selection.selectionSet\n    ) {\n      getAllFragmentSpreadsFromSelectionSet(selection.selectionSet).forEach(\n        frag => allFragments.push(frag),\n      );\n    } else if (selection.kind === 'FragmentSpread') {\n      allFragments.push(selection);\n    }\n  });\n\n  return allFragments;\n}\n\n// If the incoming document is a query, return it as is. Otherwise, build a\n// new document containing a query operation based on the selection set\n// of the previous main operation.\nexport function buildQueryFromSelectionSet(\n  document: DocumentNode,\n): DocumentNode {\n  const definition = getMainDefinition(document);\n  const definitionOperation = (<OperationDefinitionNode>definition).operation;\n\n  if (definitionOperation === 'query') {\n    // Already a query, so return the existing document.\n    return document;\n  }\n\n  // Build a new query using the selection set of the main operation.\n  const modifiedDoc = visit(document, {\n    OperationDefinition: {\n      enter(node) {\n        return {\n          ...node,\n          operation: 'query',\n        };\n      },\n    },\n  });\n  return modifiedDoc;\n}\n\n// Remove fields / selection sets that include an @client directive.\nexport function removeClientSetsFromDocument(\n  document: DocumentNode,\n): DocumentNode | null {\n  checkDocument(document);\n\n  let modifiedDoc = removeDirectivesFromDocument(\n    [\n      {\n        test: (directive: DirectiveNode) => directive.name.value === 'client',\n        remove: true,\n      },\n    ],\n    document,\n  );\n\n  // After a fragment definition has had its @client related document\n  // sets removed, if the only field it has left is a __typename field,\n  // remove the entire fragment operation to prevent it from being fired\n  // on the server.\n  if (modifiedDoc) {\n    modifiedDoc = visit(modifiedDoc, {\n      FragmentDefinition: {\n        enter(node) {\n          if (node.selectionSet) {\n            const isTypenameOnly = node.selectionSet.selections.every(\n              selection =>\n                isField(selection) && selection.name.value === '__typename',\n            );\n            if (isTypenameOnly) {\n              return null;\n            }\n          }\n        },\n      },\n    });\n  }\n\n  return modifiedDoc;\n}\n","export const canUseWeakMap = typeof WeakMap === 'function' && !(\n  typeof navigator === 'object' &&\n  navigator.product === 'ReactNative'\n);\n","const { toString } = Object.prototype;\n\n/**\n * Deeply clones a value to create a new instance.\n */\nexport function cloneDeep<T>(value: T): T {\n  return cloneDeepHelper(value, new Map());\n}\n\nfunction cloneDeepHelper<T>(val: T, seen: Map<any, any>): T {\n  switch (toString.call(val)) {\n  case \"[object Array]\": {\n    if (seen.has(val)) return seen.get(val);\n    const copy: T & any[] = (val as any).slice(0);\n    seen.set(val, copy);\n    copy.forEach(function (child, i) {\n      copy[i] = cloneDeepHelper(child, seen);\n    });\n    return copy;\n  }\n\n  case \"[object Object]\": {\n    if (seen.has(val)) return seen.get(val);\n    // High fidelity polyfills of Object.create and Object.getPrototypeOf are\n    // possible in all JS environments, so we will assume they exist/work.\n    const copy = Object.create(Object.getPrototypeOf(val));\n    seen.set(val, copy);\n    Object.keys(val).forEach(key => {\n      copy[key] = cloneDeepHelper((val as any)[key], seen);\n    });\n    return copy;\n  }\n\n  default:\n    return val;\n  }\n}\n","export function getEnv(): string | undefined {\n  if (typeof process !== 'undefined' && process.env.NODE_ENV) {\n    return process.env.NODE_ENV;\n  }\n\n  // default environment\n  return 'development';\n}\n\nexport function isEnv(env: string): boolean {\n  return getEnv() === env;\n}\n\nexport function isProduction(): boolean {\n  return isEnv('production') === true;\n}\n\nexport function isDevelopment(): boolean {\n  return isEnv('development') === true;\n}\n\nexport function isTest(): boolean {\n  return isEnv('test') === true;\n}\n","import { ExecutionResult } from 'graphql';\n\nexport function tryFunctionOrLogError(f: Function) {\n  try {\n    return f();\n  } catch (e) {\n    if (console.error) {\n      console.error(e);\n    }\n  }\n}\n\nexport function graphQLResultHasError(result: ExecutionResult) {\n  return result.errors && result.errors.length;\n}\n","import { isDevelopment, isTest } from './environment';\n\n// Taken (mostly) from https://github.com/substack/deep-freeze to avoid\n// import hassles with rollup.\nfunction deepFreeze(o: any) {\n  Object.freeze(o);\n\n  Object.getOwnPropertyNames(o).forEach(function(prop) {\n    if (\n      o[prop] !== null &&\n      (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\n      !Object.isFrozen(o[prop])\n    ) {\n      deepFreeze(o[prop]);\n    }\n  });\n\n  return o;\n}\n\nexport function maybeDeepFreeze(obj: any) {\n  if (isDevelopment() || isTest()) {\n    // Polyfilled Symbols potentially cause infinite / very deep recursion while deep freezing\n    // which is known to crash IE11 (https://github.com/apollographql/apollo-client/issues/3043).\n    const symbolIsPolyfilled =\n      typeof Symbol === 'function' && typeof Symbol('') === 'string';\n\n    if (!symbolIsPolyfilled) {\n      return deepFreeze(obj);\n    }\n  }\n  return obj;\n}\n","const { hasOwnProperty } = Object.prototype;\n\n// These mergeDeep and mergeDeepArray utilities merge any number of objects\n// together, sharing as much memory as possible with the source objects, while\n// remaining careful to avoid modifying any source objects.\n\n// Logically, the return type of mergeDeep should be the intersection of\n// all the argument types. The binary call signature is by far the most\n// common, but we support 0- through 5-ary as well. After that, the\n// resulting type is just the inferred array element type. Note to nerds:\n// there is a more clever way of doing this that converts the tuple type\n// first to a union type (easy enough: T[number]) and then converts the\n// union to an intersection type using distributive conditional type\n// inference, but that approach has several fatal flaws (boolean becomes\n// true & false, and the inferred type ends up as unknown in many cases),\n// in addition to being nearly impossible to explain/understand.\nexport type TupleToIntersection<T extends any[]> =\n  T extends [infer A] ? A :\n  T extends [infer A, infer B] ? A & B :\n  T extends [infer A, infer B, infer C] ? A & B & C :\n  T extends [infer A, infer B, infer C, infer D] ? A & B & C & D :\n  T extends [infer A, infer B, infer C, infer D, infer E] ? A & B & C & D & E :\n  T extends (infer U)[] ? U : any;\n\nexport function mergeDeep<T extends any[]>(\n  ...sources: T\n): TupleToIntersection<T> {\n  return mergeDeepArray(sources);\n}\n\n// In almost any situation where you could succeed in getting the\n// TypeScript compiler to infer a tuple type for the sources array, you\n// could just use mergeDeep instead of mergeDeepArray, so instead of\n// trying to convert T[] to an intersection type we just infer the array\n// element type, which works perfectly when the sources array has a\n// consistent element type.\nexport function mergeDeepArray<T>(sources: T[]): T {\n  let target = sources[0] || {} as T;\n  const count = sources.length;\n  if (count > 1) {\n    const pastCopies: any[] = [];\n    target = shallowCopyForMerge(target, pastCopies);\n    for (let i = 1; i < count; ++i) {\n      target = mergeHelper(target, sources[i], pastCopies);\n    }\n  }\n  return target;\n}\n\nfunction isObject(obj: any): obj is Record<string | number, any> {\n  return obj !== null && typeof obj === 'object';\n}\n\nfunction mergeHelper(\n  target: any,\n  source: any,\n  pastCopies: any[],\n) {\n  if (isObject(source) && isObject(target)) {\n    // In case the target has been frozen, make an extensible copy so that\n    // we can merge properties into the copy.\n    if (Object.isExtensible && !Object.isExtensible(target)) {\n      target = shallowCopyForMerge(target, pastCopies);\n    }\n\n    Object.keys(source).forEach(sourceKey => {\n      const sourceValue = source[sourceKey];\n      if (hasOwnProperty.call(target, sourceKey)) {\n        const targetValue = target[sourceKey];\n        if (sourceValue !== targetValue) {\n          // When there is a key collision, we need to make a shallow copy of\n          // target[sourceKey] so the merge does not modify any source objects.\n          // To avoid making unnecessary copies, we use a simple array to track\n          // past copies, since it's safe to modify copies created earlier in\n          // the merge. We use an array for pastCopies instead of a Map or Set,\n          // since the number of copies should be relatively small, and some\n          // Map/Set polyfills modify their keys.\n          target[sourceKey] = mergeHelper(\n            shallowCopyForMerge(targetValue, pastCopies),\n            sourceValue,\n            pastCopies,\n          );\n        }\n      } else {\n        // If there is no collision, the target can safely share memory with\n        // the source, and the recursion can terminate here.\n        target[sourceKey] = sourceValue;\n      }\n    });\n\n    return target;\n  }\n\n  // If source (or target) is not an object, let source replace target.\n  return source;\n}\n\nfunction shallowCopyForMerge<T>(value: T, pastCopies: any[]): T {\n  if (\n    value !== null &&\n    typeof value === 'object' &&\n    pastCopies.indexOf(value) < 0\n  ) {\n    if (Array.isArray(value)) {\n      value = (value as any).slice(0);\n    } else {\n      value = {\n        __proto__: Object.getPrototypeOf(value),\n        ...value,\n      };\n    }\n    pastCopies.push(value);\n  }\n  return value;\n}\n","import { isProduction, isTest } from './environment';\n\nconst haveWarned = Object.create({});\n\n/**\n * Print a warning only once in development.\n * In production no warnings are printed.\n * In test all warnings are printed.\n *\n * @param msg The warning message\n * @param type warn or error (will call console.warn or console.error)\n */\nexport function warnOnceInDevelopment(msg: string, type = 'warn') {\n  if (!isProduction() && !haveWarned[msg]) {\n    if (!isTest()) {\n      haveWarned[msg] = true;\n    }\n    if (type === 'error') {\n      console.error(msg);\n    } else {\n      console.warn(msg);\n    }\n  }\n}\n","/**\n * In order to make assertions easier, this function strips `symbol`'s from\n * the incoming data.\n *\n * This can be handy when running tests against `apollo-client` for example,\n * since it adds `symbol`'s to the data in the store. Jest's `toEqual`\n * function now covers `symbol`'s (https://github.com/facebook/jest/pull/3437),\n * which means all test data used in a `toEqual` comparison would also have to\n * include `symbol`'s, to pass. By stripping `symbol`'s from the cache data\n * we can compare against more simplified test data.\n */\nexport function stripSymbols<T>(data: T): T {\n  return JSON.parse(JSON.stringify(data));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}