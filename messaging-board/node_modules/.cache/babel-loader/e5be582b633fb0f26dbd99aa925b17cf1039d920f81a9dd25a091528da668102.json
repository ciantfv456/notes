{"ast":null,"code":"import { Slot } from '@wry/context';\nexport { asyncFromGen, bind as bindContext, noContext, setTimeout } from '@wry/context';\nfunction defaultDispose() {}\nvar Cache = /** @class */function () {\n  function Cache(max, dispose) {\n    if (max === void 0) {\n      max = Infinity;\n    }\n    if (dispose === void 0) {\n      dispose = defaultDispose;\n    }\n    this.max = max;\n    this.dispose = dispose;\n    this.map = new Map();\n    this.newest = null;\n    this.oldest = null;\n  }\n  Cache.prototype.has = function (key) {\n    return this.map.has(key);\n  };\n  Cache.prototype.get = function (key) {\n    var entry = this.getEntry(key);\n    return entry && entry.value;\n  };\n  Cache.prototype.getEntry = function (key) {\n    var entry = this.map.get(key);\n    if (entry && entry !== this.newest) {\n      var older = entry.older,\n        newer = entry.newer;\n      if (newer) {\n        newer.older = older;\n      }\n      if (older) {\n        older.newer = newer;\n      }\n      entry.older = this.newest;\n      entry.older.newer = entry;\n      entry.newer = null;\n      this.newest = entry;\n      if (entry === this.oldest) {\n        this.oldest = newer;\n      }\n    }\n    return entry;\n  };\n  Cache.prototype.set = function (key, value) {\n    var entry = this.getEntry(key);\n    if (entry) {\n      return entry.value = value;\n    }\n    entry = {\n      key: key,\n      value: value,\n      newer: null,\n      older: this.newest\n    };\n    if (this.newest) {\n      this.newest.newer = entry;\n    }\n    this.newest = entry;\n    this.oldest = this.oldest || entry;\n    this.map.set(key, entry);\n    return entry.value;\n  };\n  Cache.prototype.clean = function () {\n    while (this.oldest && this.map.size > this.max) {\n      this.delete(this.oldest.key);\n    }\n  };\n  Cache.prototype.delete = function (key) {\n    var entry = this.map.get(key);\n    if (entry) {\n      if (entry === this.newest) {\n        this.newest = entry.older;\n      }\n      if (entry === this.oldest) {\n        this.oldest = entry.newer;\n      }\n      if (entry.newer) {\n        entry.newer.older = entry.older;\n      }\n      if (entry.older) {\n        entry.older.newer = entry.newer;\n      }\n      this.map.delete(key);\n      this.dispose(entry.value, key);\n      return true;\n    }\n    return false;\n  };\n  return Cache;\n}();\nvar parentEntrySlot = new Slot();\nvar reusableEmptyArray = [];\nvar emptySetPool = [];\nvar POOL_TARGET_SIZE = 100;\n// Since this package might be used browsers, we should avoid using the\n// Node built-in assert module.\nfunction assert(condition, optionalMessage) {\n  if (!condition) {\n    throw new Error(optionalMessage || \"assertion failure\");\n  }\n}\nfunction valueIs(a, b) {\n  var len = a.length;\n  return (\n    // Unknown values are not equal to each other.\n    len > 0 &&\n    // Both values must be ordinary (or both exceptional) to be equal.\n    len === b.length &&\n    // The underlying value or exception must be the same.\n    a[len - 1] === b[len - 1]\n  );\n}\nfunction valueGet(value) {\n  switch (value.length) {\n    case 0:\n      throw new Error(\"unknown value\");\n    case 1:\n      return value[0];\n    case 2:\n      throw value[1];\n  }\n}\nfunction valueCopy(value) {\n  return value.slice(0);\n}\nvar Entry = /** @class */function () {\n  function Entry(fn, args) {\n    this.fn = fn;\n    this.args = args;\n    this.parents = new Set();\n    this.childValues = new Map();\n    // When this Entry has children that are dirty, this property becomes\n    // a Set containing other Entry objects, borrowed from emptySetPool.\n    // When the set becomes empty, it gets recycled back to emptySetPool.\n    this.dirtyChildren = null;\n    this.dirty = true;\n    this.recomputing = false;\n    this.value = [];\n    ++Entry.count;\n  }\n  // This is the most important method of the Entry API, because it\n  // determines whether the cached this.value can be returned immediately,\n  // or must be recomputed. The overall performance of the caching system\n  // depends on the truth of the following observations: (1) this.dirty is\n  // usually false, (2) this.dirtyChildren is usually null/empty, and thus\n  // (3) valueGet(this.value) is usually returned without recomputation.\n  Entry.prototype.recompute = function () {\n    assert(!this.recomputing, \"already recomputing\");\n    if (!rememberParent(this) && maybeReportOrphan(this)) {\n      // The recipient of the entry.reportOrphan callback decided to dispose\n      // of this orphan entry by calling entry.dispose(), so we don't need to\n      // (and should not) proceed with the recomputation.\n      return void 0;\n    }\n    return mightBeDirty(this) ? reallyRecompute(this) : valueGet(this.value);\n  };\n  Entry.prototype.setDirty = function () {\n    if (this.dirty) return;\n    this.dirty = true;\n    this.value.length = 0;\n    reportDirty(this);\n    // We can go ahead and unsubscribe here, since any further dirty\n    // notifications we receive will be redundant, and unsubscribing may\n    // free up some resources, e.g. file watchers.\n    maybeUnsubscribe(this);\n  };\n  Entry.prototype.dispose = function () {\n    var _this = this;\n    forgetChildren(this).forEach(maybeReportOrphan);\n    maybeUnsubscribe(this);\n    // Because this entry has been kicked out of the cache (in index.js),\n    // we've lost the ability to find out if/when this entry becomes dirty,\n    // whether that happens through a subscription, because of a direct call\n    // to entry.setDirty(), or because one of its children becomes dirty.\n    // Because of this loss of future information, we have to assume the\n    // worst (that this entry might have become dirty very soon), so we must\n    // immediately mark this entry's parents as dirty. Normally we could\n    // just call entry.setDirty() rather than calling parent.setDirty() for\n    // each parent, but that would leave this entry in parent.childValues\n    // and parent.dirtyChildren, which would prevent the child from being\n    // truly forgotten.\n    this.parents.forEach(function (parent) {\n      parent.setDirty();\n      forgetChild(parent, _this);\n    });\n  };\n  Entry.count = 0;\n  return Entry;\n}();\nfunction rememberParent(child) {\n  var parent = parentEntrySlot.getValue();\n  if (parent) {\n    child.parents.add(parent);\n    if (!parent.childValues.has(child)) {\n      parent.childValues.set(child, []);\n    }\n    if (mightBeDirty(child)) {\n      reportDirtyChild(parent, child);\n    } else {\n      reportCleanChild(parent, child);\n    }\n    return parent;\n  }\n}\nfunction reallyRecompute(entry) {\n  // Since this recomputation is likely to re-remember some of this\n  // entry's children, we forget our children here but do not call\n  // maybeReportOrphan until after the recomputation finishes.\n  var originalChildren = forgetChildren(entry);\n  // Set entry as the parent entry while calling recomputeNewValue(entry).\n  parentEntrySlot.withValue(entry, recomputeNewValue, [entry]);\n  if (maybeSubscribe(entry)) {\n    // If we successfully recomputed entry.value and did not fail to\n    // (re)subscribe, then this Entry is no longer explicitly dirty.\n    setClean(entry);\n  }\n  // Now that we've had a chance to re-remember any children that were\n  // involved in the recomputation, we can safely report any orphan\n  // children that remain.\n  originalChildren.forEach(maybeReportOrphan);\n  return valueGet(entry.value);\n}\nfunction recomputeNewValue(entry) {\n  entry.recomputing = true;\n  // Set entry.value as unknown.\n  entry.value.length = 0;\n  try {\n    // If entry.fn succeeds, entry.value will become a normal Value.\n    entry.value[0] = entry.fn.apply(null, entry.args);\n  } catch (e) {\n    // If entry.fn throws, entry.value will become exceptional.\n    entry.value[1] = e;\n  }\n  // Either way, this line is always reached.\n  entry.recomputing = false;\n}\nfunction mightBeDirty(entry) {\n  return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);\n}\nfunction setClean(entry) {\n  entry.dirty = false;\n  if (mightBeDirty(entry)) {\n    // This Entry may still have dirty children, in which case we can't\n    // let our parents know we're clean just yet.\n    return;\n  }\n  reportClean(entry);\n}\nfunction reportDirty(child) {\n  child.parents.forEach(function (parent) {\n    return reportDirtyChild(parent, child);\n  });\n}\nfunction reportClean(child) {\n  child.parents.forEach(function (parent) {\n    return reportCleanChild(parent, child);\n  });\n}\n// Let a parent Entry know that one of its children may be dirty.\nfunction reportDirtyChild(parent, child) {\n  // Must have called rememberParent(child) before calling\n  // reportDirtyChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(mightBeDirty(child));\n  if (!parent.dirtyChildren) {\n    parent.dirtyChildren = emptySetPool.pop() || new Set();\n  } else if (parent.dirtyChildren.has(child)) {\n    // If we already know this child is dirty, then we must have already\n    // informed our own parents that we are dirty, so we can terminate\n    // the recursion early.\n    return;\n  }\n  parent.dirtyChildren.add(child);\n  reportDirty(parent);\n}\n// Let a parent Entry know that one of its children is no longer dirty.\nfunction reportCleanChild(parent, child) {\n  // Must have called rememberChild(child) before calling\n  // reportCleanChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(!mightBeDirty(child));\n  var childValue = parent.childValues.get(child);\n  if (childValue.length === 0) {\n    parent.childValues.set(child, valueCopy(child.value));\n  } else if (!valueIs(childValue, child.value)) {\n    parent.setDirty();\n  }\n  removeDirtyChild(parent, child);\n  if (mightBeDirty(parent)) {\n    return;\n  }\n  reportClean(parent);\n}\nfunction removeDirtyChild(parent, child) {\n  var dc = parent.dirtyChildren;\n  if (dc) {\n    dc.delete(child);\n    if (dc.size === 0) {\n      if (emptySetPool.length < POOL_TARGET_SIZE) {\n        emptySetPool.push(dc);\n      }\n      parent.dirtyChildren = null;\n    }\n  }\n}\n// If the given entry has a reportOrphan method, and no remaining parents,\n// call entry.reportOrphan and return true iff it returns true. The\n// reportOrphan function should return true to indicate entry.dispose()\n// has been called, and the entry has been removed from any other caches\n// (see index.js for the only current example).\nfunction maybeReportOrphan(entry) {\n  return entry.parents.size === 0 && typeof entry.reportOrphan === \"function\" && entry.reportOrphan() === true;\n}\n// Removes all children from this entry and returns an array of the\n// removed children.\nfunction forgetChildren(parent) {\n  var children = reusableEmptyArray;\n  if (parent.childValues.size > 0) {\n    children = [];\n    parent.childValues.forEach(function (_value, child) {\n      forgetChild(parent, child);\n      children.push(child);\n    });\n  }\n  // After we forget all our children, this.dirtyChildren must be empty\n  // and therefore must have been reset to null.\n  assert(parent.dirtyChildren === null);\n  return children;\n}\nfunction forgetChild(parent, child) {\n  child.parents.delete(parent);\n  parent.childValues.delete(child);\n  removeDirtyChild(parent, child);\n}\nfunction maybeSubscribe(entry) {\n  if (typeof entry.subscribe === \"function\") {\n    try {\n      maybeUnsubscribe(entry); // Prevent double subscriptions.\n      entry.unsubscribe = entry.subscribe.apply(null, entry.args);\n    } catch (e) {\n      // If this Entry has a subscribe function and it threw an exception\n      // (or an unsubscribe function it previously returned now throws),\n      // return false to indicate that we were not able to subscribe (or\n      // unsubscribe), and this Entry should remain dirty.\n      entry.setDirty();\n      return false;\n    }\n  }\n  // Returning true indicates either that there was no entry.subscribe\n  // function or that it succeeded.\n  return true;\n}\nfunction maybeUnsubscribe(entry) {\n  var unsubscribe = entry.unsubscribe;\n  if (typeof unsubscribe === \"function\") {\n    entry.unsubscribe = void 0;\n    unsubscribe();\n  }\n}\n\n// A trie data structure that holds object keys weakly, yet can also hold\n// non-object keys, unlike the native `WeakMap`.\nvar KeyTrie = /** @class */function () {\n  function KeyTrie(weakness) {\n    this.weakness = weakness;\n  }\n  KeyTrie.prototype.lookup = function () {\n    var array = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      array[_i] = arguments[_i];\n    }\n    return this.lookupArray(array);\n  };\n  KeyTrie.prototype.lookupArray = function (array) {\n    var node = this;\n    array.forEach(function (key) {\n      return node = node.getChildTrie(key);\n    });\n    return node.data || (node.data = Object.create(null));\n  };\n  KeyTrie.prototype.getChildTrie = function (key) {\n    var map = this.weakness && isObjRef(key) ? this.weak || (this.weak = new WeakMap()) : this.strong || (this.strong = new Map());\n    var child = map.get(key);\n    if (!child) map.set(key, child = new KeyTrie(this.weakness));\n    return child;\n  };\n  return KeyTrie;\n}();\nfunction isObjRef(value) {\n  switch (typeof value) {\n    case \"object\":\n      if (value === null) break;\n    // Fall through to return true...\n    case \"function\":\n      return true;\n  }\n  return false;\n}\n\n// The defaultMakeCacheKey function is remarkably powerful, because it gives\n// a unique object for any shallow-identical list of arguments. If you need\n// to implement a custom makeCacheKey function, you may find it helpful to\n// delegate the final work to defaultMakeCacheKey, which is why we export it\n// here. However, you may want to avoid defaultMakeCacheKey if your runtime\n// does not support WeakMap, or you have the ability to return a string key.\n// In those cases, just write your own custom makeCacheKey functions.\nvar keyTrie = new KeyTrie(typeof WeakMap === \"function\");\nfunction defaultMakeCacheKey() {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  return keyTrie.lookupArray(args);\n}\nvar caches = new Set();\nfunction wrap(originalFunction, options) {\n  if (options === void 0) {\n    options = Object.create(null);\n  }\n  var cache = new Cache(options.max || Math.pow(2, 16), function (entry) {\n    return entry.dispose();\n  });\n  var disposable = !!options.disposable;\n  var makeCacheKey = options.makeCacheKey || defaultMakeCacheKey;\n  function optimistic() {\n    if (disposable && !parentEntrySlot.hasValue()) {\n      // If there's no current parent computation, and this wrapped\n      // function is disposable (meaning we don't care about entry.value,\n      // just dependency tracking), then we can short-cut everything else\n      // in this function, because entry.recompute() is going to recycle\n      // the entry object without recomputing anything, anyway.\n      return void 0;\n    }\n    var key = makeCacheKey.apply(null, arguments);\n    if (key === void 0) {\n      return originalFunction.apply(null, arguments);\n    }\n    var args = Array.prototype.slice.call(arguments);\n    var entry = cache.get(key);\n    if (entry) {\n      entry.args = args;\n    } else {\n      entry = new Entry(originalFunction, args);\n      cache.set(key, entry);\n      entry.subscribe = options.subscribe;\n      if (disposable) {\n        entry.reportOrphan = function () {\n          return cache.delete(key);\n        };\n      }\n    }\n    var value = entry.recompute();\n    // Move this entry to the front of the least-recently used queue,\n    // since we just finished computing its value.\n    cache.set(key, entry);\n    caches.add(cache);\n    // Clean up any excess entries in the cache, but only if there is no\n    // active parent entry, meaning we're not in the middle of a larger\n    // computation that might be flummoxed by the cleaning.\n    if (!parentEntrySlot.hasValue()) {\n      caches.forEach(function (cache) {\n        return cache.clean();\n      });\n      caches.clear();\n    }\n    // If options.disposable is truthy, the caller of wrap is telling us\n    // they don't care about the result of entry.recompute(), so we should\n    // avoid returning the value, so it won't be accidentally used.\n    return disposable ? void 0 : value;\n  }\n  optimistic.dirty = function () {\n    var key = makeCacheKey.apply(null, arguments);\n    var child = key !== void 0 && cache.get(key);\n    if (child) {\n      child.setDirty();\n    }\n  };\n  return optimistic;\n}\nexport { KeyTrie, defaultMakeCacheKey, wrap };","map":{"version":3,"names":["defaultDispose","Cache","max","dispose","Infinity","map","Map","newest","oldest","prototype","has","key","get","entry","getEntry","value","older","newer","set","clean","size","delete","parentEntrySlot","Slot","reusableEmptyArray","emptySetPool","POOL_TARGET_SIZE","assert","condition","optionalMessage","Error","valueIs","a","b","len","length","valueGet","valueCopy","slice","Entry","fn","args","parents","Set","childValues","dirtyChildren","dirty","recomputing","count","recompute","rememberParent","maybeReportOrphan","mightBeDirty","reallyRecompute","setDirty","reportDirty","maybeUnsubscribe","_this","forgetChildren","forEach","parent","forgetChild","child","getValue","add","reportDirtyChild","reportCleanChild","originalChildren","withValue","recomputeNewValue","maybeSubscribe","setClean","apply","e","reportClean","pop","childValue","removeDirtyChild","dc","push","reportOrphan","children","_value","subscribe","unsubscribe","KeyTrie","weakness","lookup","array","_i","arguments","lookupArray","node","getChildTrie","data","Object","create","isObjRef","weak","WeakMap","strong","keyTrie","defaultMakeCacheKey","caches","wrap","originalFunction","options","cache","Math","pow","disposable","makeCacheKey","optimistic","hasValue","Array","call","clear"],"sources":["C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\optimism\\src\\cache.ts","C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\optimism\\src\\context.ts","C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\optimism\\src\\entry.ts","C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\optimism\\src\\key-trie.ts","C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\optimism\\src\\index.ts"],"sourcesContent":["interface Node<K, V> {\n  key: K;\n  value: V;\n  newer: Node<K, V> | null;\n  older: Node<K, V> | null;\n}\n\nfunction defaultDispose() {}\n\nexport class Cache<K = any, V = any> {\n  private map = new Map<K, Node<K, V>>();\n  private newest: Node<K, V> | null = null;\n  private oldest: Node<K, V> | null = null;\n\n  constructor(\n    private max = Infinity,\n    public dispose: (value: V, key: K) => void = defaultDispose,\n  ) {}\n\n  public has(key: K) {\n    return this.map.has(key);\n  }\n\n  public get(key: K) {\n    const entry = this.getEntry(key);\n    return entry && entry.value;\n  }\n\n  private getEntry(key: K): Node<K, V> | void {\n    const entry = this.map.get(key);\n\n    if (entry && entry !== this.newest) {\n      const { older, newer } = entry;\n\n      if (newer) {\n        newer.older = older;\n      }\n\n      if (older) {\n        older.newer = newer;\n      }\n\n      entry.older = this.newest;\n      entry.older!.newer = entry;\n\n      entry.newer = null;\n      this.newest = entry;\n\n      if (entry === this.oldest) {\n        this.oldest = newer;\n      }\n    }\n\n    return entry;\n  }\n\n  public set(key: K, value: V) {\n    let entry = this.getEntry(key);\n    if (entry) {\n      return entry.value = value;\n    }\n\n    entry = {\n      key: key,\n      value: value,\n      newer: null,\n      older: this.newest\n    };\n\n    if (this.newest) {\n      this.newest.newer = entry;\n    }\n\n    this.newest = entry;\n    this.oldest = this.oldest || entry;\n\n    this.map.set(key, entry);\n\n    return entry.value;\n  }\n\n  public clean() {\n    while (this.oldest && this.map.size > this.max) {\n      this.delete(this.oldest.key);\n    }\n  }\n\n  public delete(key: K) {\n    const entry = this.map.get(key);\n    if (entry) {\n      if (entry === this.newest) {\n        this.newest = entry.older;\n      }\n\n      if (entry === this.oldest) {\n        this.oldest = entry.newer;\n      }\n\n      if (entry.newer) {\n        entry.newer.older = entry.older;\n      }\n\n      if (entry.older) {\n        entry.older.newer = entry.newer;\n      }\n\n      this.map.delete(key);\n      this.dispose(entry.value, key);\n\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { AnyEntry } from \"./entry\";\nimport { Slot } from \"@wry/context\";\n\nexport const parentEntrySlot = new Slot<AnyEntry>();\n\nexport {\n  bind as bindContext,\n  noContext,\n  setTimeout,\n  asyncFromGen,\n} from \"@wry/context\";\n","import { parentEntrySlot } from \"./context\";\nimport { OptimisticWrapOptions } from \"./index\";\n\nconst reusableEmptyArray: AnyEntry[] = [];\nconst emptySetPool: Set<AnyEntry>[] = [];\nconst POOL_TARGET_SIZE = 100;\n\n// Since this package might be used browsers, we should avoid using the\n// Node built-in assert module.\nfunction assert(condition: any, optionalMessage?: string) {\n  if (! condition) {\n    throw new Error(optionalMessage || \"assertion failure\");\n  }\n}\n\n// Since exceptions are cached just like normal values, we need an efficient\n// way of representing unknown, ordinary, and exceptional values.\ntype Value<T> =\n  | []           // unknown\n  | [T]          // known value\n  | [void, any]; // known exception\n\nfunction valueIs(a: Value<any>, b: Value<any>) {\n  const len = a.length;\n  return (\n    // Unknown values are not equal to each other.\n    len > 0 &&\n    // Both values must be ordinary (or both exceptional) to be equal.\n    len === b.length &&\n    // The underlying value or exception must be the same.\n    a[len - 1] === b[len - 1]\n  );\n}\n\nfunction valueGet<T>(value: Value<T>): T {\n  switch (value.length) {\n    case 0: throw new Error(\"unknown value\");\n    case 1: return value[0];\n    case 2: throw value[1];\n  }\n}\n\nfunction valueCopy<T>(value: Value<T>): Value<T> {\n  return value.slice(0) as Value<T>;\n}\n\nexport type AnyEntry = Entry<any, any>;\n\nexport class Entry<TArgs extends any[], TValue> {\n  public static count = 0;\n\n  public subscribe: OptimisticWrapOptions<TArgs>[\"subscribe\"];\n  public unsubscribe?: () => any;\n  public reportOrphan?: (this: Entry<TArgs, TValue>) => any;\n\n  public readonly parents = new Set<AnyEntry>();\n  public readonly childValues = new Map<AnyEntry, Value<any>>();\n\n  // When this Entry has children that are dirty, this property becomes\n  // a Set containing other Entry objects, borrowed from emptySetPool.\n  // When the set becomes empty, it gets recycled back to emptySetPool.\n  public dirtyChildren: Set<AnyEntry> | null = null;\n\n  public dirty = true;\n  public recomputing = false;\n  public readonly value: Value<TValue> = [];\n\n  constructor(\n    public readonly fn: (...args: TArgs) => TValue,\n    public args: TArgs,\n  ) {\n    ++Entry.count;\n  }\n\n  // This is the most important method of the Entry API, because it\n  // determines whether the cached this.value can be returned immediately,\n  // or must be recomputed. The overall performance of the caching system\n  // depends on the truth of the following observations: (1) this.dirty is\n  // usually false, (2) this.dirtyChildren is usually null/empty, and thus\n  // (3) valueGet(this.value) is usually returned without recomputation.\n  public recompute(): TValue {\n    assert(! this.recomputing, \"already recomputing\");\n\n    if (! rememberParent(this) && maybeReportOrphan(this)) {\n      // The recipient of the entry.reportOrphan callback decided to dispose\n      // of this orphan entry by calling entry.dispose(), so we don't need to\n      // (and should not) proceed with the recomputation.\n      return void 0 as any;\n    }\n\n    return mightBeDirty(this)\n      ? reallyRecompute(this)\n      : valueGet(this.value);\n  }\n\n  public setDirty() {\n    if (this.dirty) return;\n    this.dirty = true;\n    this.value.length = 0;\n    reportDirty(this);\n    // We can go ahead and unsubscribe here, since any further dirty\n    // notifications we receive will be redundant, and unsubscribing may\n    // free up some resources, e.g. file watchers.\n    maybeUnsubscribe(this);\n  }\n\n  public dispose() {\n    forgetChildren(this).forEach(maybeReportOrphan);\n    maybeUnsubscribe(this);\n\n    // Because this entry has been kicked out of the cache (in index.js),\n    // we've lost the ability to find out if/when this entry becomes dirty,\n    // whether that happens through a subscription, because of a direct call\n    // to entry.setDirty(), or because one of its children becomes dirty.\n    // Because of this loss of future information, we have to assume the\n    // worst (that this entry might have become dirty very soon), so we must\n    // immediately mark this entry's parents as dirty. Normally we could\n    // just call entry.setDirty() rather than calling parent.setDirty() for\n    // each parent, but that would leave this entry in parent.childValues\n    // and parent.dirtyChildren, which would prevent the child from being\n    // truly forgotten.\n    this.parents.forEach(parent => {\n      parent.setDirty();\n      forgetChild(parent, this);\n    });\n  }\n}\n\nfunction rememberParent(child: AnyEntry) {\n  const parent = parentEntrySlot.getValue();\n  if (parent) {\n    child.parents.add(parent);\n\n    if (! parent.childValues.has(child)) {\n      parent.childValues.set(child, []);\n    }\n\n    if (mightBeDirty(child)) {\n      reportDirtyChild(parent, child);\n    } else {\n      reportCleanChild(parent, child);\n    }\n\n    return parent;\n  }\n}\n\nfunction reallyRecompute(entry: AnyEntry) {\n  // Since this recomputation is likely to re-remember some of this\n  // entry's children, we forget our children here but do not call\n  // maybeReportOrphan until after the recomputation finishes.\n  const originalChildren = forgetChildren(entry);\n\n  // Set entry as the parent entry while calling recomputeNewValue(entry).\n  parentEntrySlot.withValue(entry, recomputeNewValue, [entry]);\n\n  if (maybeSubscribe(entry)) {\n    // If we successfully recomputed entry.value and did not fail to\n    // (re)subscribe, then this Entry is no longer explicitly dirty.\n    setClean(entry);\n  }\n\n  // Now that we've had a chance to re-remember any children that were\n  // involved in the recomputation, we can safely report any orphan\n  // children that remain.\n  originalChildren.forEach(maybeReportOrphan);\n\n  return valueGet(entry.value);\n}\n\nfunction recomputeNewValue(entry: AnyEntry) {\n  entry.recomputing = true;\n  // Set entry.value as unknown.\n  entry.value.length = 0;\n  try {\n    // If entry.fn succeeds, entry.value will become a normal Value.\n    entry.value[0] = entry.fn.apply(null, entry.args);\n  } catch (e) {\n    // If entry.fn throws, entry.value will become exceptional.\n    entry.value[1] = e;\n  }\n  // Either way, this line is always reached.\n  entry.recomputing = false;\n}\n\nfunction mightBeDirty(entry: AnyEntry) {\n  return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);\n}\n\nfunction setClean(entry: AnyEntry) {\n  entry.dirty = false;\n\n  if (mightBeDirty(entry)) {\n    // This Entry may still have dirty children, in which case we can't\n    // let our parents know we're clean just yet.\n    return;\n  }\n\n  reportClean(entry);\n}\n\nfunction reportDirty(child: AnyEntry) {\n  child.parents.forEach(parent => reportDirtyChild(parent, child));\n}\n\nfunction reportClean(child: AnyEntry) {\n  child.parents.forEach(parent => reportCleanChild(parent, child));\n}\n\n// Let a parent Entry know that one of its children may be dirty.\nfunction reportDirtyChild(parent: AnyEntry, child: AnyEntry) {\n  // Must have called rememberParent(child) before calling\n  // reportDirtyChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(mightBeDirty(child));\n\n  if (! parent.dirtyChildren) {\n    parent.dirtyChildren = emptySetPool.pop() || new Set;\n\n  } else if (parent.dirtyChildren.has(child)) {\n    // If we already know this child is dirty, then we must have already\n    // informed our own parents that we are dirty, so we can terminate\n    // the recursion early.\n    return;\n  }\n\n  parent.dirtyChildren.add(child);\n  reportDirty(parent);\n}\n\n// Let a parent Entry know that one of its children is no longer dirty.\nfunction reportCleanChild(parent: AnyEntry, child: AnyEntry) {\n  // Must have called rememberChild(child) before calling\n  // reportCleanChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(! mightBeDirty(child));\n\n  const childValue = parent.childValues.get(child)!;\n  if (childValue.length === 0) {\n    parent.childValues.set(child, valueCopy(child.value));\n  } else if (! valueIs(childValue, child.value)) {\n    parent.setDirty();\n  }\n\n  removeDirtyChild(parent, child);\n\n  if (mightBeDirty(parent)) {\n    return;\n  }\n\n  reportClean(parent);\n}\n\nfunction removeDirtyChild(parent: AnyEntry, child: AnyEntry) {\n  const dc = parent.dirtyChildren;\n  if (dc) {\n    dc.delete(child);\n    if (dc.size === 0) {\n      if (emptySetPool.length < POOL_TARGET_SIZE) {\n        emptySetPool.push(dc);\n      }\n      parent.dirtyChildren = null;\n    }\n  }\n}\n\n// If the given entry has a reportOrphan method, and no remaining parents,\n// call entry.reportOrphan and return true iff it returns true. The\n// reportOrphan function should return true to indicate entry.dispose()\n// has been called, and the entry has been removed from any other caches\n// (see index.js for the only current example).\nfunction maybeReportOrphan(entry: AnyEntry) {\n  return entry.parents.size === 0 &&\n    typeof entry.reportOrphan === \"function\" &&\n    entry.reportOrphan() === true;\n}\n\n// Removes all children from this entry and returns an array of the\n// removed children.\nfunction forgetChildren(parent: AnyEntry) {\n  let children = reusableEmptyArray;\n\n  if (parent.childValues.size > 0) {\n    children = [];\n    parent.childValues.forEach((_value, child) => {\n      forgetChild(parent, child);\n      children.push(child);\n    });\n  }\n\n  // After we forget all our children, this.dirtyChildren must be empty\n  // and therefore must have been reset to null.\n  assert(parent.dirtyChildren === null);\n\n  return children;\n}\n\nfunction forgetChild(parent: AnyEntry, child: AnyEntry) {\n  child.parents.delete(parent);\n  parent.childValues.delete(child);\n  removeDirtyChild(parent, child);\n}\n\nfunction maybeSubscribe(entry: AnyEntry) {\n  if (typeof entry.subscribe === \"function\") {\n    try {\n      maybeUnsubscribe(entry); // Prevent double subscriptions.\n      entry.unsubscribe = entry.subscribe.apply(null, entry.args);\n    } catch (e) {\n      // If this Entry has a subscribe function and it threw an exception\n      // (or an unsubscribe function it previously returned now throws),\n      // return false to indicate that we were not able to subscribe (or\n      // unsubscribe), and this Entry should remain dirty.\n      entry.setDirty();\n      return false;\n    }\n  }\n\n  // Returning true indicates either that there was no entry.subscribe\n  // function or that it succeeded.\n  return true;\n}\n\nfunction maybeUnsubscribe(entry: AnyEntry) {\n  const { unsubscribe } = entry;\n  if (typeof unsubscribe === \"function\") {\n    entry.unsubscribe = void 0;\n    unsubscribe();\n  }\n}\n","// A trie data structure that holds object keys weakly, yet can also hold\n// non-object keys, unlike the native `WeakMap`.\nexport class KeyTrie<K> {\n  // Since a `WeakMap` cannot hold primitive values as keys, we need a\n  // backup `Map` instance to hold primitive keys. Both `this._weakMap`\n  // and `this._strongMap` are lazily initialized.\n  private weak?: WeakMap<any, KeyTrie<K>>;\n  private strong?: Map<any, KeyTrie<K>>;\n  private data?: K;\n\n  constructor(private readonly weakness: boolean) {}\n\n  public lookup<T extends any[]>(...array: T): K {\n    return this.lookupArray(array);\n  }\n\n  public lookupArray<T extends any[]>(array: T): K {\n    let node: KeyTrie<K> = this;\n    array.forEach(key => node = node.getChildTrie(key));\n    return node.data || (node.data = Object.create(null));\n  }\n\n  private getChildTrie(key: any) {\n    const map = this.weakness && isObjRef(key)\n      ? this.weak || (this.weak = new WeakMap<any, KeyTrie<K>>())\n      : this.strong || (this.strong = new Map<any, KeyTrie<K>>());\n    let child = map.get(key);\n    if (!child) map.set(key, child = new KeyTrie<K>(this.weakness));\n    return child;\n  }\n}\n\nfunction isObjRef(value: any) {\n  switch (typeof value) {\n  case \"object\":\n    if (value === null) break;\n    // Fall through to return true...\n  case \"function\":\n    return true;\n  }\n  return false;\n}\n","import { Cache } from \"./cache\";\nimport { Entry, AnyEntry } from \"./entry\";\nimport { parentEntrySlot } from \"./context\";\nimport { KeyTrie } from \"./key-trie\";\n\n// These helper functions are important for making optimism work with\n// asynchronous code. In order to register parent-child dependencies,\n// optimism needs to know about any currently active parent computations.\n// In ordinary synchronous code, the parent context is implicit in the\n// execution stack, but asynchronous code requires some extra guidance in\n// order to propagate context from one async task segment to the next.\nexport {\n  bindContext,\n  noContext,\n  setTimeout,\n  asyncFromGen,\n} from \"./context\";\n\n// Since the Cache uses a Map internally, any value or object reference can\n// be safely used as a key, though common types include object and string.\nexport type TCacheKey = any;\n\n// The defaultMakeCacheKey function is remarkably powerful, because it gives\n// a unique object for any shallow-identical list of arguments. If you need\n// to implement a custom makeCacheKey function, you may find it helpful to\n// delegate the final work to defaultMakeCacheKey, which is why we export it\n// here. However, you may want to avoid defaultMakeCacheKey if your runtime\n// does not support WeakMap, or you have the ability to return a string key.\n// In those cases, just write your own custom makeCacheKey functions.\nconst keyTrie = new KeyTrie<TCacheKey>(typeof WeakMap === \"function\");\nexport function defaultMakeCacheKey(...args: any[]) {\n  return keyTrie.lookupArray(args);\n}\n\n// If you're paranoid about memory leaks, or you want to avoid using WeakMap\n// under the hood, but you still need the behavior of defaultMakeCacheKey,\n// import this constructor to create your own tries.\nexport { KeyTrie }\n\nexport type OptimisticWrapperFunction<\n  TArgs extends any[],\n  TResult,\n> = ((...args: TArgs) => TResult) & {\n  // The .dirty(...) method of an optimistic function takes exactly the\n  // same parameter types as the original function.\n  dirty: (...args: TArgs) => void;\n};\n\nexport type OptimisticWrapOptions<TArgs extends any[]> = {\n  // The maximum number of cache entries that should be retained before the\n  // cache begins evicting the oldest ones.\n  max?: number;\n  // If a wrapped function is \"disposable,\" then its creator does not\n  // care about its return value, and it should be removed from the cache\n  // immediately when it no longer has any parents that depend on it.\n  disposable?: boolean;\n  // The makeCacheKey function takes the same arguments that were passed to\n  // the wrapper function and returns a single value that can be used as a key\n  // in a Map to identify the cached result.\n  makeCacheKey?: (...args: TArgs) => TCacheKey;\n  // If provided, the subscribe function should either return an unsubscribe\n  // function or return nothing.\n  subscribe?: (...args: TArgs) => (() => any) | undefined;\n};\n\nconst caches = new Set<Cache<TCacheKey, AnyEntry>>();\n\nexport function wrap<\n  TArgs extends any[],\n  TResult,\n>(\n  originalFunction: (...args: TArgs) => TResult,\n  options: OptimisticWrapOptions<TArgs> = Object.create(null),\n) {\n  const cache = new Cache<TCacheKey, Entry<TArgs, TResult>>(\n    options.max || Math.pow(2, 16),\n    entry => entry.dispose(),\n  );\n\n  const disposable = !! options.disposable;\n  const makeCacheKey = options.makeCacheKey || defaultMakeCacheKey;\n\n  function optimistic(): TResult {\n    if (disposable && ! parentEntrySlot.hasValue()) {\n      // If there's no current parent computation, and this wrapped\n      // function is disposable (meaning we don't care about entry.value,\n      // just dependency tracking), then we can short-cut everything else\n      // in this function, because entry.recompute() is going to recycle\n      // the entry object without recomputing anything, anyway.\n      return void 0 as any;\n    }\n\n    const key = makeCacheKey.apply(null, arguments as any);\n    if (key === void 0) {\n      return originalFunction.apply(null, arguments as any);\n    }\n\n    const args = Array.prototype.slice.call(arguments) as TArgs;\n\n    let entry = cache.get(key);\n    if (entry) {\n      entry.args = args;\n    } else {\n      entry = new Entry<TArgs, TResult>(originalFunction, args);\n      cache.set(key, entry);\n      entry.subscribe = options.subscribe;\n      if (disposable) {\n        entry.reportOrphan = () => cache.delete(key);\n      }\n    }\n\n    const value = entry.recompute();\n\n    // Move this entry to the front of the least-recently used queue,\n    // since we just finished computing its value.\n    cache.set(key, entry);\n\n    caches.add(cache);\n\n    // Clean up any excess entries in the cache, but only if there is no\n    // active parent entry, meaning we're not in the middle of a larger\n    // computation that might be flummoxed by the cleaning.\n    if (! parentEntrySlot.hasValue()) {\n      caches.forEach(cache => cache.clean());\n      caches.clear();\n    }\n\n    // If options.disposable is truthy, the caller of wrap is telling us\n    // they don't care about the result of entry.recompute(), so we should\n    // avoid returning the value, so it won't be accidentally used.\n    return disposable ? void 0 as any : value;\n  }\n\n  optimistic.dirty = function () {\n    const key = makeCacheKey.apply(null, arguments as any);\n    const child = key !== void 0 && cache.get(key);\n    if (child) {\n      child.setDirty();\n    }\n  };\n\n  return optimistic as OptimisticWrapperFunction<TArgs, TResult>;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}