{"ast":null,"code":"import { parser, DocumentType, ApolloConsumer } from '@apollo/react-common';\nexport { ApolloConsumer, ApolloProvider, getApolloContext, resetApolloContext } from '@apollo/react-common';\nimport { __extends, __assign, __rest } from 'tslib';\nimport React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { Query, Mutation, Subscription } from '@apollo/react-components';\nimport { invariant } from 'ts-invariant';\nvar defaultMapPropsToOptions = function () {\n  return {};\n};\nvar defaultMapPropsToSkip = function () {\n  return false;\n};\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\nfunction calculateVariablesFromProps(operation, props) {\n  var variables = {};\n  for (var _i = 0, _a = operation.variables; _i < _a.length; _i++) {\n    var _b = _a[_i],\n      variable = _b.variable,\n      type = _b.type;\n    if (!variable.name || !variable.name.value) continue;\n    var variableName = variable.name.value;\n    var variableProp = props[variableName];\n    if (typeof variableProp !== 'undefined') {\n      variables[variableName] = variableProp;\n      continue;\n    }\n    if (type.kind !== 'NonNullType') {\n      variables[variableName] = undefined;\n    }\n  }\n  return variables;\n}\nvar GraphQLBase = function (_super) {\n  __extends(GraphQLBase, _super);\n  function GraphQLBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this.withRef = false;\n    _this.setWrappedInstance = _this.setWrappedInstance.bind(_this);\n    return _this;\n  }\n  GraphQLBase.prototype.getWrappedInstance = function () {\n    process.env.NODE_ENV === \"production\" ? invariant(this.withRef, 2) : invariant(this.withRef, \"To access the wrapped instance, you need to specify \" + \"{ withRef: true } in the options\");\n    return this.wrappedInstance;\n  };\n  GraphQLBase.prototype.setWrappedInstance = function (ref) {\n    this.wrappedInstance = ref;\n  };\n  return GraphQLBase;\n}(React.Component);\nfunction withQuery(document, operationOptions) {\n  if (operationOptions === void 0) {\n    operationOptions = {};\n  }\n  var operation = parser(document);\n  var _a = operationOptions.options,\n    options = _a === void 0 ? defaultMapPropsToOptions : _a,\n    _b = operationOptions.skip,\n    skip = _b === void 0 ? defaultMapPropsToSkip : _b,\n    _c = operationOptions.alias,\n    alias = _c === void 0 ? 'Apollo' : _c;\n  var mapPropsToOptions = options;\n  if (typeof mapPropsToOptions !== 'function') {\n    mapPropsToOptions = function () {\n      return options;\n    };\n  }\n  var mapPropsToSkip = skip;\n  if (typeof mapPropsToSkip !== 'function') {\n    mapPropsToSkip = function () {\n      return skip;\n    };\n  }\n  var lastResultProps;\n  return function (WrappedComponent) {\n    var graphQLDisplayName = alias + \"(\" + getDisplayName(WrappedComponent) + \")\";\n    var GraphQL = function (_super) {\n      __extends(GraphQL, _super);\n      function GraphQL() {\n        return _super !== null && _super.apply(this, arguments) || this;\n      }\n      GraphQL.prototype.render = function () {\n        var _this = this;\n        var props = this.props;\n        var shouldSkip = mapPropsToSkip(props);\n        var opts = shouldSkip ? Object.create(null) : __assign({}, mapPropsToOptions(props));\n        if (!shouldSkip && !opts.variables && operation.variables.length > 0) {\n          opts.variables = calculateVariablesFromProps(operation, props);\n        }\n        return React.createElement(Query, __assign({}, opts, {\n          displayName: graphQLDisplayName,\n          skip: shouldSkip,\n          query: document\n        }), function (_a) {\n          var _b, _c;\n          var _ = _a.client,\n            data = _a.data,\n            r = __rest(_a, [\"client\", \"data\"]);\n          if (operationOptions.withRef) {\n            _this.withRef = true;\n            props = Object.assign({}, props, {\n              ref: _this.setWrappedInstance\n            });\n          }\n          if (shouldSkip) {\n            return React.createElement(WrappedComponent, __assign({}, props, {}));\n          }\n          var result = Object.assign(r, data || {});\n          var name = operationOptions.name || 'data';\n          var childProps = (_b = {}, _b[name] = result, _b);\n          if (operationOptions.props) {\n            var newResult = (_c = {}, _c[name] = result, _c.ownProps = props, _c);\n            lastResultProps = operationOptions.props(newResult, lastResultProps);\n            childProps = lastResultProps;\n          }\n          return React.createElement(WrappedComponent, __assign({}, props, childProps));\n        });\n      };\n      GraphQL.displayName = graphQLDisplayName;\n      GraphQL.WrappedComponent = WrappedComponent;\n      return GraphQL;\n    }(GraphQLBase);\n    return hoistNonReactStatics(GraphQL, WrappedComponent, {});\n  };\n}\nfunction withMutation(document, operationOptions) {\n  if (operationOptions === void 0) {\n    operationOptions = {};\n  }\n  var operation = parser(document);\n  var _a = operationOptions.options,\n    options = _a === void 0 ? defaultMapPropsToOptions : _a,\n    _b = operationOptions.alias,\n    alias = _b === void 0 ? 'Apollo' : _b;\n  var mapPropsToOptions = options;\n  if (typeof mapPropsToOptions !== 'function') mapPropsToOptions = function () {\n    return options;\n  };\n  return function (WrappedComponent) {\n    var graphQLDisplayName = alias + \"(\" + getDisplayName(WrappedComponent) + \")\";\n    var GraphQL = function (_super) {\n      __extends(GraphQL, _super);\n      function GraphQL() {\n        return _super !== null && _super.apply(this, arguments) || this;\n      }\n      GraphQL.prototype.render = function () {\n        var props = this.props;\n        var opts = mapPropsToOptions(props);\n        if (operationOptions.withRef) {\n          this.withRef = true;\n          props = Object.assign({}, props, {\n            ref: this.setWrappedInstance\n          });\n        }\n        if (!opts.variables && operation.variables.length > 0) {\n          opts.variables = calculateVariablesFromProps(operation, props);\n        }\n        return React.createElement(Mutation, __assign({\n          ignoreResults: true\n        }, opts, {\n          mutation: document\n        }), function (mutate, _a) {\n          var _b, _c;\n          var data = _a.data,\n            r = __rest(_a, [\"data\"]);\n          var result = Object.assign(r, data || {});\n          var name = operationOptions.name || 'mutate';\n          var resultName = operationOptions.name ? name + \"Result\" : 'result';\n          var childProps = (_b = {}, _b[name] = mutate, _b[resultName] = result, _b);\n          if (operationOptions.props) {\n            var newResult = (_c = {}, _c[name] = mutate, _c[resultName] = result, _c.ownProps = props, _c);\n            childProps = operationOptions.props(newResult);\n          }\n          return React.createElement(WrappedComponent, __assign({}, props, childProps));\n        });\n      };\n      GraphQL.displayName = graphQLDisplayName;\n      GraphQL.WrappedComponent = WrappedComponent;\n      return GraphQL;\n    }(GraphQLBase);\n    return hoistNonReactStatics(GraphQL, WrappedComponent, {});\n  };\n}\nfunction withSubscription(document, operationOptions) {\n  if (operationOptions === void 0) {\n    operationOptions = {};\n  }\n  var operation = parser(document);\n  var _a = operationOptions.options,\n    options = _a === void 0 ? defaultMapPropsToOptions : _a,\n    _b = operationOptions.skip,\n    skip = _b === void 0 ? defaultMapPropsToSkip : _b,\n    _c = operationOptions.alias,\n    alias = _c === void 0 ? 'Apollo' : _c,\n    shouldResubscribe = operationOptions.shouldResubscribe;\n  var mapPropsToOptions = options;\n  if (typeof mapPropsToOptions !== 'function') mapPropsToOptions = function () {\n    return options;\n  };\n  var mapPropsToSkip = skip;\n  if (typeof mapPropsToSkip !== 'function') mapPropsToSkip = function () {\n    return skip;\n  };\n  var lastResultProps;\n  return function (WrappedComponent) {\n    var graphQLDisplayName = alias + \"(\" + getDisplayName(WrappedComponent) + \")\";\n    var GraphQL = function (_super) {\n      __extends(GraphQL, _super);\n      function GraphQL(props) {\n        var _this = _super.call(this, props) || this;\n        _this.state = {\n          resubscribe: false\n        };\n        return _this;\n      }\n      GraphQL.prototype.componentDidUpate = function (prevProps) {\n        if (shouldResubscribe) {\n          this.setState({\n            resubscribe: shouldResubscribe(prevProps, this.props)\n          });\n        }\n      };\n      GraphQL.prototype.render = function () {\n        var _this = this;\n        var props = this.props;\n        var shouldSkip = mapPropsToSkip(props);\n        var opts = shouldSkip ? Object.create(null) : mapPropsToOptions(props);\n        if (!shouldSkip && !opts.variables && operation.variables.length > 0) {\n          opts.variables = calculateVariablesFromProps(operation, props);\n        }\n        return React.createElement(Subscription, __assign({}, opts, {\n          displayName: graphQLDisplayName,\n          skip: shouldSkip,\n          subscription: document,\n          shouldResubscribe: this.state.resubscribe\n        }), function (_a) {\n          var _b, _c;\n          var data = _a.data,\n            r = __rest(_a, [\"data\"]);\n          if (operationOptions.withRef) {\n            _this.withRef = true;\n            props = Object.assign({}, props, {\n              ref: _this.setWrappedInstance\n            });\n          }\n          if (shouldSkip) {\n            return React.createElement(WrappedComponent, __assign({}, props, {}));\n          }\n          var result = Object.assign(r, data || {});\n          var name = operationOptions.name || 'data';\n          var childProps = (_b = {}, _b[name] = result, _b);\n          if (operationOptions.props) {\n            var newResult = (_c = {}, _c[name] = result, _c.ownProps = props, _c);\n            lastResultProps = operationOptions.props(newResult, lastResultProps);\n            childProps = lastResultProps;\n          }\n          return React.createElement(WrappedComponent, __assign({}, props, childProps));\n        });\n      };\n      GraphQL.displayName = graphQLDisplayName;\n      GraphQL.WrappedComponent = WrappedComponent;\n      return GraphQL;\n    }(GraphQLBase);\n    return hoistNonReactStatics(GraphQL, WrappedComponent, {});\n  };\n}\nfunction graphql(document, operationOptions) {\n  if (operationOptions === void 0) {\n    operationOptions = {};\n  }\n  switch (parser(document).type) {\n    case DocumentType.Mutation:\n      return withMutation(document, operationOptions);\n    case DocumentType.Subscription:\n      return withSubscription(document, operationOptions);\n    case DocumentType.Query:\n    default:\n      return withQuery(document, operationOptions);\n  }\n}\nfunction getDisplayName$1(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\nfunction withApollo(WrappedComponent, operationOptions) {\n  if (operationOptions === void 0) {\n    operationOptions = {};\n  }\n  var withDisplayName = \"withApollo(\" + getDisplayName$1(WrappedComponent) + \")\";\n  var WithApollo = function (_super) {\n    __extends(WithApollo, _super);\n    function WithApollo(props) {\n      var _this = _super.call(this, props) || this;\n      _this.setWrappedInstance = _this.setWrappedInstance.bind(_this);\n      return _this;\n    }\n    WithApollo.prototype.getWrappedInstance = function () {\n      process.env.NODE_ENV === \"production\" ? invariant(operationOptions.withRef, 1) : invariant(operationOptions.withRef, \"To access the wrapped instance, you need to specify \" + \"{ withRef: true } in the options\");\n      return this.wrappedInstance;\n    };\n    WithApollo.prototype.setWrappedInstance = function (ref) {\n      this.wrappedInstance = ref;\n    };\n    WithApollo.prototype.render = function () {\n      var _this = this;\n      return React.createElement(ApolloConsumer, null, function (client) {\n        var props = Object.assign({}, _this.props, {\n          client: client,\n          ref: operationOptions.withRef ? _this.setWrappedInstance : undefined\n        });\n        return React.createElement(WrappedComponent, __assign({}, props));\n      });\n    };\n    WithApollo.displayName = withDisplayName;\n    WithApollo.WrappedComponent = WrappedComponent;\n    return WithApollo;\n  }(React.Component);\n  return hoistNonReactStatics(WithApollo, WrappedComponent, {});\n}\nexport { graphql, withApollo, withMutation, withQuery, withSubscription };","map":{"version":3,"names":["defaultMapPropsToOptions","defaultMapPropsToSkip","getDisplayName","WrappedComponent","displayName","name","calculateVariablesFromProps","operation","props","variables","_i","_a","length","_b","variable","type","value","variableName","variableProp","kind","undefined","GraphQLBase","_super","__extends","_this","call","withRef","setWrappedInstance","bind","prototype","getWrappedInstance","process","env","NODE_ENV","invariant","wrappedInstance","ref","React","Component","withQuery","document","operationOptions","parser","options","skip","_c","alias","mapPropsToOptions","mapPropsToSkip","lastResultProps","graphQLDisplayName","GraphQL","render","shouldSkip","opts","Object","create","createElement","Query","__assign","query","_","client","data","r","__rest","assign","result","childProps","newResult","ownProps","hoistNonReactStatics","withMutation","Mutation","ignoreResults","mutation","mutate","resultName","withSubscription","shouldResubscribe","state","resubscribe","componentDidUpate","prevProps","setState","Subscription","subscription","graphql","DocumentType","getDisplayName$1","withApollo","withDisplayName","WithApollo","ApolloConsumer"],"sources":["C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\@apollo\\react-hoc\\src\\hoc-utils.tsx","C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\@apollo\\react-hoc\\src\\query-hoc.tsx","C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\@apollo\\react-hoc\\src\\mutation-hoc.tsx","C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\@apollo\\react-hoc\\src\\subscription-hoc.tsx","C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\@apollo\\react-hoc\\src\\graphql.tsx","C:\\Users\\user\\Desktop\\השטויות של בן\\messaging-board\\node_modules\\@apollo\\react-hoc\\src\\withApollo.tsx"],"sourcesContent":["import React from 'react';\nimport { invariant } from 'ts-invariant';\nimport { IDocumentDefinition, OperationVariables } from '@apollo/react-common';\n\nexport const defaultMapPropsToOptions = () => ({});\nexport const defaultMapResultToProps: <P>(props: P) => P = props => props;\nexport const defaultMapPropsToSkip = () => false;\n\nexport function getDisplayName<P>(WrappedComponent: React.ComponentType<P>) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n\nexport function calculateVariablesFromProps<TProps>(\n  operation: IDocumentDefinition,\n  props: TProps\n) {\n  let variables: OperationVariables = {};\n  for (let { variable, type } of operation.variables) {\n    if (!variable.name || !variable.name.value) continue;\n\n    const variableName = variable.name.value;\n    const variableProp = (props as any)[variableName];\n\n    if (typeof variableProp !== 'undefined') {\n      variables[variableName] = variableProp;\n      continue;\n    }\n\n    // Allow optional props\n    if (type.kind !== 'NonNullType') {\n      variables[variableName] = undefined;\n    }\n  }\n  return variables;\n}\n\nexport type RefSetter<TChildProps> = (\n  ref: React.ComponentClass<TChildProps>\n) => void | void;\n\n// base class for hocs to easily manage refs\nexport class GraphQLBase<\n  TProps,\n  TChildProps,\n  TState = any\n  > extends React.Component<TProps, TState> {\n  public withRef: boolean = false;\n  // wrapped instance\n  private wrappedInstance?: React.ComponentClass<TChildProps>;\n\n  constructor(props: TProps) {\n    super(props);\n    this.setWrappedInstance = this.setWrappedInstance.bind(this);\n  }\n\n  getWrappedInstance() {\n    invariant(\n      this.withRef,\n      `To access the wrapped instance, you need to specify ` +\n      `{ withRef: true } in the options`\n    );\n\n    return this.wrappedInstance;\n  }\n\n  setWrappedInstance(ref: React.ComponentClass<TChildProps>) {\n    this.wrappedInstance = ref;\n  }\n}\n","import React from 'react';\nimport { DocumentNode } from 'graphql';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { parser, BaseQueryOptions } from '@apollo/react-common';\nimport { Query } from '@apollo/react-components';\n\nimport {\n  getDisplayName,\n  GraphQLBase,\n  calculateVariablesFromProps,\n  defaultMapPropsToOptions,\n  defaultMapPropsToSkip\n} from './hoc-utils';\nimport { OperationOption, OptionProps, DataProps } from './types';\n\nexport function withQuery<\n  TProps extends TGraphQLVariables | {} = {},\n  TData = {},\n  TGraphQLVariables = {},\n  TChildProps = DataProps<TData, TGraphQLVariables>\n>(\n  document: DocumentNode,\n  operationOptions: OperationOption<\n    TProps,\n    TData,\n    TGraphQLVariables,\n    TChildProps\n  > = {}\n) {\n  // this is memoized so if coming from `graphql` there is nearly no extra cost\n  const operation = parser(document);\n  // extract options\n  const {\n    options = defaultMapPropsToOptions,\n    skip = defaultMapPropsToSkip,\n    alias = 'Apollo'\n  } = operationOptions;\n\n  let mapPropsToOptions = options as (props: any) => BaseQueryOptions;\n  if (typeof mapPropsToOptions !== 'function') {\n    mapPropsToOptions = () => options as BaseQueryOptions;\n  }\n\n  let mapPropsToSkip = skip as (props: any) => boolean;\n  if (typeof mapPropsToSkip !== 'function') {\n    mapPropsToSkip = () => skip as any;\n  }\n\n  // allow for advanced referential equality checks\n  let lastResultProps: TChildProps | void;\n  return (\n    WrappedComponent: React.ComponentType<TProps & TChildProps>\n  ): React.ComponentClass<TProps> => {\n    const graphQLDisplayName = `${alias}(${getDisplayName(WrappedComponent)})`;\n    class GraphQL extends GraphQLBase<TProps, TChildProps> {\n      static displayName = graphQLDisplayName;\n      static WrappedComponent = WrappedComponent;\n\n      render() {\n        let props = this.props;\n        const shouldSkip = mapPropsToSkip(props);\n        const opts = shouldSkip\n          ? Object.create(null)\n          : { ...mapPropsToOptions(props) };\n\n        if (!shouldSkip && !opts.variables && operation.variables.length > 0) {\n          opts.variables = calculateVariablesFromProps(operation, props);\n        }\n\n        return (\n          <Query\n            {...opts}\n            displayName={graphQLDisplayName}\n            skip={shouldSkip}\n            query={document}\n          >\n            {({ client: _, data, ...r }: any) => {\n              if (operationOptions.withRef) {\n                this.withRef = true;\n                props = Object.assign({}, props, {\n                  ref: this.setWrappedInstance\n                });\n              }\n\n              // if we have skipped, no reason to manage any reshaping\n              if (shouldSkip) {\n                return (\n                  <WrappedComponent\n                    {...props as TProps}\n                    {...{} as TChildProps}\n                  />\n                );\n              }\n\n              // the HOC's historically hoisted the data from the execution result\n              // up onto the result since it was passed as a nested prop\n              // we massage the Query components shape here to replicate that\n              const result = Object.assign(r, data || {});\n              const name = operationOptions.name || 'data';\n              let childProps = { [name]: result };\n              if (operationOptions.props) {\n                const newResult: OptionProps<\n                  TProps,\n                  TData,\n                  TGraphQLVariables\n                > = {\n                  [name]: result,\n                  ownProps: props as TProps\n                };\n                lastResultProps = operationOptions.props(\n                  newResult,\n                  lastResultProps\n                );\n                childProps = lastResultProps;\n              }\n\n              return (\n                <WrappedComponent\n                  {...props as TProps}\n                  {...childProps as TChildProps}\n                />\n              );\n            }}\n          </Query>\n        );\n      }\n    }\n\n    // Make sure we preserve any custom statics on the original component.\n    return hoistNonReactStatics(GraphQL, WrappedComponent, {});\n  };\n}\n","import React from 'react';\nimport { DocumentNode } from 'graphql';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport {\n  parser,\n  BaseMutationOptions,\n  MutationFunction,\n  MutationResult\n} from '@apollo/react-common';\nimport { Mutation } from '@apollo/react-components';\n\nimport {\n  defaultMapPropsToOptions,\n  getDisplayName,\n  calculateVariablesFromProps,\n  GraphQLBase\n} from './hoc-utils';\nimport { OperationOption, OptionProps, MutateProps } from './types';\n\nexport function withMutation<\n  TProps extends TGraphQLVariables | {} = {},\n  TData = {},\n  TGraphQLVariables = {},\n  TChildProps = MutateProps<TData, TGraphQLVariables>\n>(\n  document: DocumentNode,\n  operationOptions: OperationOption<\n    TProps,\n    TData,\n    TGraphQLVariables,\n    TChildProps\n  > = {}\n) {\n  // this is memoized so if coming from `graphql` there is nearly no extra cost\n  const operation = parser(document);\n  // extract options\n\n  const {\n    options = defaultMapPropsToOptions,\n    alias = 'Apollo'\n  } = operationOptions;\n\n  let mapPropsToOptions = options as (props: any) => BaseMutationOptions;\n  if (typeof mapPropsToOptions !== 'function')\n    mapPropsToOptions = () => options as BaseMutationOptions;\n\n  return (\n    WrappedComponent: React.ComponentType<TProps & TChildProps>\n  ): React.ComponentClass<TProps> => {\n    const graphQLDisplayName = `${alias}(${getDisplayName(WrappedComponent)})`;\n    class GraphQL extends GraphQLBase<TProps, TChildProps> {\n      static displayName = graphQLDisplayName;\n      static WrappedComponent = WrappedComponent;\n      render() {\n        let props = this.props as TProps;\n        const opts = mapPropsToOptions(props);\n\n        if (operationOptions.withRef) {\n          this.withRef = true;\n          props = Object.assign({}, props, {\n            ref: this.setWrappedInstance\n          });\n        }\n        if (!opts.variables && operation.variables.length > 0) {\n          opts.variables = calculateVariablesFromProps(operation, props);\n        }\n\n        return (\n          <Mutation ignoreResults {...opts} mutation={document}>\n            {(\n              mutate: MutationFunction<TData, TGraphQLVariables>,\n              { data, ...r }: MutationResult<TData>\n            ) => {\n              // the HOC's historically hoisted the data from the execution result\n              // up onto the result since it was passed as a nested prop\n              // we massage the Mutation component's shape here to replicate that\n              // this matches the query HoC\n              const result = Object.assign(r, data || {});\n              const name = operationOptions.name || 'mutate';\n              const resultName = operationOptions.name\n                ? `${name}Result`\n                : 'result';\n              let childProps = ({\n                [name]: mutate,\n                [resultName]: result\n              } as any) as TChildProps;\n              if (operationOptions.props) {\n                const newResult: OptionProps<\n                  TProps,\n                  TData,\n                  TGraphQLVariables\n                > = {\n                  [name]: mutate,\n                  [resultName]: result,\n                  ownProps: props\n                };\n                childProps = operationOptions.props(newResult) as any;\n              }\n\n              return <WrappedComponent {...props} {...childProps} />;\n            }}\n          </Mutation>\n        );\n      }\n    }\n\n    // Make sure we preserve any custom statics on the original component.\n    return hoistNonReactStatics(GraphQL, WrappedComponent, {});\n  };\n}\n","import React from 'react';\nimport { DocumentNode } from 'graphql';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { parser, BaseQueryOptions } from '@apollo/react-common';\nimport { Subscription } from '@apollo/react-components';\n\nimport {\n  getDisplayName,\n  GraphQLBase,\n  calculateVariablesFromProps,\n  defaultMapPropsToOptions,\n  defaultMapPropsToSkip\n} from './hoc-utils';\nimport { OperationOption, OptionProps, DataProps } from './types';\n\nexport function withSubscription<\n  TProps extends TGraphQLVariables | {} = {},\n  TData = {},\n  TGraphQLVariables = {},\n  TChildProps = DataProps<TData, TGraphQLVariables>\n>(\n  document: DocumentNode,\n  operationOptions: OperationOption<\n    TProps,\n    TData,\n    TGraphQLVariables,\n    TChildProps\n  > = {}\n) {\n  // this is memoized so if coming from `graphql` there is nearly no extra cost\n  const operation = parser(document);\n  // extract options\n  const {\n    options = defaultMapPropsToOptions,\n    skip = defaultMapPropsToSkip,\n    alias = 'Apollo',\n    shouldResubscribe\n  } = operationOptions;\n\n  let mapPropsToOptions = options as (props: any) => BaseQueryOptions;\n  if (typeof mapPropsToOptions !== 'function')\n    mapPropsToOptions = () => options as BaseQueryOptions;\n\n  let mapPropsToSkip = skip as (props: any) => boolean;\n  if (typeof mapPropsToSkip !== 'function') mapPropsToSkip = () => skip as any;\n\n  // allow for advanced referential equality checks\n  let lastResultProps: TChildProps | void;\n  return (\n    WrappedComponent: React.ComponentType<TProps & TChildProps>\n  ): React.ComponentClass<TProps> => {\n    const graphQLDisplayName = `${alias}(${getDisplayName(WrappedComponent)})`;\n    class GraphQL extends GraphQLBase<\n      TProps,\n      TChildProps,\n      { resubscribe: boolean }\n    > {\n      static displayName = graphQLDisplayName;\n      static WrappedComponent = WrappedComponent;\n      constructor(props: TProps) {\n        super(props);\n        this.state = { resubscribe: false };\n      }\n\n      componentDidUpate(prevProps: TProps) {\n        if (shouldResubscribe) {\n          this.setState({\n            resubscribe: shouldResubscribe(prevProps, this.props)\n          });\n        }\n      }\n\n      render() {\n        let props = this.props;\n        const shouldSkip = mapPropsToSkip(props);\n        const opts = shouldSkip\n          ? Object.create(null)\n          : mapPropsToOptions(props);\n\n        if (!shouldSkip && !opts.variables && operation.variables.length > 0) {\n          opts.variables = calculateVariablesFromProps(operation, props);\n        }\n        return (\n          <Subscription\n            {...opts}\n            displayName={graphQLDisplayName}\n            skip={shouldSkip}\n            subscription={document}\n            shouldResubscribe={this.state.resubscribe}\n          >\n            {({ data, ...r }: any) => {\n              if (operationOptions.withRef) {\n                this.withRef = true;\n                props = Object.assign({}, props, {\n                  ref: this.setWrappedInstance\n                });\n              }\n              // if we have skipped, no reason to manage any reshaping\n              if (shouldSkip) {\n                return (\n                  <WrappedComponent\n                    {...props as TProps}\n                    {...{} as TChildProps}\n                  />\n                );\n              }\n\n              // the HOC's historically hoisted the data from the execution result\n              // up onto the result since it was passed as a nested prop\n              // we massage the Query components shape here to replicate that\n              const result = Object.assign(r, data || {});\n              const name = operationOptions.name || 'data';\n              let childProps = { [name]: result };\n              if (operationOptions.props) {\n                const newResult: OptionProps<\n                  TProps,\n                  TData,\n                  TGraphQLVariables\n                > = {\n                  [name]: result,\n                  ownProps: props as TProps\n                };\n                lastResultProps = operationOptions.props(\n                  newResult,\n                  lastResultProps\n                );\n                childProps = lastResultProps;\n              }\n\n              return (\n                <WrappedComponent\n                  {...props as TProps}\n                  {...childProps as TChildProps}\n                />\n              );\n            }}\n          </Subscription>\n        );\n      }\n    }\n\n    // Make sure we preserve any custom statics on the original component.\n    return hoistNonReactStatics(GraphQL, WrappedComponent, {});\n  };\n}\n","import { DocumentNode } from 'graphql';\nimport { parser, DocumentType } from '@apollo/react-common';\n\nimport { withQuery } from './query-hoc';\nimport { withMutation } from './mutation-hoc';\nimport { withSubscription } from './subscription-hoc';\nimport { OperationOption, DataProps, MutateProps } from './types';\n\nexport function graphql<\n  TProps extends TGraphQLVariables | {} = {},\n  TData = {},\n  TGraphQLVariables = {},\n  TChildProps = Partial<DataProps<TData, TGraphQLVariables>> &\n    Partial<MutateProps<TData, TGraphQLVariables>>\n>(\n  document: DocumentNode,\n  operationOptions: OperationOption<\n    TProps,\n    TData,\n    TGraphQLVariables,\n    TChildProps\n  > = {}\n) {\n  switch (parser(document).type) {\n    case DocumentType.Mutation:\n      return withMutation(document, operationOptions);\n    case DocumentType.Subscription:\n      return withSubscription(document, operationOptions);\n    case DocumentType.Query:\n    default:\n      return withQuery(document, operationOptions);\n  }\n}\n","import React from 'react';\nimport { ApolloConsumer } from '@apollo/react-common';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { invariant } from 'ts-invariant';\n\nimport { OperationOption, WithApolloClient } from './types';\n\nfunction getDisplayName<P>(WrappedComponent: React.ComponentType<P>) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n\nexport function withApollo<TProps, TResult = any>(\n  WrappedComponent: React.ComponentType<\n    WithApolloClient<Omit<TProps, 'client'>>\n  >,\n  operationOptions: OperationOption<TProps, TResult> = {}\n): React.ComponentClass<Omit<TProps, 'client'>> {\n  const withDisplayName = `withApollo(${getDisplayName(WrappedComponent)})`;\n\n  class WithApollo extends React.Component<Omit<TProps, 'client'>> {\n    static displayName = withDisplayName;\n    static WrappedComponent = WrappedComponent;\n\n    // wrapped instance\n    private wrappedInstance: any;\n\n    constructor(props: Omit<TProps, 'client'>) {\n      super(props);\n      this.setWrappedInstance = this.setWrappedInstance.bind(this);\n    }\n\n    getWrappedInstance() {\n      invariant(\n        operationOptions.withRef,\n        `To access the wrapped instance, you need to specify ` +\n          `{ withRef: true } in the options`\n      );\n\n      return this.wrappedInstance;\n    }\n\n    setWrappedInstance(ref: React.ComponentType<WithApolloClient<TProps>>) {\n      this.wrappedInstance = ref;\n    }\n\n    render() {\n      return (\n        <ApolloConsumer>\n          {client => {\n            const props = Object.assign({}, this.props, {\n              client,\n              ref: operationOptions.withRef\n                ? this.setWrappedInstance\n                : undefined\n            });\n            return <WrappedComponent {...props} />;\n          }}\n        </ApolloConsumer>\n      );\n    }\n  }\n\n  // Make sure we preserve any custom statics on the original component.\n  return hoistNonReactStatics(WithApollo, WrappedComponent, {});\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}